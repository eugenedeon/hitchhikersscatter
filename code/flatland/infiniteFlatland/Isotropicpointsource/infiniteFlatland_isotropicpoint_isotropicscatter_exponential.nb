(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    557886,      10388]
NotebookOptionsPosition[    552635,      10208]
NotebookOutlinePosition[    553042,      10226]
CellTagsIndexPosition[    552999,      10223]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Infinite Flatland medium, Isotropic Point Source, Isotropic Scattering\
\>", "Title",
 CellChangeTimes->{{3.61742787362737*^9, 3.617427885266508*^9}, {
  3.619592656668026*^9, 3.619592662680479*^9}, {3.621178701559973*^9, 
  3.621178702944907*^9}, {3.626744457954844*^9, 3.626744459455998*^9}, {
  3.6270128566699667`*^9, 3.62701287183559*^9}}],

Cell["Exponential Random Flight", "Subtitle",
 CellChangeTimes->{{3.619594484416584*^9, 3.6195944880949802`*^9}}],

Cell[TextData[{
 "This is code to accompany the book:\n",
 StyleBox["A Hitchhiker\[CloseCurlyQuote]s Guide to Multiple Scattering\n", 
  "Subchapter"],
 StyleBox["\[Copyright] 2017", "Subsection"],
 StyleBox[" ", "Section"],
 StyleBox["Eugene d\[CloseCurlyQuote]Eon \nwww.eugenedeon.com", "Subsection"]
}], "Text",
 CellChangeTimes->{{3.6174286022468777`*^9, 3.617428710592918*^9}, {
  3.6410039396211576`*^9, 3.641003945296226*^9}, {3.645060407236547*^9, 
  3.645060444609275*^9}, {3.720027798753991*^9, 3.7200277989185963`*^9}}],

Cell[CellGroupData[{

Cell["Path Setup", "Section",
 CellChangeTimes->{{3.640928920990849*^9, 3.64092892141395*^9}, {
  3.640928986491934*^9, 3.640928986905283*^9}}],

Cell["\<\
Put a file at ~/.hitchhikerpath with the path to your hitchhiker repo so that \
these worksheets can find the MC data from the C++ simulations for \
verification\
\>", "Text",
 CellChangeTimes->{{3.640928926126832*^9, 3.6409289600754013`*^9}}],

Cell[BoxData[
 RowBox[{"SetDirectory", "[", 
  RowBox[{"Import", "[", "\"\<~/.hitchhikerpath\>\"", "]"}], "]"}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notation", "Section",
 CellChangeTimes->{{3.617428538130481*^9, 3.617428538753331*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvfmbHFd1N57n/f7y/fH7Kzzwgr8xkEDyJoFAWJIAeZM3kAWvYAwYsI0B
Q2xjILbBxgths0kk2/IqL5JGq7WNJEuaGa3dVT2SsWVLMl602bI0M90zzj/x
Vnd13Tr7vdXdo+lulZ9rPTVVt07drrr3nM/9nHPuveCamy799v/4gz/4gx/9
v8k/l15962d/+MOrf3LZ/5f88cUbf3T9d2687lufv/HH133nuh9+/Jr/Jzn5
18k//5T83zyuNd7urEzONkvHt5fyS/ml/GGW3yohNeN6s8xfS9TntoprbYEb
6/TPDtpf4P109v5b33f/mcY8vb2B75/zI//AyTeWrxw5MF0f0PaX8odJPpHQ
jUx+b8iZUn4pv5Tfn/J7Us4ZcotBsc9kx3NJ4edt+eiN+RCa+Ns1NMilhSNA
rXzvv3aMvny6pnzfQe+ffSh/6+7dO+Pa4La/lH9eye9tC0v5pfxS/qDIh/gH
SZBQRyEUpyEu7WrakhgDNnZ+DhR6Ff4i/V6/fK1VWvu75zBDJMAGwO/7meuX
XXzL2oXqP+eb/IPTjeUrRw6ePjOg7S/lD5/8spSlLGU5N0XCQhxZ2RgsBKHN
sXKu5du/usAb69Rzvf9M430XL/rDLyz6zfqDC/7dz4cycfC5LeMTC96MspSF
lM4Qo3ZXrxBpKb+UX8qfP/m9Krr3U8Y8EksmoC+vBNSG+lyzmDiqLadVU2it
dl5lAj3tN465BPQ1W0X7IYF476n9ryTQLil/fuXD48en5qP/DHr/76H8ycZ/
r1y3bvLY8QFtfyn/PJTf/b2l/FJ+KX9h5YeXEOQwifBJiPczlAFDLUlPAsSV
tRBgsPqcK/ZVTY5dP71kyc9aqLY/iDm0EGDH3+vOZdUU3SXla3dvzlrVCYs4
6P3/HMiPjv5+9fr1CcYb0PaX8odYfr+1p5Rfyi/ld3y7GC9XrAG5KMovEQSi
Ra+5mliOHMvXrhOA1nj9WlMggWT+MwH1CyBJrU6NvTfymQzsp73/wJIgOofu
krJk50v90z+HT/6Gbc/uf+nw4La/lH9eye/PVpXyS/ml/O7lEM4nwJdaMH+h
IBYKL20khpi9/EwNFHgG1hSuKvca8os02OQJG+CMnrVhcKTaJ/7kNUshuvvY
Nx7fe7o+fz1zsPp/b+WnC6EcnPGvP9Of7S/lD7f8kLu68faW8kv5pfz5kO/s
+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
uVltsTiWkDm45nlxah+uhoeNhRCJNxlG6O06OXXjA+MfvOx+A9p98PIHN770
xpDZ34GQTyR0I5PfG3KmlN8z+TQ9Nr/kxnjRHArO18VM52jeWIOyIwAs97Tq
dSS9qulhv36W6ohnxLs0O0VrRtYtqh1EbIkZD2+jDi0HFq5UxuOv1CKhOCH2
DEayGQhnHgqX73lc8LvtTH4BHJi9W5HKkz28MwT1pUVYqS+8bemZr925MbHI
3/rlFi3fFp0PzgeR2gDvlYeYFL9noqxWWbd5tHLkaNLU2htvbt2zd9nIitHx
ifjEqcKYTT9joDuK8WagepxjjlfZUav5PqC+9c7ECYMnrnis2Iti9mvxsy/+
xZUPw2VPYPnVugN9YR9L+R3J7KaU8ovKl6u1/gWjuPVne5qWjWi4lh2OxNNY
O+wv8LN2bv+dwKzYXBPqZJ0e/wZ1fm4jRG8sMxzNM5VpbjXaV5kQ0UIRTGjx
Ku0zDNFFSk1nPeFOYV7PrOaPs/Mj8DH1uqqkHMA80TQi9OTV0tT9DnqE+jha
s89oxwWLiPr4LzKQnhbdF+m5GzJr6vu+3i+S/HnbY3sSi/z3319OV9EJ6J/c
TUx6e0V9uut16rjD7Xfjl+RcNOLXj42sXlXLJTczLHbGteUrRzaPjddOvsHU
gqw08BwtCBOKLgkSZwIxW+tPCvBEX201u4XrZ3FWjrS6ifFqyHAU3pR2z6np
b/3m2RTFXXixAO2uvHPjkNnfwZJflsEtLD1W2DfWsXZeb6yoPaSs2E69sSwu
JVzTcu+tPcsmMhkSQ8cVS4FrRjm1JkGRdUYhTIhzvwpXTbtsPN3wtOKnnwsf
aydYjr0fdiZtGD+v8J8hdzH00iUy1H51IX7Pjtbj30j71giA4b700M6Xmt60
Lz5QnZ5Ve5rcf6w9i4uUOozKa53xDEOoATbjhVBctfjM9I4oXr5q5ejERO1N
IZdW1yTp5yuknYSrSiSeQ2UejCeG4RESL1IUe4bx1JgcZz5s+0LK4i0vuNyK
f/3Rqn/54SoC7T72jcf3vDG94FayLJ0hRu2uXiHSUj4s4qwKOGTnHLpr16/n
oK6G+TqRrIswriOXqlTbcBWUK6tqHltiRdmRcBSiDKvSAcNmVOWK0shdPi9M
w7QpqI5jDgtZtA5sYmcWU4/LatrQwiv9hhU5FzWcH7Pxm3DcdhNrTBcrITKb
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
6pvEfwL0lb/tDO+J78fD7AmoEsc9aviccIywb8AzWQ+kebXwzKr41ZTFmjh+
Jh84rPNjjOd4sDyHyDV79wuH1m/dmudcsNEqJ6H7wB6fxMGJGAJ4ebYFCrJd
PPo7lz3xuX9bsWryNax8tEmoY+eoruNZY8Q/GzGABxQjYvCk/X04cqMIUIrB
0zAkQX0NYl8YxiPrn9gLfCHnLMy/0DBetghe2xAD/2yHWI6U3z78SALk3vve
Czbt2Zefn6r/77//+3e9+13rJ3YNMf4Z3HZ2LJ/sNSbPJjCZbHRR2OGrM2qf
57F2PEPWx9p553QilhPjNxpMWoPvQ2HvHmtMYFn9LKeVITSV6wNMnYjiquyk
njqRyynM2klJE0rehLDRJ/XGMjulcWuxY12oz4va6/9L3nuw11Fd7d+fAxII
ECCUBFKAAGkkeUJLAgmEUPIPJBAgQCBPGqH37hCbZmxsY1u9WLJkSbaapdPV
3OSGmyzbOk28X+Kdc2Zm71X3jGQZbB5fc/k6mqajc2bv/dv3vdbaXOfhe3h+
BNeR5kJ0AUswIIFEF5ffnFuJ/Vji3KU7s/JRTQP0vqDItwTwT3wnUI4DTCVQ
n0vf499RPMajN8eMB71a8p2GmRfHCuf/erEHPB/1bUfXsnlKGux0KHhNbW3D
k7vsrARFI9CJFc+5YHMxpOCR6Auhf6C9ROVamD1x8W2V7AkSnUJmjuj9RMx8
S9jApUawc7OMl0JvwyHWwcuRCsdBjiPcnJQ9PJxpGRZlsUBK5ACqy3dBKTxx
iI8JA2+8895p1X9vvfc+OfTUSy97+y+/7PKTjU9i3mSh7smvjbPnc78/fzBM
OrbdgzzZiPonkdGkyozGxDBQrnM0SY337J4iulaK0BDxr8S7hRRFPgen0dkl
69+Ec0iPndQjnI1ex4rJy32vqAOAMUIIseMji1HtoFKXZCMaRDukVAAHNpVH
A19kcF04Rlc4AXId8dpITF0SVDkj43sKwiF2Euei1AX3JwwZKmmU5bjqpbuo
hqNEEpO34ObFkre59wjXgnPc9+cUF1/xw/uDzyfNPn/4kYpc5ya9FPt+uc8u
3o0wXqpAFTyzXfPAKg97nlk5rMYzxPZqU3srhVDSfIaiuLTxtTtHMJ6oufmv
K9kTK232xB1Pt3TumoZebQr0Y4wMw5sA5yLuPJcBnhbrkrCReEIvLTGb7dWj
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
eP//5Y2uwakZHoknFKUki0RLLm0K59JqvgAHvCSolJLArIh7v2BOurbTeppX
Xn3Vl0877dk33jSnvbjoP/6h7/3gB3fdfc99f37YrGTB5+NKb4zPUevglcQR
QVHw0Ahixq/OTO77P/zBadK/K6+8coPHWuJwNlP0kNXPir32+hv6d+0xQ+fG
8S0Xf+PrF154YV1XN4xcMtrdadX1OzqTaaurHD7qp+IuWbkySYS7IhrcwaEA
8/yaxn966OHKw1ylgmW1tWd+6UsXX3wxVO1OXf6Z61XH4/Z+lveXlqUQIu54
XRRCcSYflvMeQTu/cHFaBD/dkCUV7WCdSWfyhTzbUiiunEBqlbzxnoGdgE5O
5O0KDlV9rEj6NOZQVC5B+hvjOpJDQWLtuFLnmnFLNU+gG2u6dBhlF9g62Ifl
ow/R61ISpxG9LgUUOYdqp+kkVrJjkXVUb1F0HiH7NWAAuJ5CwAmighRJaAui
yAmvvdtOTXuA1DcyWgG59nYPijyQq2tuDrhobNw76vGbh3wOMnSrf/HZEm/l
3FzvXwJ/1+HpzL59iR2THqN29g+0dHTUNNR71FdTX7+uq6s7kdi8ZUvmk09y
R2Yc3wUjPRQbmY1RZQWqeYTx6POG0iuCx/KR1zd4xHXHE8145mLbS3Z62vvK
ckdnyLyGYx5pF6Z9LVk/DrInKmtPuLMtSHyFWUwwnGijbAtu0UYqcqRTilbw
wm3owNR3LguyAL797W+/vXwl7GM3hAkFHvU9+dIrsDOPVvDwPBqVJBW6cXm8
EKqqutWGI8f+9uTTHo8ZrvPo68HH/po4dFhMEjTA1tw3ePkVVwQxeNde949n
nr3p1lvPOuPMm359S5X3BPHEO//+hx++8qqrKvR41VUP/fVvDz762KWXXnrD
jT9vq5i8zGizI751ZgkMvPTWoq9+9atXXH7FvQ88eMWVV5599jl//dcTqUOH
T3X++aJuPP8lY3Xa6msWeEnYnq81hlx+ufKJEG6XjK3aRdUi5mfKsy1zB9C0
NeRjaIf7BzsbZf2JXUMWx9pxCCSyGzmT0x3pKsVAO2jdqnEvLIfCTNv9d6hG
2eH3DNeKxRHgoRKIqp3YaKIUHq3ceh2R7Fh5E7p2WHyxjlTJQGKdtDmZQaY7
c+e5spzrtJlC5pN9HrN1Dgw2trV5ILe6tsYjnw2DmwfGxlO792SnpkcKwj3x
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
s1F4TsRCZMUW0wH1+Yd4XeJwsMPxSwTqFPEEREYpwovGbBzw5q3j+Zgx6v2N
e/Z2DQ3V1NfXNNR39A8kJiercXSOSLmAiLrTGUN33taZSIu+6vHQmv+a73Gf
H3n/6LehSXzwqKDjUSc3zlfgpj75Gz801Tc6tq6ry8+97c2NZA9O5eTyKa7Z
hNmzcc8Rn82aR/aZeUp3Irlh85ASjRDsrEvtgdkTi9ePkwgHyHiijodcWikY
T8yzIDpe2I+xYimBS0u9BqdLW4K/UVTwkPfB41hEf9aAGSZAwnhqH+70a0wR
vDC9QhhWFNVOPEFwqbiOJ0bfEWXPwXg8vYI4bhTwUIqlEKz1ReIfeJOFumec
WnwLe3+N63i1EwfaiQKv9lxB4Q4/h9F5ssIJ/AXS+oSGIwp3Gu+laCsmibFy
/XO83zW1tD/KXIdAC3gQsVQ7zf6wvbQi2SVAH85VO8x1aI3yMCMj0OKIakcI
0BFiR6iPDG1ZpteZ/zOhHiIGPlFmK/rpEmVThTimA6vtj4r/t3vG8gWP4jp6
+9bW1ja0tmzMZLL7D4yWZtGZoXJFXc6Qc+rWd0C6e/m1VzMHD0FpTiMxbRsr
zXrbXPfE2fzf7l8bR9lz8x75fMxrLJD6F9of3RTnoDusx+KrZgrJnbs6+wcq
32NLS08qndm3f4SuYCvML3gw3nfuWuoR2qKmXPAYzxRq6uqyBw7iaYttBUOH
8zB74pFK9kRebEGA7sgMK5hAQX+WxE74Li2bPwqqfjiHLScRKMJZIeqUNJeW
h+Fxl9agGkY+EqtckpEsHzopjO4UZsMTcGXWDzlNK4InahSxI8ajk2olf5YO
xKRSSpJFRvHoOwx4n0J/ljBDRlgHYQ7U99nzz/Hff2Hf4cLeX1pPdpZ4stX9
EVVQiGrnyKQI16QoG082bRJppedTaxdihhFrNfAobyl8boUyKYT2G6ZRmB+1
kphgK1rrQehqgh4jpCbiyYJZp+qxwrwGeiYrf2c9WeCf+p8GjJG2mpvIdVCy
M1HZkTWKjTHEHdgMHlOAG0ui7AQHlqt2GqHJYl2ManUjiowTyQaY+kpj3gOz
Y7J948bVNWub2tf3jYxmw2g6SilYrRKZ54OVqyDdedv7H60IgKpUqmzHTWiB
wIiurWxxzozYwDs0r2UiZX+7NXb9z8fl4aLPX/Fz0XfncHU51dsnJNBgh2vq
62sbG7sTKQ/zzMQhx7zaHEO+W/9Z73HaY4u6/enJwPiW1g0bxCfca49LOiau
+H2QPfGzP6+uTe4mjQs2K7MTSnO4VYaWqy+70TyLygzOj8ojU0iYZ+HPGUE1
PJtLiyBQ6Z14/8bnrWqeBY6+s/AG+0Z2crizyObsekUUnEOXRJ6OmfuLQkGE
r+SgPjB+6SpHkZ6vpVeIDpoQa+fY1AA8FeROWv75v7D5wZAwx9nUpibqKxds
OflrnmxanlCEql0xem4isRl+wp2qHcu/4HQn4hlV7SI31AOIbgIHPMmNTbJ+
T6loJ+fGitVBdTe2+uvyyHwxVizsb8UqCtCNZeMLATY66MBgb4cPReqc8OA6
Jb4OiySsUlmcsDoHtkn7CS1U0h9Su3Z19vWtqa3xoG5gfCI3fQSwHPMizR6M
c0SFe+2tNz2i+8+SJS++/FJzT4+fP9u+eSiSrCChuV/DLf4dtKOxkC+GFxzH
ydUZGyp7iPdyksqqffUc88xV6X37uxNJD/PqGhs3plLZA4eyBgV1He+x/3R7
qHbrP+r9J7mhtTWxcyePKe3eefgus/bEb959ZsUwmfik9Ixa3ACpS4t7D7le
CiUubNRylxa5A1HFUrj1AH8X0foUi5bpeLAjpR2vq2dGpQ+4aicBHpzRmyxa
nmHBkvsiCbCcDERRUd8Ixj6R/SDgKfWNUU1aElglG3PQoqX7P6Pou89+W9ia
yQtFpPGvykqebPxwu/DBQFIwCOCkyRTg0ZJjBsgzzLU7/oRHerJheRPbplII
7SJrV6JJXATXQdUOOKpaJ4N6rfC9ObS4+DkUlu4A2pnYGFduLPldYGWxcAUK
owkQtDNKgpobKxmyflasmD1Riol23PPCVqxai3hOUBcZr1URskqz2X37Nwxu
Xl1b07huXd/I6Mj00VxRrRoH8081ojNbbvqox3LvLls+cuzYosVLhiYnx7ym
euBg28DgWL5AmMrBbJ/vFp/3VK9ZdHKJi80ycAPqZh6u4fMc1f3i5mJY2PNa
zZ693rdfU1/X0NLcmxsZOXJUr5JXerMx++1b3rr5D2/0jI4nd++prRZCwY93
+YVVw5fcFmZP/Lupc8cUr34MFDy50FAGK+pwtpWymCe4tOmwGh7MpUWzMymX
No5Lq/VgXM2TzVxGa0jBk5iN9rpC7x3R+Sv9f4nkVqSEExyShUvBE8/EMl2J
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
3+TreOuGAqHv+htvSO/d9+YHH97+/34/uHvPr37zG2/nl7/85a6RUdPYqzG3
SMHL0Pmg7U/+s+yjQEK863ckBs/rst547wP/6G/uuIMWwQM9oXf+fz9a4Z+5
qnUdXMbCxuZhHwRFuSBPJM4aFth4xR4NHBFStP+nGp1q0Up3I4DHJAtx3ERH
U3ytMaaiEAEQmbN07CZlb+nyZMTv4/IdWXwWUYe0ftY8iOiz56sT9w4j8TKE
OhpxR7mOCXdiDWqS+xzhyzuzciTpuOQ86piqIOGOPOdwHuRW7djEiiVThPWQ
QatnnixLpmA9jLAmBVf2QE9SwGtSVLX3gELRNNlMSHmlUC1DllQ+UeoVR8Ta
sYhrSG5yDkXMmieifGdGtMqPU4eb169vbm/3XvAaxe4QO+ORkcq02khtMmH9
jAmN6CwJKOrQhEJ0mO7mRjKao+ofXbepd3VTs1tzi+OxTlQ3fA7dA/bL95+7
EljmR+fo4SIpD2t6VNyLr+NxaVfMuRB1PD8eb3T6yJramrGZAg/GE13aD2rq
DN09+fIrYt1j8tr//4Pa4MLLLruMtDVSL8WPxFta3+Cf//TLr7z7/vs/uuaa
9KHDlQoqB6eWNzZv3r0X5dKqtY6FCN7/feIp/84vL15CCh17XdOP/+d/gqP/
XSyk0AK6e+Gt//hnvvPxGlvlOA/msIzxuD8LRTzJW+GTdN7bM8CDBBg1vtgs
PGVUSliHN6A7jH+iz1WC4ykeMUvgqGyc8ZFaEui4bWfq3yK6g9QHKhtb3zAT
bFh9qkbfaWuTfb58dZJsLFWWRtwBT/ZTYo5Lac5x82STINbO4cwS1Y4eZXmy
ir5XStkTzGnOTApnnmwCxUuA6nbqlEriOopnqLSdmEkhWrdcteN5sqwagFr5
BGZSENUurXBdKgjMK4LyVn56bBkKcbCuXZhqJ1e0I/ympcfineVcEdX+8l97
FDc4MbG2trY3l4NRdrzaicOH5VmxOEJeiKSKo+REObDutIjomnJu35Mz0uDW
bW+/+258rouzba1uc71Kp8G4OmTUtfOpwcKtW20hDO3bj7HmhcB43cOJ7qEh
6NUaEQ/RXfgwP/jYX23QWm8/XKNW4jrrzN738CP+VX965C+wfdFI17Cd/v2p
Z/zzO9PZW2+/ffH77ze0tuYOHjJZtLzt8wwL7tJ6e6758Y/9O7cnUqQOXuvm
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
NWfJ6hWmOgommQUojbIg1BfnquNxe91n+npmFkfcpcVsWfJpgwg6EnGHUdz7
rqljS5xZ8YkSfX9JmgueTMXb5Rqdmkmh5caK0a1C41XRjrZxznWk39CUOmYW
2LiRsKcKPxBCd+D+YQdYBqod5LpSaMKi6ijGloUKXkh3RZANR+Oos1LZkxwo
n+WLbxrRmf2ao4T1h3Jy1661dXUb0xlYI8KUsOOqXVjjLgA8I9aNK34ZUFfC
S6LKm4hcF48cXNF0muIUh3Ac6ll69543337bUhnX6GZd27bqxl+rG6c7sMHf
GKEQSlqfpk+SD1D76KLUPIH0tLUwxOxawnhkXTP/2Vu3oWtgbNy/G3rqEN1Z
lzY7feTMM8/0eeaqq68iq+nZbHHs0nZmR0byxVWtbf6F9/75ocjqxyOF0sVf
/7p//uMvvGgrpZCWPn2kpaOjuaMjd+QYTbXAdfAM5g3u3eff9pJvfRNWSkkd
nbnxpps+DLN0r7jiiqDrC2ty4oXMvP6t/N+PVvknX3DRRak8TqAAfWZ1Q2VS
xC6XmynEopWjr8mcXVLkNAVPHoyAPxsVj6euP6s4XALg8fFXVFpi+LNo9Dd+
Hwndj/RnMyi34lMu351UfPXZb1zMRO4292SrR93li50aLPXfk9iBhequ+FAp
ihw6javHnO4ctYvh+oCOKih0YgWaszvbAnqmnPS0cDtyjrEAsCLnKm2XZn0R
XEYWqnbGyyCxdu4ciiwqWSyrdpkqnoUcSA1ZMaSHuLG6cGfpzhtuupPJmvq6
1O69omTHo+xg6gQOZxLQjq8j5s6BVbjOsdKre20FHmUXm+XCcDUxCg5Sk/di
olh64aUXx48c0chNYzY3y2nUt232U2/b7quC7vsoHIioj2wK7MXU9HQ1L9Kl
FeLxhE1MugHxeEEhlGN5tlKtkFfrK3ir2zuMWvXXfz8h1ksh8l3v1m1f/8Y3
RmYKq1rW+Rf+6/nnxZkUbJsdqYz5RZu2bCc6PFq5rFDqGk7W1NWl9uzVMixA
Fm35o6ag/vADjz4Gp5Z/f/qZVxYveentwHd+9B//Ijn7oQRnuy/vDgGvPvRw
Mo8qupMMiyRQ8JL5gphhwXdyBU8APNP/BzN9Jek1j4cGJjiEo4/OfgwawYDI
kZILKfYSSb5Tx18+gmt0B3MrUlIaJmEJmltRRHJTRvdnT84NcuCJUAL1xchI
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
hGd5fbEi7jI5WbIfJBUohrXD3SLpP6metT5kH9q5rF29yw5Yu1osBysCbcUf
tK+ujOKxFy7RDIUJUOj0hPUjhXmdPIcYj8iQ1KUnrOlOuOwsYxMpO1RjvayE
h+jwDPHRGb6rRkt1EFFxZfnPvvY1RF8WoVlsln+995rm71/D7zXRizXWJekS
lrFdR8djw+QFpmszIZroz9x75MjphQWWtkgAz2PwmBOPDLaYG+cp4mdkIXx2
FMD7R7/5m6cvXxmeF/RdLzrxBsk14TQeq0Ox95kQ/exqd9/x4zv275958CiG
LKq71mqvA3ctECP6xxfP/+PPf764ew83sMjgUX3WdqSYhEW53KT8bCGhGmXw
lOyr8rNS98HXw8KRZfBoQcqU6k5h7SgJy5HpFX3Ky/nud/1sYc+wktvopnM8
XYOCYTkH2qXwrNJnOy87uuInDe9t9LvCqbvhZ5LruKMoumXNdeFXAxCd9N6o
vUAmJ+uzwWo3oa9b5bibUpMpukFLldDOsnZ630Tp8cDaoSZrWTs1lqLFdnya
tQvcXZnRCJqsuAvhWAq1LQ1Jil7LzBqLW1Ef2iFrR7x207kYhbhv2xt7HWtX
rRRnL1zcMjFRXL1Gm08srou0W8naxQlNTbOxL992kvPXuYkJ278BsAGzEirp
eTHY6mo4OmS08v407+j1v/D6a+dXu4jKLCO3IQZvo0cW+zVTcuHnQJx74ieW
Gvmia5Eqtk28eapKJa/Vlo8X7j94f2Lr4mrPyVy416dloenWJn4E5gS0iyZV
8SXFrdvzkbsrqfKSwRM9eKJm3AN1FuPZu4Q6hjefo+emJnftKptSws2HpGjR
f9Ie033I0eH9TYCxtAt29dlYkMJG0HaVl2aK3MM5fSeWErNYVF+oCISqhT6t
X3VzM3PuOzm+dhCxotXF5PLqLc25ZxWTI4mgGoBXGE4p6okt2WzMwrObP3l2
cx10+dc0/LtKCBd152kpSUtuc71JEUq2424tFBXqIpRs+qYWy2ESVj8VoqOI
8dSX+Fe+/BRQfVaYJcizvCYlfsan4A6ARruMZyPeZCJrVxhNFhWEuFtE1i58
bXKAoCDbkRydrLbrjW0wsZGgH6dRSKszemZ6M72QjQ0xiiYKrHqc2ID+4IO5
+a3bt03ful0uLuiyM412aama06ydddmtUZZDdRRXDMkg1RQbKVY3nOSP8wNi
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
AFGNnVvxKvRdk67jV89cvAoCRPVZOO5yfF297xGGUwjiLv4GFYST2J5cQv51
0jfPjpGSmTvGCDctzqrrP7ag4DbKOO7kJ3GVnKSsXcvs40yeoousXeHNpAjc
HRQ0VWqs6j+R/U5cmZU5WZKkMCHZHt5+M6ydkWMwJ5sSsvuPHR977TRlV8va
sXjsQEE7AfMkg7E4UGqsW1DsMSeqwUxNicVUrJpxkIgdxvxcVJ6ucZbTUwmp
9kpdbZapy7jjKKb6yy1bDk9NxTNNQFpeb22OEu1f5/3tlqnznIHm55NTb+sx
tqehw2/c9+M92bZ798zKNT2pdnyxWQaPXpN0bxKvcKrSqiwti5wPMGdh9VkK
8DBnoZi6EJB324+JrVcX31UdKTHk1bl5e8vk5LmLl1CA8GZYKH0W75DR0FLA
/TPmZ5U+qzxyMUKr9Fk7m0y47AA3En1WZCu4PhvwZ1ywiDK1AdYuUQrlIhvh
Ylp/wyhPsTor3oYSd55Hq9XVWKLVVaydxnhWT2T6LGK8yGtVZ14lM/uTdqgS
4w5gOaHMgjvROu7akhr1cbVW1e1vU24BCM6HF1t2jj7Vd04qRi51EdOoLEI4
vl3C7iDpuKPIDV/sCbJeTrbxxLFI3HH3iNNu1wvQLjdJNq/GImtnb9EOzIOJ
Y93+wRMn90CMggqyCtfJUrumlB02nzRQY1OLnQV7sYc2M3XCmyOWT8Lm/XVa
h0VcxwkonkKVqGYDx/6Tp97bsbP2ZRabNTkyX9Xw+8ygzSyn5+u25Q82cKF5
lyPyriTRbBg81Og7Kyvbdu4UmQszoBbbj02KdrCkmT1xSef6UpgHT9J3aZ6F
VGk5xmP6LPL2dtPHbxTU1usxeO3rN7dOTk5dvmJzYdR9R/XZtrg/6/ys5e7a
aR3JTa/wAB6GLKYsoovLkOg39hGazf2JFZCtYt2KuzPylreSKoSGryTanMfY
FAraMfcdJZEUAgF8Yrm71GMMUCehoB89Btv0zmRPk43orlOnyVqQrIpQLKhu
iO6s4852nmRLVLwL0sySkDAvM3NZQbsSLznoTnB3+JmdWlXIrVELSmYyRQRs
WIGiNNlgt+OabNsJUxSk3S6hO6vJirvuRli7uGFHHm+4tT948tS4164bnDxp
hqxVY002dmAFWZ6h4F47m6Eg6Ymcv45FYlUq1ptURfxa5kxGJdSJCWGlQ6bO
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
GvCwICWsJmR6hYfupAJL3D5OtkIb8xJ9J9FdbTtKZgFF8MZGlQlc5zjwXe4O
Xynou0xHh3TfRanRF2fXBYMnrXfVs4a+81DZq2uyL/21mAchYYq66WOZ+RSa
uNOarIDfmmutYe36cA1oXCcvJ03cTZmrVHf4yN0Ku+zFlkfYG6qPZzopHRGa
uMs47oB/qzBqZPLRU6e4OyDu+oVD3ClxoS1xXZmqaFRcHFg7LXxIBg8nB+Ht
98PFpW07d849Xq1NUqDXLqg5YN0ZrC1oh0+F7nyvXY0aq+rswhSnam6srrNz
chMZNTZrsXty2cwqbZKbwM46LzHh9fc24bKklsq1Uca8Pf3ryclDp0/7MEz/
8WodZtsoxpN6rv7+8y6+PJsntVr8CZMeldL96GVpFYN3ub/2/sTWpfsPFXOL
iVq7U1AOT929Qxg8h8Rbq65/CurkGYXx9K7K0Wd1yAKbjogrwynBs2psE/pO
6LPZCO3w/1NXRoGvzr0HpgFPAzxVkILuO3ETdtpRaP0dTA/PuO9SLwrJzwqA
p7vvGOMR/6iLJuwKK7om0urpdd9l3Hcea5dl9hR9l4BffTkbjYXqfIFpNo7c
na01/jEeEe+V4JPmKYgsa/69FtpZ4s7NU8hfhM1T5Nx3Cav3LfCTVwJeD71c
Q6Mb68ZrOLnj5N4ksXZTmKdAZg802cwOi3N3IU/RMo47w85Vu8Lhnadk/uP7
RGoOTXeSuEt6wbRBd/hiomXAvbEJd6dysp0bN4eb4unbt6PXrmTtQtsVR3dm
XQBlR6I7lZD15CTqLBKNdmm943zdRaw9WdNr6wVYgvGBXqm1Gqt12EweU82Y
YIkJguhWfFwXH5f/p7yc5MdqENeh02d+MDFBkRuesXyd/UvxNfl32wi/hywf
8enVevMs0jM//6jV8pkX9syZ+YX94yIU22qIQi1lgwV957fhxZzFRT3PwqZo
a5tSUsIiZmlpihY+p6kjpXTfWZU2D/CiAQ8b0e0MC2/jidCufKpMWMT9bAR4
x4r2jn37ph/3TLxCYzwvP9s2G21fn8V9femd7uIyoQ08cpsf1xcqJBnjkMRv
8lm/9qRmDY1L8FTCh6J4VsqynnInXqOwgeu+c7g7maLVsVCfvkP3XWTtxLRW
hFg/dpiXEF0vfreRaYwSs0vceZpsbZ4C0Z3F3gzPZ4g7zutKaMeJO5+v68XR
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
FwZpQyLDQ+NyB6EuhtxsWcraTaGQCufRdGddefEzIgXZRo67krhrV9YCMZ8C
S4zLD/Jwp1a2JAXurkJ3CO2s484aem1UdqZXZml7SNxldqmyuziNlN118OAH
8wuxVcDruIMSY2W62xBrN8jguiXWxnAhsHZx4phi7S4wLiIxFUmQzbUWY6+d
dbMjcdc0Gysd9Q1nxdoWO3T735C0Es4LG2MVPVGC9MgFHfNYUZQo7nd+93eH
cOhr3/rO//47v7N0+/Zv/vZvD09++tP/xdnFReTcLHIbAq3hUT5euH79z776
Ve9Z+xjP2NfEM4rfKx/csigOYKer/9YptjmtFn7+icp78vS9rVsuP14NTrwX
DiYv8d5zIdQGBg8xXricSDP2MnQdi0Ke0gvKppUtgz6LKVpHn63+KAqF1qoZ
FjZecWFN6LPnB6niuE6fzeVnozgb9NlBGa+w3J1tR4n67AzQd1SftRLtGOPp
dhQF7VBDGb54x969p5eWvGwFTc4GcbYaTCZkoMS2JWgXOT2rH8k+BzG3Al8Q
lsLqBUqZRXJP0Xeoz8rkLOusSAuupnTkmYF5SjByhKlTr3mZ1ruBhEADDeps
tgKCFZ1m4uym9BiH4bapdk9Au76Gdl6ewv4ERBGKk5ZtxtcRdo4GaWNaVuUp
Mi06zBUAjB8gNzctix65rvjUWFkWDQ9CqHXSsgrakbRsmkyRCDrWYJzO43AK
M3TMzVN4jjtD3I3uflNXlreFFhQP2rGOOy7IohcailDInHG65actKIpD8Fg7
NBFd1CKsWN0orjOsnR4ORZsrLP3iTaCIrB1tO/G7c1+wkROJr7uV5esCniG5
1+9v216iu7e/+e7syrVf+tVfXe52h6+8str96527FsftxApZqQPx2O2Pnn/h
9ddWul0L4RSWU4/zeK+W06tz6IUzol15Y8kL2poy/PWdm6+KUGItXuwhZKZK
nFzGVVrVdWyvtKtyjEVen5UkHkN3NIKkP19Cn7XpdTOCFodEe9mKNX1/GAgG
z+4c42QcDvD6MJtMqhJKn7WKRoJ5frkxPJX02eLqta3bt8887irfnUJ3qNcU
4MFG7i6Z9LqCwUPrneUZlDiL9J3m4qzvLpOc9bMVaf3128lGXzs+KKcHbbcW
8lm9T8MMyt0pjs70oiCdJVrvCoR2CkdFfCU7jV+9F6UWB0bijiizTjbE/qMi
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
E0HW4esCTXbbwXV3ZT0W0F1esXcCFHZHzPOM8YAXFZskpfLoqY8StPv//sf/
eBRqrwpKRVjOxWx/OHz43KVLT/RX7Sujr0aPXSTZ7s0LupQtj9fworFrcfzz
X3369ODhw/e2tivoToK0a61ZWidCSwzePjx4FYnWXa+gkTI3P2vbUabkuUzQ
qvzsyswMns3RS+153H3H4VnTrw4Abzgk953RZEMnXsV9Z6GdFlkGZzvdjy58
GnUaU3iWqrEkW6GDFekS6SdnA31WJWdRnDXZinx9JNjGbIkVXrVvKrTeIQYo
dixfafXFwTq/5JBRAmlcTXYmdAfBinmg5lzu7ntrsuXbDiZwkWvukLtrycbW
ulAkLdsD7q7+4239deCX5vSvmH7LAYRTfG9J5Xh5isQeq3sTgHYE/KzjDrg7
RnTsWzDEXeLuyA7BymyuHLcQzqZl8wmBTXd4rsAYl73HjLg76LgbfbKw2ERl
TVoWiLua487m2rC+2Ou4C/cpSgvKSIUpJstHBt1lWXaTibucpHBzss4gxfRI
9J1osrfNkmxWY5Um67F24cSYKHGYoSjx2H0sUOxE2iu67yK+jvir//m//ldC
d3/3z792fW4OU5eOFqrt1fR4efazz989enSWV1af2Qe515rC+AoK9yI/HsI8
7yc8Oc5dvPhpt4tabW6q2TMMnp2m9XMW5v2zY5tSbpsIrd0pcxk82rCwDXhm
z2W2/Owmdho79XeNk9Z3340oW+HnZ0fE3bF2UHffaeKOPSqh424G913A3aXw
7LN3Dx3s5e67KFsh7jt4fkRMAiVnS7ZCJ2cdc12GdkjfFezXz98QuTtLvgF9
F19/0zfnP+4BPEXmTL+Py/m4EKL5g+3Wu9agaAF+lD7wfXdUfDdfFNv/AikW
TXcLhrvTTXcK9bl/W85NeGI0ImFsuqskLDzurvm9VyuO5Zma6uq+nVzujtFd
AXJmWS9Ad0TccVTW4e6m/5VSbgw04DrmKcp3dvMU8T7FaMFTZtkZ4lF28hrK
ySbi7uCRw/P37kuDsdS8L5kGY6vJJn7POu6CVVnm67C+GGpRS8FdcWWPwHG3
SehO0wtst3ueuTvHa3fT9J9gSFY0WaDsgspi5bXjNYrJlXp7G1ka3Ve8C5Sd
7Txp77KjPEUSFt3COjcD+9/++39P6G7hy1ut2qvHvE2Q2JPmgYPNlm/d+uU/
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
0HeXsZm+mMoFdADX39rVOfiSSs5WK9emL7BKIrF2scJYS4zWK1AsRSalKCY5
uw/hdVbuzkN3HruYWbsR/GuYllV4LyBCDbpWCJySFxaBm/dDLMsW010zXsx3
CvndUqAdvaNImc3vWHlvg8vUmagw2E9xd+gVdLk7bZEd2G3ZWdKygu6M484P
c3lqgjlrPXz0zqGDS+sDsRlbaCf9UenQYQpF3LVFZX1B1um40zlZS9yxfzto
MLY5WSTxUrsdEnd2SVba7W7PtjVWjnxptqwdEne0HnsPLvreCIXTbueuTtgu
Ox/XhTqsj+sid1wLotNP/vZf/3XuyheI5RDUVb5DHe+hK0/nNV4ZjDc7g1dU
2q/2yk81Hfefb79z8MDd/hBZ0/vM4PnLZZmYzW142W+55vXglTePZvAMiVdq
UsQOag0G4r67bShracCL6DvXgBdpsvSM6767arrvoNZ4hBJtXp6tNxtr910u
N452K6bPN9mKyJPc7r4zZSnKfafE2ckp/eL1G8dOnkRo5xXfOdxdY9heVxCu
ueoBfddZ7/sZwHKxC5OzgO6g818TdF3ogG0QmtdUVt8jy6DUAQ/Yelf18w/p
ebf4ziemZlisaEnOsjKLRcfKOPfX03fzosyaprsZuDtGsM68bEtuJfzxRryr
ZvmaL+V1EsXdee8KfgYiFfAeRvymICJzdyYxodAdibaKu8tp2Rm6UGQtmrk7
mCRTKxWi29pt2Rm7UKwsS4678XHm4sWzcx2RJxo7ikF3V2LuDvMU1nFnO+6+
8HbH7DiFuiKMHCznF9yp+uJWTVbV9adrnNsE629S6LkxJ0nhVFvsEmvXZCc9
1u5BAxVmSsUWjKe5JrfnJMY2heNSKufenuClp1XB1KIyA+FenTj90fsffUSI
7llzMN6z2K+OBuuoz83bVhpUHCce8KKd5eXTH388SyGeaj829N09PIIUrYj7
Ln3XGPC2QgNepd8Y3v+Sn1XJWeo3xs2XG7l9yCabVmS9Atx3aMAbf8avmu67
oPiOuTtqRwncd3ziYvfdcEjVKHqVzAF1fGuc6Dtw33Fs1tQaT4714cGjR3t3
13qQnO063B17s7EXRbvvODmLxXe21lguTNTd6lrvGi8Tky3l9XNAuUTcXeWC
7umzNfwQ6YYOrgu5O0Z3QGQpIEfZitIsp7m7XonNft8AhUfiEVxUpjvddGfB
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
DcZ+j7Gh79TEuVeEgpqsvzsm3N0td09Wr1EozmR729NkdZhip6rJgg5bg3a7
e5TTbLPYcTY2VRPPKMJWEhOWkSOEJlgu/SmCZ4eOH//TZ5/NBuRaEWBBehGP
V8d4lsFDpIcM3tU7d9774AOk8qw++8josyTRGkcle/BUyMIkLMgDELjv2INX
b0epu+9seBbGZ8N2FNNszLsV5L5LWSpPmeXdCp++41Uypc+6yVlSZiU5W3ff
WQZPozsnOYvdVgt5tGJ8LZi//+Dg0SPz6wNg7fzNWYe+Y3Q3LNDOA3hoveto
gYk2mMo1FDSvrr7+MvYLrs6WlvGom2aPzPwnXDjRqiHqZ6yXrJqcJXHWpio6
weAsobJZ1Vjju0N5Fxx9s9ah2A2yXvk/MgAPKM0QIXs/0u7AR30m6YyvUb/0
rsCzgLJT3G/wTnPQHfjuMFIB4qzjUij3NcZ0J9gPa+66/FEtwVhw2dkuFBWp
cB13viaLpxodqbDbsif/dC7lKWSfQtKyy/re1uYppmE03XFH27IzOO7QdEfE
nbB2JS1bkndmnIJXZVVUVvxCq405/Ln4iKi7mHKyTnexWhwrsxR3NHdn+0/W
RJANHXfFUzdL/4ngujAbmwVZt/MkFiUVrktYKDeQMKIz2uuMbFs5Bq9fn+90
/nDw4PTxm/Ehz8uhX19eMzunV8/eChtZYfBsa8qHp08v3byp9O69Vz7Gq+Ys
MoNHGM9n8Mr7Rycs1sobb9cweDrNHeuzyN2RPlvJVkC/sbM8Gy6U6XjF9ebD
vqHE2Xb6TumzleQslK4TwKvRdxCereE6c74d0Wl5MZ+xyVczX6x3k+vCsZMn
L+Vshe23T+iOzDxFYFK9KNjeMMgJPiVOueIstd7R5a81OSu+uygzW/6U/g5a
YiOzlsVsAl8VZkt/0KIRKrjrOE82ncZkuiM2LMzMCremgxWSnF2YyqzjY5bY
bI//NVipMNDO/j3d6MS01s9Py3YNuiOcZk2P9sUZsU8eI0LLpjuF9+a890bL
3ImGdtZ0J9yy/HfTG3hund/qNieLb3U03aGaXPIU+YNg78IkLSsfba3Mim47
mIeVioVchxISd15aNiLulp5+/c7BA5efPqMSY4R2aa8nt4DSPkVFkyVxNmww
vurlKVZgVbwoODN03M28O9bSXbxaLnamBWX7Be3JIroLMoxcXIwuO5OkwL7i
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
FcVNvuomLxDFfe/FioDuKxLkfktRok7jjqbvVKHxYFbiDrk7CtsKtJsP0rJW
qHU3yKQLpacBnvy4UKuNUHHMoNZ/NY4KXzl43ERTc+r7ELrTyqy8zykwa74q
HwFhuUf1DTJ3ANrKsl6kQmTZEUE7Jv8nz4wixx3dXS6s3Tt8/FiTpEhJfwB4
6r5Vme4mZ0sbqZBcrbcty447+VdZDBdch2lZIO5iXKfyFP44BciyzqoslbXe
ykyFu0wxDcw63cVyxUxADsIUvEyB3N1DA/Cqi2NFkI1k2ScZRdDWmKC7jOsc
1k6Lkr4Uq/OwRY11kxGum86iOHukrw73Xv7gRz/sv3hReY16nBg85AAB4ym3
npPCeEv1KYhs6efwyWefXVxYQNEWymRCjPdEhSwcBs9ZoTULZYm7u7+Dbxs/
YZHaUXC9Ilnv8vuTl2fz3UpJzk7bURwDKn5ebmd9FpOz08OZrqA8OwK8KFtx
XbfeJeyXxFnaragkZ6UXpeizOTYL5y64XeUzXpycHXAvymXP87yv1jvpNCbu
btI5f/w4Wu+k9Q4uKMnXPaLkLKQqGkgmgT638s7VZ7nxWIM3t9JEuDt7ETe0
TOslHqk/rE2roQ5KBMyCT4DgUtxdrw3d1ZTZ/IzQd7N0oUgdSuHuyvdh3x1x
d7PLshbf4jMxhLM/Rh9XA0+Lb49C6M3xr5VpXj980fjiBp4s6/vu5kyPcX5v
ex8BLy3LKxV4B7Su0J1xwzorFZnTGxB3V84GVeLOnmfkFDQ+zna645vBuiwL
vjvVdId5CjkHXvHRnX83TXmKa6PZ0rJunsKsVNw07VsyTkHojnbHwjyFctw5
DcZwrWzyFOmqOu2m4BYULC7GWQonSaFysqW1GFm7r5SVK1oZ4147u0CRNNlB
0GWne4mDhhPAUaKWbmqRVPBYBO3w+Kff/O8rN2/O8soK3tNOv1kbVCI/3tPt
7QOHDn61uWlStEiKOgkLaDlucHjOv7gJC9WA9zA04O3i/qwTr9gpy7PZfbeb
y42bN209W6FHlp1tMp2claIh1URkVskgW5Hdd6LPkrFWJ2f93YovfPddMElm
FAey3qE+u6yzFd4kWXP+jDwwdetd+qpxUzutdwv9wYEjh3v3HmDlXb31jsRZ
yszmPbK+7YKIYrO+9c72oiDAE1deS1ctV97piz7ydYgQRt7jISEWepnBJ+pL
s7XeOcUjDt4zWxKWiNtPF4o8A988jlR0TXlLhYG0ymxF2maZu/ycfe7U68ez
eA/gGeA6500C70C5a9A+AXlBswnrtp1Y051VZvN900i4u67pQsnE3WheL8yK
405QHznupOluwetCkUgFBmYXBgrXFdZuqBSE8eno6Pvvd+/ckUiFBGax7A67
UK5oFcOJVBhl1o5TuOtjV4G4E9Md5imiA4k7DOXZPAXtU9g8hW0wvqWjsunC
xy0o29tC3MGyJ7eg3MtzUVqT9buLKUzxFYQpCmu3h66tQgoRZSesHWYoaIdC
1NhBrnpDl51gPGHtAh22UT+nJrriiCNQh8fW22/kgRz4zPjB8Q8+OP3JJ/gC
euVMeM+48qIIBnUgQ5a25Cx6V744+8kn4FF81Xfa8Aqcthhv5o6Ul9SE4wG8
cl/g6rNrWG6c35+JwZt4RLfJTlBi4EFylj0MVp/F5KxtNobdChWbtfuzK5mx
T6l5Pzmb+P+wGsV23+V4BUyS6W72ESZnKVsxey8KJSzc5OzioDl1ozJr0N0A
7/T/eOHTTxYXSfExrXcmW4FUgwfwuh53R9AOr4BamaVLqmHw7OuBrJtbN5f4
AP6Z3ERGcQFHZzmlCJ9Y1xkmRgXaCXenCTEnNtsxAG9etxDva66CfHcVYpAQ
Jv1Ve+Z/xC27qzB1Xf3z9I6EjlxNVkD7gEx3dmHWvkkI3fEthgaHrQuz8MYO
0V3UdKeO/BnBu6popULuxfATTbdyPmuH94Z9Pp+gLFvOP48ev3Po4FJ/WDfd
iU6B5Z+Slo1Nd7UulJC703UHKMuuqLt7vijYS4aFdsDalXwf1txBpGLLMd1p
4o4cd0jc8e6Yo8nuIHdXmaXQjjt13W/VZL0BWXVY4XWgE7LEYrXqsDb0OiNB
p2Hb2y145uLCwu/f+YML7VxM6KK78jfJPB468SISD7ctyk/p1bQI5dEjm6Wl
rmNIWFgetTB4QUfKnkJ3Jj9rgxU5XsGhbCpIse47qmfUy7PcfYfcXdRsnK13
2+5uBa0EWlBXOo1LUv65tJ1Pb/r0bsWGg+taq1Ho3IXuu4n1brABuzy+784s
VrRzd4TunGoUz3eH9/6Xbtx879Qpu1gBvSjlQlNQme5wSNffLjN46gJHWhVy
d/jVCrpTWK5cZ4uzzgxLDegKboGcgQoOuqh8tSLI4gtmS1WMLI5yFVJIVWwA
upuVu4OhCsXdKVnWWO8s4KwHZh18C8qsIvSAo5tRw814j34pBN35PRCBfH6/
SdA7+GoHnAbiLI2a7tCWQOiuC5EK02jXpGVlpYKa7izAA3RXlFl9f1e4u3KH
6J1P3OPTK1/88dzH4huJ6lCQu8Ob3KTMWmjnbcvy+piKyipcp+dlR3mfwjTd
Wd8dLJVzD0OeqNjSxVycp3Br7mif4q6edpIuFLXpaVpQIuJOt1t4xcWmu9jN
ye4nIfvaCrIzsnZI1lF0gnTYCL9Fj8fH9jcOOzd+8t7Tpz/9xc/TY/c10eHy
eJS03VAZW4vx3o5MzuLa3bvHT5yo7NW6KdqnuiblidNy/MrLz+4pA57Zn6X3
T6lP3C3QTtYrtPtul+MVeptMVsmSB8+13pH7jlhxylYgjwc7Mlu0OXuDuTve
nI2Ss3aSzC1Rt9yduO9sD8Dy9LznlqIgwLN8XWvOgm7DFwdyJncWK5CgW3zW
/8O77y4+W8cC/JKqKG46rcz2C7RLEEstVvSZwbDuOwxWkCuPtTDPPtcV77o5
6n22AcBzoYLD3SE+ifioToBkKugOBdCuhna8R1aWYR3fXQ/w234Ds7bsrmO4
O4pU6DBFGJilH5356Q3pp23Rmoeia9ydw7xp4i4f6UuD8g4M/njh7jS6ixZm
bZyWuDubp6DALA5VuNydtBiZHmMOzFr6rpwxgPZ37xzl/HPyzNlL11YW0wCZ
5u4uc9MdlgOUprtmmaJ9okKlZfO/auKOonDGcUe9KMTdIQ9g07KrGd3BLOb2
qm8RVxMVxNrp2Sa3wbipuVt70TSc+GEKr+OOlmQf7iK6cyi7nJNt/vVZPmxI
llxhubX4lWHtnGWxKbRzBsXcnjqiwmJ27pt2tPbNt+Nj8oI33/zoJz/5qt+3
IDD64xZD+jzeW9XHEgC8Ma5TK2YnT5268uWX1IaXLYvpp6oWadHuaLi7sOVY
JPgG3eG7IrejpAfWfefPk+3wdIXKVkzvUMh9V/KzznQFJ2cd911btiLuNH4O
EM7drSgWjquau3OjWxX3nUF3hb7DTmMrzpbbYehFqdxKI7rLZ2nOVmhdZhTR
d++dOnVx5YZut1Otd91CJoxEmTVXpVGh79bVHpm3NqvQnaPMKkUs5u6yKDzn
qW8dSDJ6sdnpH3RQgVVgnS+5gqMRIocdzVzNYr2zUKqHjSie9W527m4M/JC7
K9quMIFQh2Lpu7ZUxQZzdwOF7rRrcZZMivPriJruNN6bCdurd0VtYdbca5Tg
T+g3cG9qLHHX6QMNDrIsZNWbTyLmJqjvjpru5k1gdiGYl52Fu5tgs/XBOwcP
LD5+IrICzsuiMrvfLhSMVEzpu1HE3Ula9upIPNIbuB6OJca5wb6Sp1DcHaZl
v6x23GlNtpKnKNzdHc17UJ5ito67ckW+7xbc6ZCst0nBjruo/wTXKNyELKVi
K9sTNhKb0F1kq9NC6luL69Lj+vG73/9+/spy86cy6uPH+6TydJtK+b9AgAdI
r/lp3Hv29aQI5eWrwm0G9J2gu6fafYcePI/BC9x3AXcH7SiZBw7WKyL3Hb2B
7xiJ1q01pgYhp/UOuLtgtMI0Gwfuu9J6N1KGjdSOctUU32loN8LzT3NGMpV3
kAtzUhVubJasd777blix3o1InHW5u+y7KxBu/PwnS0unzl+YV9eOoszKZYUL
jU1mtpMLWlutd3I1FGFLcXfu9dQgN+TurPBa35wy8IC+fwgzukEPGxXfEcvn
+e6sY21EqYrQepd9d8LdzWtoF3F3WIeSgZxy7lGVccf8feQv2XWeLzNkFKmw
GNgCY9z21QSp83M2z/vcHa/RmbK7Tu5CwXoTex9BpXkucRf1GBf6TgVjRxXu
zhB3pNi6uK6Y7uA+rtp0Bz3Gru8OzzzdW7ePnTx5ecB5CjtRATew3GO8ZHqM
vS6UDaHs3PtrHpGUs/eI+TpfltU8gFtzJ0Yg47ijFhRxFgF3V/IUhrvb5lZY
ctxRTtbTZKvcXbAnm6Ad5WTdgjtUY5GvS2DP9doJa4cdxbHFruiwkcWuztoh
TnsxPQTUvZgck2dOnT37walTs+BAzekp/15LFmOq1ap1M0NXjn8mn3z+2dzC
gtuGpwGeasCjjpQG2uUlkSq627MYj+rv0ptnWnRc9Nn72YCX3oFgvWui3H73
HRtKd7AFqOK+o+QsuFufU3J2Fbg7uB3bwuK7G8lbS5/9fE4AcXbj2kglZ6+1
0XeV5Kyc8cr+zkDWZhVxl/5pO43zbbIjyFqAZ1fC54m7y5NkutN4clFYePDw
4JHDvQbIqQathNZEme1qgkLEWXdt1vZ92UaUWmy2PKkurHh5ldfLtbvSVZvW
Zg2r4yiAHgKxtF5NVSTmStN3SoGtxGZJFe1ogDfPa7P7i8263N0sG2TpmU7u
tZOj0/cIPZM0qcC8gMFDOs6h6dqJO6fBWKUqVL+iBf/NO5B9d/q9PUDujt75
5RmPuwPFllEcNN1x2Z1pukPUN7KmuwUP4EVNd5bEO3Np7k/d7mUtywZNd0qZ
zU13jieZTHetgdlrxndX6UKxGM+0oDBxB9zdcwR16LhDTfaWYSfC3THnsrjL
4xTe7piOygbLFN6ebB4XC3OytDhmkxSB104ASSkAiRZjibLbAFnTJmFdRJeA
XITNpnDOeebyyrXf/O7/vMjwTxAgoUFi8wyn52i1bndKFLVY39k9cOjg083N
qPGYAJ747uortM8AnwfuO25Hof1ZDllk+g5JPJiucJZnMTl7h7g7LzwrRDft
Vtwu4mxh8Dzubh/JWVRmQZ/dUK13+vRi7HbI3YWDs9p6Bys8OjkbdBr7yVn3
3Guzb7byrtJpvDAYHTx6dP7efeo0FgiHom25iund86R1RrFZ6jQWzIb8hvHR
0UaA02lc4e7M9d0h9zI2GJhnLOTIKE777qq5WqbvMsLZqHB3+6q8mx/aZ2YK
zBbuDr4t+u4QSbroDlGcbe0T7s79aUQIuWPCFy5y1tzd0NPWpzuz+T1T78zB
u4nwnWNpZHYdtMiyZLorXSjSkQKmu846VYiX/nDxVNC9G+QpRgsmMLvQN/Sd
uR/MZxhHlh0fR0+c6N25K3kK5O606U7SssOlpvRJNd3ZtOwXXlrWNcaI6e4q
NN1xYNbkKWxaFheOiL5LwtCXAPDk0tOap4B9ih0cp4hIDyDufE02Oe5MWVnD
vdT3ZL1IhR+msHY7jeuo/8SRZWlWjFg7aDsJG4kttIt0WMRsL4Cvw2e+3tj8
4U9+vPXm7QuN+iy6c9i8ZN6bTavdBGbS2vDmryyfPX9+BDni4k70JNp16ItG
Dx4lLNIRtaMgxov6jZ3uO0+fXWvuPnbXIvedV26M2Yopfbd1OwhWSDVKIslh
mGzLnZ3lbEXUeoRN5mZwFiP29v6RIhVflFUyBnimF2VDoB1NktlSFBit4DOt
Je6i1rtyt256URaK9a5h8E5d+PTjy5c1usOrFS9WyAWrmIUoWAHWO/aW9xVm
8xcrtDKrUR+/xr1864Wpuko76jrPFICRtdphhEnwj9huty5zd0ncZO7LQUc6
bZGBnEyPlbmK+X0Sd5CZle/g16FYdEfBkE7f/v096tJDxV3903O5u0yy2Wf4
94W/YjZwAmsn/ywAT+i1Pn8V9dZikzPCK4YpLHfXWWd012kAHmfPTdOd4u7w
46m5O8R+o+nCrFTexY0o1Y50dbZ5/OSdgweWp1yfIu6GwyXOUwzN+a02UZG5
O0qrTTAeojvZ/pamO3RQ594D1Y1AgVm7PpYw3k2tBN2UfQquQFHXJgpTpEuY
KUIpVWBYJSHcXbQqq4i73V3quKMKFEF3wtgYu51akrWs3VOzISsYA1g7taCK
tb0j2BfDTYdM1rUguvTA1V4TEiPm7UWBapNndr5tnhk/kMfj4+d/+7d3v/oq
+Oq3dMj3J2iX/1ZO5kJ1LHtZ2vGTR44fu/v4cfr5RGtlAqETuuu/dvKz2ID3
ZG+PPHi4YWH6jV+WZmMAePnGoaC7h7tKn60uz3KrD9y/7FjrHWUrbudshW02
RvedS9/hJDRlK5rH9MHPTL7c/V0z4myqNTaNKMp3h2cq22lM3F3yG1Pr3WVa
rDC+lygzW2CeSlUMnFTFAA05g3mdtrt4/cYHZ85IL0r6I3AVE50IxFnN3Qnh
pui7PjnPKVuhuLvyGqRTgsUKfIGenPAZmNKMYZQ7S/5o6x3ivfI8FnqEUiMJ
kUXEdKBdRnQzaaPM3Q1KYNb13ZkJ2k3k+kTqpaEKqw63Rips2Z2bmY1xMr5y
CF9iyG3QdcjLRdydBGZVVoLfNngn0rwA38kky5Lvjt/5pcrYy8w6ymxjfO2U
7T+/CMVTZhVpv9A3t4TeSoV7I3lp5fr7p08v5rvOZokMFAeKVJDpzulC8edl
eZaC9Nl8QlZdKGKhuZ77EGwRCuYp8BrhOu6Iu0NlFn136LijMAVydzROsfZi
1xB3jePOCVNIqlGX0DpFKC0tKAXdRZsUT5swRS1JMQV4b7DXjvqKNXH3Vux2
BPCiIIPVYQnLCbpDtLbz7eTA58fHHw4e/LzXNa9UCJDYvBeWx2sLXGAnnmC8
9D97486d90+exD2LAdQdT+k7lTimlmPQZ30GT/RZuz/L6xW6/o6Ss/VtMnTf
yTDZ9N27i/rsnRcI8FTxneiz6cMiy7OrJUUrsVmnF8WIszxaYT/pdnBWobsN
3iNDr11r611z4lLBimK9Q/pu2Su+8xYrap3G6oxdFWfxzM97ZOPnp7fnC+t9
V5yltdnC6WlDuFVmkcFw6TtSZk0mccCHA+38Kzh5q2LubiDwwFVmGeMZiEKo
D7EcQcF6KUqdu7OLFWiTK1nXKoO3oACeQne2DsU9nDUKp5O5ZGMr6M5pm/E1
cfuM/WURXHdQvX1X2DsFpnBJk4U3p3dXUjbIIllWuDjBdR00rzK6G5qVivLZ
tMEKG6kQdOea7uSMYW8V8WwzPk5d+PT85aX02NbcEbpL1mJN3G1cGW0QcYd3
xF4diuO+E2V2JW/LXgfHneLu7PqY2afAATKTp1DrY1ZXCmXZnKeIGoxFz7pX
Sid2UxGKEHeJu0uXWnMhpoKLIr1ZTfaJxnXC3Qn/Y5dkjSbr2O3SgxGwdjYY
WzIUsyUmYgUWURnjNHvsTo/xg3OffnrkvfemwI9f4+FD5vFaM7ZxM17zEzh5
6tTV1VW7SItjFokRdSXa9Zyf1S3Hr8F6l36hZaHM5e7q+Vmd1inoTjUbQ/dd
JVvBvSjxboXbaQwe160vS504AzzyVEhy1mk2Nh485O6u6mAF3UiSDQ89JETf
yVlu6i4u3B0lZ3mPbDCM0F1FSVkoBrwBtt5hdG5B+e5Ucvboifd7t+9i34JO
VWQ7N1iMenBtyrJs6UXBPTKD69S1jL5EpRMF6RUVeEqhqMo77jSL2LwgWNGA
BOLf5vRXGb9Z8Ga4O6SwNARK5SEbAf01k/VuHsRZSVW4U7MW8pW0rIKLJS3b
YVw30hhP4VI/UqGsd0MKWUQHEHf4gH9TBNHL3oTD3fE7Qb8l8iaszw/rRTzg
7qA0b0jEXce5kRkffR2pSO9hZ6VCZWb76gM4XyBflKoYlfBUNC/rpWWjOpTx
kUy5iwMlLkzvTMsAWZpWDAKz+a62pcfY6UKJ0rIrOS1rViryzXueqJilCyXB
vIzu9r1PURx3JTPrNBjbjruWfQrtj+IilD3MUyhN1iXuosUxClNQr53baEde
O5e128joLiqyqyM64usSEgO09o1BbuqZ67dv/+M//zN9dbeK8epsXp3Hw22L
McB7sL5+4NCh4avXaMNrzVbQhoXrvhP6bob8rNomo+67VvedCc+GzcYNfZf1
2Uxfc7MxGfCQu2P3Xd6cDYIVareC3BfShmS5O+W+0+Is+nvtDab47ppOY8Pd
yT3s9IxX2yPDYEW+d+aOFCTuEOCh9W7eE2etcIN1CmcuXTrX6/U0d4etd9Ee
mVye5grGK3oTms9d6518Nd4j87g7FZvlvrvM0iDX116QAi+w3FH6L7YgEyaj
TKqiA/Rdj4k7NSxrfXcd03o3Xw1WuDAv4u4yfccTFbHvTqRk33fncncBHh52
XGz8vbg723RnlX2zaeJxd4joPGIZDQaUp4joOyTupm/ahpQLNsiA68srFdRj
jB9hzd0NibtziTt7h6iP6dnm0ePxperyYEPqUGbfIHMDsxrdVbi7kQftNlc2
VM1dWh3CPMVKO3dXrhSrRpkNmu6KU8g23VHHHbUZr2VZVvYpkospXTGTr8lv
MPZaUGyewhVks+Ouufo/M8osVKA47XZfN40oirizCVmqetvQW7F11k4wnuus
qyC31mOM4jb3Xv7gRz98vvdyltcTQ+giPavY+ltm05/AJ59/fmlxwR2zIH22
r/VZyc/mCK3vvjPWO2e9wqHv8u2A6b7j8CxZ7+69IID3Qumz0W6FV3yH7ju0
3tEozJeZuzP0nf78etzdygaeDUqnsdqcFXTnzVh7rXfaJ6xMJmpmEWOztvWO
rHeRMhvpKabxQPvulPVuRBeRuS9X3zt1irg78d11wfnTMfSd+O5KoXFD37EB
Ca994EUfOL67/Eoh7ix3N5fksCp3517fzVEQAiitE6iA5n+3uq2GTwjnGCCU
uDt3bbbFdzdg7g7pO4RwcaSiYDmeITM6rPtMDO3KVoVh5KwO62JpxtXBk5l8
i36tXsddBO2czKxh7fCPgKNABWZd4s5dmKXMrHwfs1LBPcY6P5vYPErEj3RS
PqDvDHGXHuM55+LKyskzZ2fsQtGqxMZlSNSilpHOkxKpoFSFDczabdnrlrjT
ukyJyirWLuxCWW0A3nN9oSn0nXAOt/Wq7K0gT2Ecd6jS7lCewtbc2d0of1I2
6LgjpBexdln+a9Bd3NeRoEgTknWbT6TmtzUVG3WbUFzC8HVKe5XH0fGP//zP
1+/csc/XcaNBen7G1pVo0w+hvzspQnn2/Hlpg9FztMLgxejO6rPOgEVi8B7v
7bnrFW47yiPffbeD7rsoOaunK2i3YtsAPGdz9jb0ouBuhafMbgm0Q3+sEO8o
ziJxx5F502mc98hUcvaLcJLMZGZNcpayY+4eGYmzNjbbEqlAdGc6jUmcpbaE
Mkn25Okf3n13/us+KbMddYlpWu/IUCTKLLbekfXOXvvCyjv9eM4j7tzrsq28
m9NrFy69M9csViBmiNCF+hJ16rJW69W7hQGEoBQFiD4ddmhQHHJ3ZY+srsnS
80DcNd9n3mfwaKgiUmb9vjuXxnQhsf3Jdx2JPJO3vlCbsVkNzxc3ptxTsO+O
32PgDYg3yOSgrJCANOxeVt6GBtqNYGGWhv9UYLanjsnzC6UOhZLywudPF2YH
I1RmI0E2HWc++/z85aX0GLtQ7EqFoLvIdOflKbhjyoYp7MJsqq5SadkNk5jz
0rK2x3gV0F3O66kilFXPcQc1rWEXSt1xt+bV3Nk8hbAr93fMOEXguJt5mUIK
7mx3sdjtEvZ4o5tPyoasUHbC2knzSYTrtpipE7qsxVMXIrrvvpsc6avf/Xly
TJ8/+v57H3/6qXx110OG+G0txrMMXnLi2Y5lRHfzV66cu3BeT629tQxe+mG6
CQtXn00A72k7gxfqs7hVl95LNltx32QrMDl7T2cr8M7FdndjvEKCFZKtoICS
Tc5GsVn4/BYSr6A7vMvbLPS+bM6KOCutd7bT2OtFCVvvdGy2dLYvgT4LMseG
Anim8s4iPeW7C4IVcJJXd/dUdH/kvfc6t+/0NOqzFxdUZik5i747MhR1+0p7
jSQtTyADfdbRbel6XWFp3GzswGCGwsW5eINgWxtE0UKkysYKZcf6rLW6ub47
cN/J3sRse2R6kwK+4WZ6MqnAhDMBYVpQqui76GfiPcm8nBeY5T9SeNqMlCLC
Fhld9N2VwKz3RmreKvIdAOMRuoMwxcB+tVDWug4lWqnoIoST2Rf9AZzPTgkr
y6Z7t/G30ndzQZ6iuj4mx+Hjx+fX7iF35+YpTBdKPTA7NOjOX5iFKuMNcc7k
s3RJy5YeYzy3G1mW8hQ2M7v6HDu4fHRH1ymdloWrm3LcNbhOSozXhLjT3J20
oFhlVog78VA92iuOO71MofZkLbR7WqDdKxmnAAOYY70DXOdsjVFNsUV3M/B1
Vo31mLopWivPJPCmj/TVi73eHw4caF6ZAB6+LGTzfHRHPJ7Wl6GW+c3bw8eO
rj15Kkxm2bMAdCehY8F4VJAivwLxQ7r9xu7+bFSNYovvnGzF7gz67A5nK4LW
u9owmW29q/ei2Na7Is569J3dm3Z7Ua6O3EmyEaI7oe+sMmsq77gXJeTummAF
UXbsu1PEnUJ3A7Lewb28lKKw1vPRp59/srhIsVlRYCk2S+guXxmb8lUBeChj
eVZzZb3T6M64nvpDvlIDr+JV3mm7HV7rmaUx9q1158kg/ukotj66U2TXyDJd
PYe4G/nEHQI8r/JOSlHsQlmPX8nKrF2YtcqsEWdbiLv9BmatdKt/2iF317ow
Gyqz5pXqdmOdXx/dpMymzDbfH8x1+fuYhVkx3UmkwgRmzUoFLMzOa9V1Erky
C7OE6PJQzujy06//8O47S+sDarqLFmapx9guzFJgtlly1G3GPnGXu1CmgdkN
TMu6yux1ff43DN7z1SAti9mKVbgYieOOlFmSZTEnC1dAN0/BxN0D1w2Vibsi
yxrWjkkbTdxRu116gMsIFs4NoONOt9vZ4mJpPvFxnRVkbeMc4TpCXA6ua0Da
lKlzAN7k+bWvvvrF3/2dfSXhvb2M9Opard3FsL3H4//llWkRCiDet5IxsRhv
1LJeIRXHzT9dcfZJ88/2hbLSfWf0WeTxpvmdqPhO7VbcayLesFsBq2Soz2po
x613RpndkgfkuzOpKKf7Tjj8lSZj9fy69t2t6Fpjtxelkq2wLmKQKiZRsiV1
k+sHK5pelIFP34W+u6y5RNY7uQos6E7j9ODi9esnTpfWO+W7g+BeFy5nmKog
ZZbs4g5Bl78P++74Suors/ziTOl4e2SKuDMAYCCVd+jV77YjjVBktKjGlqL0
fPpuX5nZTVeZFeS2kAHegsPdbRbuzlQZdxjRjQy6s5EQjVcDPtNDwj5HhxkK
/QcLJp+DhIIl7uQxIv+ZIhXC4JX3HmzhrSt2br++u4i780x3Bd2h746gXfqo
UqTir1mYlXvJzpdfvnfqVIP0wHdH3F3TbDx0cmQUmF02smw0QMbEnTbd8URF
TsvSSsWMTXcZ43EXildzF6E7VXN3R0tXCPbqDcY2TyHds4/0dTkDPBfjcYOx
bkFRrJ2L7ixxNxVnVWuxHqSYgpn6/ETTTkzjEaWzLlJgNaIrx953f97LmC09
xmd2vvnmhz/58frz5y6/l2Ce5fEslVd34hG6+/Cjj66uruq1sojBe4PoLumz
3oZFiTNn991rmq5I7ju3+26K7sqbhNx3QN/tqlrFcLdCBSuS9Q7ZaYe+23Lc
d9h6Z9Ad0ncF3eGARabvaq13cE54fm1UBmeVMltbrPChXSTO5mDFhsiyMy9W
OPNABPAC+o7FWc3djea1Ajs+Fh49fufQwQU9cwm9KGaMTKlOmXDTrXdgn3Nh
nrLeMZGS0d2cXOn4+qvseTY2617fzdH47vT3dzRZF4QECMRDd/UMwkABP5tl
qKQqXPquTZkNuTs30CEsYpCqUMCv01cAD9MlsUTbwn96yiwTdxXuzt0gVu+i
6ruL7KDkrCNlVr5KsqzOzDJ315j3IOukF2YxtO403VXQ3byD62rdStMbyckL
zs51/tTtNVReDsxWeoyvcBcKr1Qk3x1EKlzfnZ+WhS6UDVRjZ2m6s10KHne3
tep1oeBERVBzh3mKHUzLrinubnIk9iMxJG6e4oEpmyXiLjEwbpLCdty5eQrA
ddxd7C7JWk3WZe2EuIsyFHEqlnHdnuAuj5fLQO67vYLrymPBe7/93f9ZWllB
4IdfZd4vFmp39M6F/L8QzHu0vn7w8KHRq9e2B4+WLATmQbxCGvDqBrwwP4vZ
CvReqmoUWJ7dV7MxJWdxtwJ7URDdtXJ3tvtOfe6mcG7VM+C5+Xf1qS94r9g2
qNPYAjzw3Y3Idyfuu0rlndIpipARx2ZVL8pI5JLIIYORCrwrt7HZqTOHS1HS
vx48fLh370FP9y3kixQ1cTVXLvTddRrhbCbuDuk7W4rS5csr++7UC6rX8Rkw
ngEJ66y3MlNn+j0UaxekCUiZtY47m6pArFUotcLUEaEnRXaqFMVwd5sKy8Uz
ZJVIBSJY4O5Ylm3lPL1nCJ9bKk/94sLfbPJhel+aW88tOhF3pwKzhbuz6M5V
Znlfbx3Rmk/cyceB0B0ps16qYkCW2lbijjJZ0SnlvVOn5m5+Wbi7gR+YlQ2y
JdWIUoi7UnZH6bMhn0LtUAWlZSkzi9xdfaJCuDuXuLu5+Tw33al+hihPIc1d
bo+xrrlTadkSmAVZdgz/tOMu5Sl2pOYuYO3CtGy8J/salileRbIssXZBu12D
7gTXybKYBXjeMmzh6wRWcVbCMHUJxeVnyvHyz38eH4T3Pjh16o9nz+zpV1re
T6m3fsbWacazDN75zz+fW1y0KdocJS5LFpifbe3BA/ddqb8jdBd13znuu13X
fbdDyVnXfSe1xmvA4AW1xkzf6SCSQnfJencbuLvskZh8KgPujt137LsDdJeS
s9hpvKKtd1YvoPpNtN4RfQf4rek0lqFtmiSz9F2+lQ5Pv/a+e0HhuoHH3SF9
N0D6bvz4w3PnPrt2DWOzbqdxoe/Wq9wd0HfuHhlyd4zo8ndDYqRCsFTUN4fW
4+eJu4vYuWEASBpYGwQxgLuLY7MZKTnoLuLuEI/VK1C0724DuTsg7opWa613
UWYWNeUC9rjRroWvC8Ae/yKQjLW/nW79N+4A/vReLe+38pp1nbYwNx0cmuir
FzB31wdZdh24O7wzaqi8UZFlATGaymIuq8xPDlKkIlJmC6LzoB3BvMv94TsH
D1x+/DSSZQXgeWKEw93FPcYbxOAVaKdMd5ukzEaOu+s+d1euCCZMkViCMFIh
mmxUc6ec5Mzd7Zp9Cn99LAdmfe5O5Sl29zxEV2ruHk/VOrMn+5o02f7rsAhF
E3fVTYrZyk+0JltwnTzYayAW++sEie1pBVbjOmTwmucXv7jyu3/9V/kqvlLw
YYD0fCrPTVskxXk4LUIZbG+7YxabAXeHEdp6NQr1G1v33TP124+675q3ENJ3
6Q1mrJ7GeofcnVol405j4bFzbHbHK74TWZbdd5ScDax3Tqexdd+1t95BL4pO
yzJ316gM4L7T4iylKqT50+k09ri7RjHByjvHfecps57vbgh7ZOoacf7y5Y8+
/dwrNB7aQmPL3alCYyEo+v5BCq8XrPDpu3IhphRGncFr4e5Q8lNAzuKT1sys
ZflMoXFhurDvjrxtM2Zme2WuYsMCPG9kNuDuvAwFKrNxpMLgVfW/XEPFbVSe
y/tZ7q6AdmTe9Nqs+65g+rervkN+4+V0LQE85c1bd2Cel6oYdfLnhepQOrxB
xguzvcyKk+8OUxW0UjGvb/SQvqsos+Nj4cGjA0eONGeeYakyzsXszN15G2Tc
dEeRChr9ce+jC3cHG2Q8L6s3xJVYo013icSzcg9ty9oe49x0F0Uqkumu1nQ3
2z4Fp2WdfYqWgju1O5YmKiBPUVpQsib7Clm7Zh4L2u0GsCQ7AnTnthYndEfR
A0xS1HtO6v46YuqQr8Nn5Hg6HP34pz999d1fYpavwuO1yLVE4vWWl8+d/8Sd
sZAtWhfg2QY8ybME7ruyTVbpvhNxdpbwrHg772ffnRTfiSN07YUjzuZ2bmeS
zCZnK9Y7UWbLjdU0wE7QLn9sOU9hk7O4WNFQdnrsRoIV1ndne1Gw9Y7oO+z2
lMUKbA9g7m6o9sgSwLOJNrrjdrsOCOCJMrvA1jvw/9y+c+zECcrSijIbibPp
OgXXR92LAldDF+A5SpbJ1TrXX8Pd+YyNl5m1HA6xcJaCA1TA6M5yTXVlth5P
0I47hfo6uu+up313vSHnYWf03dk6lBmJuzAza4g7wsBd84zHlFa+NPSeaT80
+wfvH/f1ZATVvru5dX4PE7lXOD1Iy6LvDsvuMkfHltcu3Hl522RSZTyYHrww
64izOjBbOT6/du3Dc+dQQYi5u+GScpsU353pQqmU3Y18WdZRZkvT3UrcdGdM
d89Rll3V3N33aLrT62PQ91VpuqvX3DXKrFLKuMR4rxB3wT6F77vDBuN0wKRs
6bgj7s5rt3uDdrtZNmSDzhMToAAvXIWjCxDdd9NDobtXf/7LT3/+8wdPn9bR
oPXsqVxtAXjfILTbgXXarTffHD529P6TJ9EibU5YNPlZqoPGXhRXH08AT/qN
UZwVjDdD8R323UXNxmqVzBbfSeudHq1oTAj6/b9T6DvN3Umb0C0dSJdPXw6w
b3tTs5ycnaXTmA7pNE6KwMzBig2rzAbWu9LrTvRd4LsTXOf47hxlFtZmCeAR
d0fWu8Vn65NO42frQgg0Zm9vbRatd25stoi2xk1HAM8WGusrbC4lrl1/nWYz
JO7UVd7rNA4IvYIiXI7Oi9Yq4o5ebCgv33oXpRscBk/77maIVGyCPU8WZjkz
2/XQXazMhnUok5+bGaowgM35cXl/hH9B0ndnUNxAo3oXv0GVccDdzek7C3lx
FJgNDwjMIncXLcyiMttRM2RDTdyhMuvXoVSa7qw4i9n80599dv7y5eb8g8os
LMzmZ8hIXJruMDCbDi9S4WRmMTB71ZjuCnFXzti1ATJquiPubhUmKvL1xQnM
BpGKHQzMovXOuM13MTC79sJBd6SRkeMOau5eBvTdqwTzhLXT6E40WQ5TWE1W
Nxg7IVki7trWY8v2hK0UjmKtGXQpPPZaQ7jXcNAz48f/9u67ncVFS+vJ99SJ
DF+l3ZO2ZOXB+1a4u5t375w4edL2G5t4heO+k2oUm5+l7jtBdwjwdC+KADzA
eHu13Qq5d7DBivuavpNeFHHf6Xbu5i7mDjB41cq70ovihmdlkizeI1PuO0Z3
5ZygKu/EepegnQ1WaOvdBljv1G0pqhJ40kvWu+WyR+bHZoW7wxvnENGR4DIY
0ambrDjI3WFGbz53Gnfv3u0ChyD9dfmZEU3N6mDFoBB3k5f1rSVJk3K8WNFF
do4gHxUaN9dxh6LR7bWKtSP/nvH/K+4ug0AXljhcE9FWLpelubtmj8wLn1bR
nW4zpppiembBPENDFe4+xYzc3fjvT5EKZuqCvrsYGOPPvNmDAxJVfpsj3H2w
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
wN1FsVlSZjOjQiyKZ6mi13uMjduIMqfgn8sFuezcEDGbPFnRIgn1uWGECrrr
mk5jst71VCNKHdpRJx5uVUC/sde2N0uqwv0/tXwdCrJuijYi7mbh7jrNnUJL
652/RKYiFcqYhwSdG6lo5e7sSoVuPhlhm7F4ISqZ2W4cqfCzFYORq8yS9e7Q
sWOLDx42kgFwd9Z0J/QddaFQlbGdIYPTJi7MlmqUaxt4qBkyVmbdwKwzVMFV
xmi6syXGOlIRDpAhd5cWZvVKRSHumgV26kKBlYpoXhYiFWVhFi7ZryqRCvBo
RQ3Gb+w+xchz3Glo9xYE2ThJ4fefBDEKk43VCmx5/A3gN4vrvOM/f/Kznz4b
Dr8tuI4YvFrOghm8b7+bFKE8fVrkZlPlh+0o5L6j5KxUCFplNtN3b6z7DpTZ
V3lw1rbeCXf36rGBdrbTOB28WBHFZndosULVPGr3nVqbFXFWlNmIuwNxtnB3
utRIZ2YlUSVk3f65uy9m4+5c653l7vQ+Y9N4jNydpe8q1rsoM0u+O7wiQKEx
Cj3DM3OdP/XmpQfPlWXV1S37iOZ0KUoD+bwLX756Ku4OlVkGbx66K948cyl3
3Fa1zOzQxQ+zAA9o6iivQe6uO+DnNeuFOYWZ24wLTmu4Ow+8qanZfZXd0X9R
uwQ3DK4zwM9Qlx6WS79BByfHP3yk2lQ3tYrJNDU46L6TgzOw6r1U3lTI3ZX3
oWbnyvvfjQ41tLYamc3/aaS7VdldKQ+XwOx8v3wTo8wOMq4rI7N2qAIDs+jl
cADe+uDf33ln6eu+n6qY1J4o4u5KuUtl4m6Jldmh12PsLMxey8RdI8sW353T
dIfKrAftVBcKNaNCNG8LN8gI4NHFCAbIdoi7W2t6IaDDvyn23w17jKFbzPYY
W+4uRSosd/dMb5CZHuNXJlLBXShJmd1gWRYe6wZjdNxtQwuKRTvI2iEb5siy
AWs3fRAyden47j//Uw760r/+2+8Xr1z5RjN7iPHcnQtapE3Hzbt3Tpw8aevv
wH33LRXfSfcdNhvL8iwmZzecXhSfvvtaKbNccuimKiheUe4dPN8dLlYEncY7
0IuiCo3XgLtrs96FixXku0NPBXQa82KF4vD1+UGCWm6qwtJ3dI660oT9iwax
rOm7PNCzoW97mbvL978Odzd9UDCezcxm/YWVWeLuFrQH23J3n33xxalPLtDa
bJ6rKDwD++7K9XHU0W3Gru9OZSUA3XXp4mt8d0pKi313iPEkTWk78Qw1N0S0
VtUKrW6o+CuHvtOtxUGhsTLdIb7qxFOzhN/cvrt58N0pdJdzFpXALCqznQoD
ORt3F4WLDVPq/gpq3J3XecgvaF4D76jyGuu702gwCsySMlsgXIZqKMt63F1j
eEDfXVeLs9ZHoUl4Hpl1G1EsrlPK7KOvDh45nP7V8d0Z7k73GJfMLJlSlBtZ
NaKM5J+syZrALCuzOjN7I5Bl7QaZQLsvM3FH7jttutuKyu7UBhn03a1NOyKE
u2trulPKrNt0NzXd8bzsE2BmnmT6Lmq6s8os7SCoFhQ23RVop/IU33y7pXOy
0mC8y447HJP9zod2JiHr2uq+jQEeojtCemfOnTt56hT+ca3PFhuemsMo3F3p
SDl56o/Xb9/K8YqyXqELnL/NlKbjviPrnXTO2M1Z7b5TqrqskkXKbITuoj0y
kWjva5PAA6PMrulUxVq+x2nrNC7JWbfTWIuz0kLZ5J7iMTLm7sikIc4Nrczq
NuNgKweyFcZ350zNFvpOxsiWqsEKGSPDRhTXd6eM09VghVVzsq+7XBe6t28f
//BDkoG6njKriIhM3NmtCuQ9IuudMSwhfsteKX0pR9rEvbjzAcqs/tLALFv5
NB19qZIOCPXZFlk2DMyyNc5ZInPEWUvflZHZoT40iiNpOIpU9Nz/Fw/xGrQW
/YSjZxDbj5rfmqPUKwwfBqjt28x5U6kOE/Hd0VCFQ9mBMkuB2Y6YHLLpLn0E
KDAryiz58awyS3dqVIdSiDvTd2d9HeOzSvf2nff++Mec0J9KCUFgdrkZ2Rle
Mamx6Z9SJ73SdxeEKex5tWRmDbqTkdniqwlWKlCZjTKzFt1R052OVPjKLEC7
wt0Vx50m7hINAtCOfXfBBplwd+1Nd6DM+nmKATvunDxFbLp7q013RZbdpTzF
1HEnuA6hXUJNaorC99ohZfef06Md0SGDN35w7caN3/zLv2hXXvn+1Jv3Gg14
OmHxuN8/dOTI7jffSkFKU+WnAR7Gh+vuO9ytgGzFW2u902gclVnHeqfpOzU4
W7i7qdD/0HPf6Ry38d05e2Q6WAFeBT4a692Wtd4JT843XI2DonxsaY/Mojvp
RVlhnr/4dUmZpU7jfEbiPTKQZYcYm40KjUmZTa9JpSglMNumzJLUQtBuEW7n
m/M/BGbnoWahvObRVwcOHxY7t2Rm0dEtqKwQEaURZQR9d313jKyz/n9ZexPv
OMv7Xvzv6Dm/e07PuVl+SZc0za9Nb5r0pk162ybNJSWQEAIEwhLIAgnZSZoQ
yNqk7BA2Y+MFb3gBG2NjY2tmJFnyIoPlRZZ3W5oZ2Vq9YyD9zczzPt/n892e
Gedeznt85NFIyNLofT/vZzXQHWP2BDUHymwiCRXqo3EKycZkIF8CIcg9FvAj
9t3lYQlj7TxlltAd5+7cCKpmz7Q4aymzueSsyMwWPB5ote24O/al6iUyTV2a
OQvjEVZljN98k6kLj6QEjYLripSL/YdpnaT1V9mIwri74mniFctvTNirmjlL
mx8iZ8hEZha8DcbOrAhWwC+g2YhimO5EHYo5Movc3fqt21aue4W3a9YwUoFn
KrZEVh1DX7E03fFUhafMpipjju4G4Ka72BXCe3NrpcJUZvXCLFUZE48nKvSR
u9vFuDu1UgGVX+GSx3qMJ4vUISPuOHc3bHF3B/hKRTjIcUfoTjTdQSVa4u4C
JAC0kJRZa33sXNt9Cuq4E7tjRNmpPVlrk6Ida2eSdYjiLr79+8bhPdJ44+Tk
5E/vvef8xTcvJJQowxdBq0V9VrUcX1z36obuvj6xYVFkRoz8bDvurgXw9OYs
5pcLBH5GhiyIu8suVhCuO81LUWZInD0wnRdnWWyWBSum2GIFa0SZYMRdEZtV
yixxd1yfFcqssVgB3B1fm+V3eZq7wwrNHUqZtTKzoso4cXc6NrulTn13IVUR
F3xUqkKVokhcl1+sQO4unN67Xe4uNKJIuadnpPrMnDndR49r7k5U3olUBVnv
yuxI1z6L4mDcnbLe8autBdXg87dBceYSWeuRhB+8zCzmL4SbzpYa4XOKLK1y
rGHfnXbcJXxV4o0owmgnCk9Qlm0eGd8dNuBx050yBLqRCiHOCr3VS1X49J0E
1eS7I+LOIeUEd+f0H+pIBXuX9N0J/Mb77mzirsQjFdF3xwKzhjILpjuRjeXi
rFqYdXx3ee5O8Hirukpre3rYwqyvzPZZyqwOzIq+Ow7t0hvWwqyhzGJOFrk7
HanwqoyBuyuYOnNhVnN3OFEheoxRnBqSprsp3XRnrlTYPcbTvMdYHqcPRyXO
iVRI7q6qulB0jzHV3J3ozHFnFqFMcVk247jjzSdG/0knfF1AdALX0dv/8dvf
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
IgsoTs6QxRtzwd1llFnN3RUjR3Ap2cUPu+8u7czyTuMJmZkN6C5cK4cmJXEX
fXey7w53Zom1U6mKdMku3HetAluIVKSd2UyPsU5VYGYWod0Jo+kucXc6VTGT
bUShvrvGEX1ub563GozfsLbGMEnRveUAQbsGPLv5O4ueXzUQGDwRrxgdm248
4dt3/WbeolWCu3tmcX/jwz96zeMEMnu39K/bsCEsVlx527ON9/7DdU+MTZ1p
lqKsee1MdNzh2iwps52kKpC7CwAvQDvdiFJV+qzP3aklstbEyRHZZqyWyGaY
MttRqqJYppCNKPiLQEtkRd/deKHPXmLf3fhgts04/aYr4k7vzG6vc+5ONaJs
NRpRijMVKbM6M6v67kicrfXzVAVV3oHpRS7MZlIVuhGlu3WGN313IM7WUJkN
l4/1W7etWLvO77tD5iFdsGRmNi6Rmcqs5u5UI0q6FieuA0XbiAaFMutxd22X
yPzMLGOc2qYqkHQSWq3GRR5xZ3J3ymInUhXNo0cps218dxzgte27ywFUidlM
Us5jR0n71qAaoZ303Ql4lu2743cNNq3HfXcKv3l9d/xVzYYqyvFrTg5VpcyS
xc7j7gDjscxsYu2qlibrFxrT231HjzW5O5HNR2W2VjMzs7BV0Ya7M5fINI+X
oJ2jzLbpu5P03UlaIsM2VFyY1cpstu9uClMVe+JVTPTd6cys13e33+q7IzeU
ylMk7u5I9FZxZbZN310VND4KZqIySyqhXpjl3J3sRcGyOyHOUp5ClN2JDTKz
7E4os5q+u+4b80PnyTsuu+/jX3xyz3BVK7Phz5u/vfDLdz5w9y9+J7i7Xzy8
ofEZPvfVueF/fe6Ni/OfW3Do+PHGF/aLR9Y33vXOy+57pTJE/wRrbVakKty1
2YDx8HuLjShcnO1cmT2NwQqKzfJIhVF5Zyqz2Hc37HF3MVUxxBpRbHFWKLO7
LHSXmasgml3fppmZ2UzfnR2pqKdSFL/yzuLu6oK7S+dAmquI1jumzKLvjhx3
GUTXWzVO2qYsqzKzSZkVlXebXnt96apVIjNbpssQZGaxEUVnZrUyy7k72XeX
ro/6amtfi/PcHeu7MzOzoMxqgqgtLJFPznT5tvXdmdxdWffdobSaoJrtu0uD
s7wRRe/Men13Ad2V2mVAiLvLozuv7w5+Il7aonivaESxsLrJ41WpzRgxGOG3
+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
7tRFmZzFnVlvjAy3KsRohTDg4YN3/WJVAF3X3j7/B78s3n7v5x7+p9+uvHHj
5htLffp4dM3aRxcu/8DNT4Unf+qmWYdrk0GTpTxF4885S/s/dv0T4Tl/evkD
t/ygWXH8d9c8PjwyHr8JactDLZFJ2Ez9M2YjSvx5naWuwuilTFsVfInsVID6
vO/Ob0ThB2RmY+udWiIbmmTojvruhvgSmeq7S7474O7k/ZQIzEIvit2IIo7M
VkU4dRjoDvrueCNKHQ5jiQy3Khi0qzJ0h8TdZou783x35hk777tTjShVzMyi
7677+GgD3XUfHxG+u8Dg4dUNxSYqB0buTtiTEm0CIhdLy+JllxndLfpOXaZh
ecrg6ESbsYBzfMy0DZbjiMV5ghpgjejIAHgaSmm8J9qMqe9OKLPOzixLVXRH
rs/LzCrfndCRVaqCV95lIJ/lu6vht9EqQK7x77NC7AY3K5+AaM2AdvzFKdI9
bbcq1P2Lq8xSqqIMRtbwm0XiLPru0Dhh+u6E9aJX39/5kYrGWWV9/5YXXlnP
lFmxRKaU2S3s9DVmZmY7UGaxfIClKrYVqQq46W7dXyOuM7Yq2vXd4cisOsaV
787m7vQSGc1V7EvSVfPaF/rujMys03fnLZERwIskjDE1i4XGuFWBU7NVo+9O
i7PnkL4DqxhrvTN9d4K1A+sdBCtSqqLQZKMy24B5b2rrnbdH1jgOHDlx7vxF
D+nd/+Smd1yWuLW//soz16/tMXFd47i11Ddr3ryfvlpqvP3xnz8fPupfb5pV
mzxNrOOSl3b8642zqF7vzntWDh09uWj1jvd95qHK9oNttyp0ZtZUZmOqIh06
MxuJO7vv7kiHqYqZGUHfdeK72xe387ARxRRnWd9dhHacu2vbdyeHKgZTqoJC
8dF6x8uR9FYFN3gUS2SeMutkZo20rOq7q5Pvrk8rs637Yi7L1lEx8Q52GucR
OaHM9khZVrq1m9eUkVqTuzt63Om7qwdgJumIyHEV9B3SelZmFlEiZWaZOGtB
O8HdkYzbdqsC32tc39O7PFDHgF/nvrsE8CSK06Y7NzNbsTKzOlVRaZeqkL47
y3RH6M7su6sUeKx9m7H/bTSfk+P0BHfXyU/Z6rurkjgrq4wldyfvLzR3J6x3
wndXGhn12owt7i7ukfl9dwraVcXUrJuqcJRZenvd5s2rNm4Co117dBdPXNp6
J2ug0Kzi+e4MZbZoM07irM7MagaPpyoI6WnubhwVH83duX134w66M4MVHfTd
DVt9dwHgHVA7s/rwdma9vrvEBbUwg2gz1r47j76jzKzsu4uVd7k2Y9l6Zy9W
oPuuAeBGxqY3lIeeXtD749+sufk7Cz/xpaf/9PIHvv/zF7UTj4x2jeO7974Q
wNhHvrfgpi4b14XjP9dteGrxYvrrZU+ueWfLoXfDtxY2sOiarj1X3FrY+d55
2X23/fD5HftGQx3K/OVbl6x5jUO784TuzMAs892d64S7S0dA6YTuAklLhC1r
M47OTLPs7tAMeAAA2g1zdDfsblVM6TZjpK+BuIOpWdV3Nwh9d6oLpRVsV5GK
Trk71Xcn0J1uM3bK7mzujog7rcz2pw3uGoN2grhL99c2utM2adFmHN6rGlGw
yriqubvw4Oy5z/YePppPVWCbcYBYgrsr+dwduNNT353MzKY2Y+9qHt7FcpRe
353mdlqPmCgisnmAKHzUkeGmCOsK612nWxVl3XfHM7PdtfbcXdZ353J32ndX
kV+wEanQ3F0nfXfeI/CdFz+a9twd/JS9lw2H+tp3B/Qd72O0G1ESpwfKrO27
c7i7CvDhWpnlqQo3M2sDPL/v7uXu7tWlMiPuaqkUhdqMte8OpYdA3+FWhe+7
y8VmkbvDwGyg73aMsaGKwldDwQq+REax2UFF36mmO9Z3pxtRCoAXNaZkKzKg
HfPdBe5uX+Tu+FYFXUMLgMeUMlBmD4NpKmptNndn9d0ljIfeLWLwkjIbPWAO
d3c+uO8ErmMMHmszvojZijMqWHFGxmap1li6737wq9U6AfG1Hy0VNjzB7B0Z
nShK8L7yTB7aNY6nFi9pADx85J/vWxn+R5+MfF3juPHbC3tfOxzL7prHydPn
cYmMO+60MmvPkJlld5q7O36a0XfHDWX2jJJlUxhHjsy25+6k6U4ukbE242lU
Zjl3l+u7E4S5WiI7mem7M7k7Q6KNymzUZ7nvjgdms9ydsVWBt7eYqiDfnVBm
WaQi0Xeu+04WHcRUhfbd4UWhx+LuQACqPjt/fu/BQ0KZbZWo1MUSWbhmRVhl
z5BZ0pUEeOxxSdyBfGZzd+5che7KUEfhu/O3KhKiEG46QTppETahmmRay3F3
Hr7igVmmzArfnS/OnmAWO87dmY0oXB1Gl6CVtvCJuwyE4/kLwdEZqFs0onT5
P2WzGKdLs3P8FZUaUeIjQpyFF60tzibrXapDSX13WIpSkh2SzO2g77xEqiL+
FtuZ2aLvTtVgCmtH42TyUrm8prtbKbbR/au4O9qqgLUduxGl325EqWOwQvju
sBSF+u6gyuBkHI4sbsN1Iwoemrt7nabJoe+ODmwz9hpRDN8dl6WGiNmwfHcR
3RWZxMaFFRtRWkfqmBXKrDxmZo4p991xWDHwxsgCcRe5O0bfaeudLjSeSIHQ
86nK2LDesczsKZe+k7FZPIIyu2DZlj+/4iFCWUFy/fh1T3zjx8ueXdS37/CY
iF00jsa7Gs/8k88/csMrriAbjptK/b9+ZeOt6vG//dY8+n9dffv8jZuH7YVZ
Be2w7E4os5inCO2Ceqiipri7qiHLykYUwnWB0dUrFSwwy7m7S2tEga0K9N0N
8Vsek7vzGlFEpKL1W5m4O4e4M7Yq6G3G7Y8x+i6cVRK0G5NqbKbvjs5mOjML
1jvyJLMlMr1VAYiu5qG7hPGqcMQTey9KNmqrAq8grBFltDpv4cLK8H7N3THr
HXIRiUNjpjuRKOQkHlNmE01nXFtthIZ9d20aUZytCiW8etxdISl2kgY1NFme
mS0VjShF353OzGriTqcqrCWy7MgsKLOi747k2kybcXZcw/6Xiu+AUGY7gYL0
IdwSKV8GiPDtl4Em7ng/Noqt4kUo8FsmVWHQd1GZ7Rrh3B3c2lCbcYW3GdOv
p+LusASPxaPo4Hx+0WbspSpWdZVe7u4B312tl29V6J1Z8JZg351qM3a5O5mq
EKUoIjaLC+C5zKyi77yd2UE+MrsbGlHaZWanWGa28N1NAGtRNICluYp2bcb7
FXdHqQpIzmIpime6o9a702Zmtgo4ARYr7EJjs+8Oe1FibDaNVliZ2ZScxV4U
3mmMyqy7Obv3QO0zt84O6O5P/u0BQeV99JrHv/6j52ct6N29v9qAdkdHJ0Kd
3ScefNEDdbcvXfn1J2bdPnfhrRtt+Hf9mu53fab5P/rer19qff3Fv4L+XdN8
iYy6UEzuTq5UwFZFE1Fz7q4OXSjIuIYOQyLukLsz5yoUrpNLZKIRRXb12LJs
5O6asiyznirurnAymEtk2gthtFCKskp/q8JKy4I+C52ZyN2h764dd2dUGYMs
q2JlzlYF3TWH2KzYqsjos71+YFanKgR3h4HZAOTmL1rU3UJ3pWj2llXGkbsT
6I5aHUTfna9kscxsWV2FgVFhxjn8bHgpN+z0bbi7wAgx7s7TE3M0FH8wATl8
b4JwGilJZdZN0SZcpx/MKLOMu+v2fXdmZtZPVXDUp3hL63tYs9BdrWx9V+Mj
hOLkzqyOyeBPHFI2vMLOAoeCl8PXIXeHGsqspKZl5V180XLuzmxEMTOzKlVR
Fcqslaiqmr47AfBWbepa29ObS1U4O7PFLapqROFzFTVHmTV8d9sjd7cNuLsQ
bfMzsyeCOLuDU3aYqhgEaBetdymRpxtRRN9dy4CXlFnyiivibhqud9BmPCnR
HV5Dh+McgPbdIXcXSlGQhyGWRlvvSKWlTmNKVQSowH13WGh8LhB3J9TgrBWb
vRAXK4DBS4BHJmc9613AeGi9w1UyRHoXLr71k9+uecdl93346sf6dxx+5Jny
Ld9d9DdXPSqQ3keu/t1ltzzTBIFXPXLTJgO23bFg8Uc+/o9/FP9713vfc8sv
fm0CvA9/d0Hj81xx27PUiEJpERogUxtkmKcwNshE393YWRGpyDfdFRgP8xTa
dAe47rSoSURlFk13gUNmC7MqM4szZEOJu6Od2ekhj7uLUy/wCyXyFOODoMxC
qiL57ig8G0dmZZWxaEEZ4COz2xnMG2O+OzdPUXB3QXTIZmZZ353nuwvVUiTL
kkoSzr02omOmu7ow41mRCs3dVQVx10R3ixdX9u2r0DWoxdqRMht1pURHABVm
cHdelbGw3rH3jtYYl8IvxAb8k1dzzue0b7ejr79WYjhEs3y2MmuKs6VRSdwZ
jrXOMrPQdweVdywzK3dmsdY4w915yqyZme3Ed6e5O01mojgLHF2tJL/P7g8r
j+HNrYouyMbKp2W5O8t6J1/S6QmqDoWCFRZ3Vy1+p4APxN9NJ1VRMwOzju/O
3apooruNm9Zt3gyaLPPdefQd35mlvNiYJu5QmYXkbF0kZ82+O2a9q0dlFjKz
O4QyG4MVpN1kuDu1VTHBfXeWMhsZPNH8oMfI9uWV2WkjMyuzFUWwgrnveGb2
1FE1WhHF2eS+y4uztbNnrWBF2iMTymx+bRbpO1Of9ZRZrx1FMHiN4+WNuz70
+Uc3bz9UBGnffntg17Hfzanc+v3FH7r6MZJumzDvB88ZlN38RX/8x3/8R+q/
L37vB/rJV8xZF5IUx8ZnTqUqY8bdvX6w9rNHN+w9ekKV3bVpujvBN8i07w64
OxmpGIlNdyjLhqa7o5y18+g7HJnldSigzCpZdghkWdFmrLk7tkTmK7OYqqBf
SXOGTPXdGcqsTlXwOpQT22XZHePrOMYzlFmdmUXurnWrW3B3fQDwhCwbiTup
xrYfmXUaUUzfXWTkkuOuO0o/zSWyoX2mMpvEKTCQC1m2s62KggPpYIlMmu60
jJsLzI6mD1dUT1gikzjN1AdN4q4Tv1lnkYr2mVnRiMLNeNJ316MYPDkyqz6P
KQ07kQpqM+Y9eBbizXwbPSK0JLk+Ae0srM4xvFt7aCqz4kUF7j7huxMarraS
kjKbuLj42cpqq6IkfXdGZhZvvggcdqc24zrevhG6Y313kb4Td4XhjRdf3fhK
Xz9j7Vq3okKZ1VsVID2MUS8KEXeYmd1qLMxKEWQbLH3rvjuuzJ4QmVkdoAuX
AGtkNlXeoX/bUma59S5coZLvjo2RtdBd4u7SVgVHd6kUpUWPDPPFCkHfhUsw
p+/kVoUQZ6EU5bSJ7ixl1ojNmplZ7r5jrXfTBsBjyixlKzSDB+iOYbzMPNnx
+lTX5uHUddzCeOHtwaHRJ+f1/L8t6fZTj70k0NrNXZs/+JG/09Cu8d//80d/
dMfiZeL5X9q0+V3/1lR4X9q4+xRwd8J09+W7lr770/ff8v3Fq17dhaxdZmSW
UhUE7QjgYYmx0NOx6S5kZnWkAkpRMhiPQTtHmRUjszMsUjE1TYFZPTLL++4w
MzuuR2a1MitmyPCXlwdmTWX2hNZkaWeWK7MnhO+u7VZF66hZbcZyZJYnzgqA
1x/PqKlTtJ0yiyfqfNkdr0Opxr47lqcgZfa5pUsqe4dEr107ZbZWdKF00Hcn
0B1amDQ1R7JsEtHQIQ/ojrfXqiCGy90ZBFGXxCEmLGGsnafMErqjppEOM7MZ
01039N1hI0reeocAr1vkLC6Fu9ONKJqXQ6E2h+L4zix8802mLjyS2k6sAkOJ
7rrSmknB3XUV/XISHKbXG70aLRQnuDvB7JmNKF08Mwu/QaIURf66xSS7KC8K
SzSyzdhAd1Umzmr+/8UNG9b19UOYojjbiFQFO1PVYG2WKbOSu/N3Zpky23rE
aDMegJvulKqAwlLJ3UllVsxTktaDa7PjmriL6C55hIC7Sy1e0nfUUqn2xpGm
IjM7SXMVmrsjfVZOzQbHu+BbgLtL6E6Is8dPS+4udqMhwEvJ2bphvTvnrc1y
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
Jtp3h447UGbthVnB3RG6C6/qISszi7KsMN2JhVkuyzJ0R9wdwjztu0N7RqL0
OWsnhyooVaHOP4K7wypjRHfQB2WkKjIzZNx6hzyejFRo43S27K7G7/cN+o4u
KLPnze09dCRev5gya7YZB72Mc3fssqivgxSYtetQ0HeXp1lGbWWWK7Ya3YVr
rocfPNbIQCMaxpipina+O5mZFTkLbDPutkZm2xF30ncnrHclBfC4LMtQn0aq
+I8V3J2Flm1gnCFIObPaEYAvWclZ/srB+wW1M+vkJoI4K+hoCe1koXEdtyqQ
vuN5pcKSZyqzosIIS1F6VC9Kpu9OALx1ff0vbHgVXb6i705kZtE8vIVBOyc2
mxYrjD0yflJN3J2IzVJmtnDf4d7QiRMK1EnizipFSdY74u52KevdLr1HFvUm
PUYWe1EkdxcWK3Tlne40Nuk7TDvqVIVYrKBdquMxWWkmZ/UqGVWjGPSdvzmb
Sc6a+iz2iggP3iky4CkGLzYev3Xq/MWtO48tWb3jPx7f+NP7106dOQ8NKqxN
5eDoxKdueiYwb+/57ENXzpbtKN5x/ZrKB25+KjCEi1YPhK/5xVd3/dutc4g5
/Oq/L9sxPNr4B85bue26OxdOnSfu7oJptxM1dypPwfcpEneHPy+2QabTspn1
ManMAnEHXSjTgrsL9F1quuORCmODrKXMSuIuBit2OaY7M1gRYB5qsoPJWcGJ
OxGZV11J2s4RTinbVKTC890hd6eHKkLZHd7YqhOjVGYVd5fbmeW+u7qAdnnf
nYhU4HXkmTlzuo8cK5TZ4rpTVDdI0126ShboTnN3HrQLbyS3Emht7fMUPEvr
cXcZwS5+zezz+HRTjUBLST8uIxUK4FmIiJvu6hxWOcpswmlYb9KpMmv1qNjo
zuPuUF+O3N0lZGYNoZY3orBlEAvLUSOKDs5wps7pPPSz2KXi1Uj3FLL9WFnv
TFdefLIxNcunmRV3F9MW1QpXZkUAKhLsyN0ZsmzquwP6rlfBvA1bt61c+4rW
BZKO4E/NAndnoLsE86ARJWK8ujlUoek7NMkwdOdxd6z1rrgKeLHZnbwXRVx0
VKexaL0r3Hd7BMYzrXcK3bVCslM8q2gFK9rRd4TudLAC3HcpOYs8XshWUIMu
9qII953XfTceOatJfpABz8F4SN85GxZWG544LFzXfHv77uN/f93jDST27k/f
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
ONmKU1atMaPvMGERREDgjhinpBm8hFs6yM/mU7R8A+IN6kvRuA7bj8Nf7314
/SvdQzqFgRjvF49uaPz56NyesFsxNnOOQ8eWInzhwvtbwxYLVw+I8pMTp849
Mrdy9wNrv3DHAmrJ+8n9a5G1a/1j078dQ7KBtfOWKeqsu/is4E4hTJEcd6Lm
jrN2MkzBldlTOk/B1dipAyoqK4i7fbzpbshNVaSu77YbZLudSIVIyw7yPIUw
3YmF2R3pdi+lZXeg7y63QWZMVODCLD+tSadxbIiSkQo03emhinS+rTlIr91Q
Bfru9MhsJVp6COAtf3nt+m3by+ldVeTuQqqC16Ek350ofEBPnVBmEftJIqUY
Aog4EFAZQkGB3Owju1VByiz2Epudxma/R0axFREDDti0ga2eKbvT3F1sRKHm
Ohap0MqsKE4Rn0oUGpsOQMd3x5TZDIrzm08S28kpOAP4gcJeICXDVkfqqkJ3
0GtNzSeGMiu5O37TQX13EZixFzaDdpYyK7m7EaHMUmyWZdUDuuO+O/wFz6G7
HjFGZrk7Gr/vG7dv1+jO2yMTmVkzNmsVGtf8MbIxbcDDQmNReVdoLkYvisxW
ZPbICOCJ+XIxWpHrRYlT6bwRQlz1plGczSdnXXEW3HdEy/Bm45SX1O47AniZ
3Yp8v7Fw32HCAvdncaRMGPDyWVrB401JHk9ybhrX4ePh7ctvnXPvQ+s/c9uc
Bir7xk9X0seyWbQLF/61VUp8/6yS7rUrbz8YkrN0XH3HfD1I4RF3Y2eNFpQq
5GRbAC+1DsIEcMLhZoPxMem1c/cpiPLVExUsLTstiTuZlm2hO3qFa1kWU+TO
vOzE7sTamWnZcZGWzSmzfKGG5ykYa5cCs3xhVimzpMnW7ZWKiO7UOs9YPPvR
dk9uYVahuDQPxOzQhu+OLcwKo3WrDqWquTvtu1u8cmXX64PxIsUuPVRlzGVZ
2WZMl8WM746IDnYBhSuv1s66hDFv1NBeu0TSNue7U56ukeJBfKYjNTJ+yYN5
QpmNsiwru+NiqKwRNn13WIfS3S5SIUpRkLtD+q4D4k7RdCYPyXyGNlmX6YIG
9VZ/t4mjs+k777gkZZbdPii3gOe7c5VZJs7WkLur4OfhrXfad1c21maVMsvF
2V52x1elU4H23a3auGnd5s0ky6a0Pldm9R5ZfzLd1VqxWdl6JzKzNEa2Ra6S
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
xgIm2ejOBnscj3V3wNo1IF+03rEt2gpNzcaFspJTaFxRXzn+o5Cx1ADPk2t9
ms74nvMfrgR7mK9p239IqQrQT5XCy28xdG6ii92nyBsZs9MYC42ZtyG57NJo
BX0q3Wnczam/1iPUaSy5O0+ZlSeTffsXLFoUKDudqugFaCc6jfsEfccWK8YY
d8c7jVWeop5334Xz80BcrBDuuwErOWsUZEGnMTJ4g9Fxh535u9u23vHNWa/W
OHAgksGbMvTZmJyVoxXafZfvRQkYz5qdle0ox6EdJbJ50X0HDB6tKtSkAY+v
0J616TtasjC3aMmJ1wnGQ4eeCfnwmTd/b3FoKi5tPaCbWMLR89rhd112f0B3
l986h5qKVTA2l6SIIVk5Jgvcnd6kSIIsTAAz7k5rskdmZrDjTjcYZ/YpxDgF
vsBIlm3txiJxNwXbspM0UeHsU+AxJYhuzYRrL8TOzpvujKEK2YUC3J1hutvO
cF1dNKtjYBZTFXRC4y6UMRzu0ZEKmargfJ3ZZpzpQpFNdylSIbk7LvTE68ue
vQuWLrGEoRSp4EMV1RIRd2qlQiizDCJColaZ7oC7S2yM1MiY0JYomqq6mnvE
nSf5Ifyo6X4PD58YVB6XKc1OYJ2q8Lk7A9phI0pmqKIHVszUXAUEaS1l1k9V
MFkZoZ2wLGoArD2NXJyV9J3oGGwdNitrrs1m8Fs5QsT4Cqym1x4U6RAaVMqs
vTZL3F28UaoXuXJ6EKx3VmyWob5K3JfRvjsi53s6tN6NqtPIkWPPzJlDYgGs
zaZCY+w0VtY7c20WGj5j3GxrUjqk9c7sRdHWu7aLFXptNtNpHAEe6zTWsdlB
5bvbxatRYqfxFGpVOjk7BNydEGfzzca++27Gw3h+9x3TZwlO5A14EZzY7ruU
om2nz5o8nsJ7CeNhB/K0g/G847YfLv2zyx9cV9krEJ34/HfcswLbTnRTMcI8
zddp1k4PUtR4Tlb3n1CYAnKyRpiCArPE2h1y0Z3suNPbsmS6o21ZRtxNJcdd
4O4oT4GRCsxTNOm78dR0B0lzti2rm+4Ca+dFKnBPUHehxCFChu6CKTfSd9Rj
HJVZ6zwjRmYzG2Six9jbIDNXKqDNuCPiTqO7XpRmUpVxvSee/ytc30FZtvHn
xtdeW7pqFaQnOLTjzEOg2lAzCtydcigZAA9l2RJXXdPTOD/DECB0XOT2Kej6
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
f7WJ7jQq7qSCBgFh62cqwB5D7/q+wHBmcrRmkH6W7866K2EAT8A8FayQrXce
uosteeTQY3WUiPHK0n3BkvI9Nn1nJGdf7uldtakrnm1otMKg70x015fWZmWa
LJwVC5hX81rv3N2K5LuL9F0AeJSZxeSs13oHvShGKUq4puhO493Keme33kEv
iheeFdmKIXLfedkKK9sow7PZ+jsy4DWpnlbWUoVnZb8x5WdNrkl48OodLVl0
otLaaQv043Gk157f0+8Vn5Na7DpJxVqC7Dm9Mla3WLuqxd3pMIWpyYokhVgf
OwIV1kZ3sZWnSIgOG7OtjjtO3E3jK1krs6nvURWh7PLTsqIL5fUTzAoLAE9C
u9c4Py98d0TcGV0oEKnItBmHW06B7syyu5bBOG1tG013EdopdMd8d8J0Z3Wh
VHv8DTI+UcGuEUKWbVYZz32259ARXKlgG2RAHUSYVI0X9DboDuMSsgsF6BEm
v47WGMMWbPCA7hDXSXGNX/rNcTH1V1d7LSkoorrdEp4pS2hX5xipXnHQXZsD
2oy50upSdhZ9B9Y7SlVY3J1GmxqdtibV1OMiVdG+qdjD1eGnZtJ3aW1WADkB
9aHdmjVdm9xdmV48Ym2WuwLEYoXmqAV3x613NeTuKum3o8q7JY3WOzNVwYMV
6Te9WxcaK+6OziRdr72+bPVL+l4y8XiE7lShcX+KjNX4va1crOhXwQqRreBn
2qK7gLi7xil6gCdnabFCbc4Cd8fpu9dVKC9wd0TfCb+3uTkrk7PjqMxOEbOx
d2IidBoPgUmJ7Vbk3Hep+27YCc8eUNxdh/lZc6FMMHjhQb2nQBgPkF5COCJL
a/bgZZCex+blmTeB/UyU6MVgEV6eUGosIroTPENhrlEQX4ftduYgxegZpomT
DRKhXfh5ddh/EjCeXqbw8hS6wRj3KfbxtKzYp9hjdqH462NWWnYiLgAarF0n
XSgGY2+Z7gaoC0VKscIW4nB3dcbdmYFZ6kLJ1aFApCLvu5POOqfHWGyQKVmn
oBQgVVHrbnUjdBdXHCEV1bQyGyIVJcxTyNJXw3dnqFfIqgkGzyJbWhdcZ6gC
fHd+qiLpemYditABOQFlEH1epZuqQ7Fjp8CSJTTF4BaY7iAwa6Qqei6duzPp
OzPloZpSKF4xht8lE90pSBy/t9b3TXyTFXeH8Ftyd/TTz3bfscUKh7uT8A/Z
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
nHWdtVnmrmWPbFE+iajMLpoXYqPKLKXdtRdF98jwEEGtdwe4Zrj74u2Lz/6t
QUEIeYpC7ukkmbbewSKP7DCm1Si9rQqcJANxdjh0h7VZOtprLwqukg0njiMr
zsIqGWC80NmF3XedVTIQZx9VbauyIv1mY4pXkD7r6DvWZ5XBm+3BswmLX7TZ
IzR+SBueg3mYqB0XWjtIL8N1/e9O4rpztynWeMXC1GVGuz6uQ9auVNuNAjcY
7X6JIVkjyxJf922C69hx99TKsq1XR8cpOE/xuK2rDLYB67gjTbYSd3WGTPIU
50SJW1x31FVmVZ89FFk27FOUPIWuVERZllMVo7iQdKEMwoTNU/iVCrlSJodz
PQgDcbeph+jh0L1viDuzUrHPJ4imB7365puL4y/1fjbdAcCzKxUdXIe+O+bi
Ziizyt3BGXzN53f3yCXjtwDVuozcpo9PkLki6x1CO9clcgbf7fnu9jETkQ9V
jJrsNoN5E9Y7zVBYdLdigGe4O8uIEhK24izhZ33JNDO7F1/9bn52nS1WIDjU
0mO9fun77ix3x5lZQIltruJkcN81cTa224WPsPVgeOIuuTZ8dgz58Nr19z79
W/TdRe6uW4pSDXi2EsovVoS+u23HfUe9KMV9ZwZnD4tK++yY3zZn4x4ZCLXW
fcd9XLpbcU8SFtZ9N3AdRN/VPthZ6M4paymD9+Qp0HdPhcHr5WdxoQxJvMg+
9bxkuFZGWdqziPHiOm1jyUgVfT68l5GBkwps/U1Ah/1fQXRmQFZ67fzzA+Un
F+iuNg2qGlsrUCL7Sujuqe6OTWmyIU8RNNm4T2E02chFqyYrNXfnuE+RNRh/
IVdYfp/C1tyFT73KsuOx4vZYh272KSab7lyP8balZUtgtpOW7TTdZdzdzFRF
PeAPl/NLUGYrcVdNd8PjX3zpyuqf3w2PNGV3qCWN568tme7k3Gd8dzpU0UF3
otuOqlxdmNUwhWPqApBDqJC4v/TxPR22I8v63EFC3yG6W9hURSXu1tNNd2i9
G5i9Hn23NoOzy/grZe67UmjM4iyCW8PUlec5K8dDOF2UWUvrpdJ82ok93vJC
4yi2tqBrBHjqu1NbwvjBQYq74FJ0sRZfq1mbXQKES2qNB/p9TdY7ct81A547
niyOjl575x20+9I1Ju6REcbDxQoEeMWBbNCdiLNb6kVR7g790lR9MIqzu2t5
ZfCqskPcnRNnzyvAKxivibNUuU8GPOi+s/Tdv2I7Sui++/qx12eHvllej5rX
joL7s8V694vOk2FIs9B3oSBlx+BxD17EeGFyK2PwXKJ2QFbFledwV0e9zfDe
pXAdpHqNv25r0N3/YjZW+4rXEQ8PCBnjsbX/ZHKTooZkW4fhUyLumLVD4i5m
ridXZZ+UjM/YgjIyeI98x13VZJ99cQ9kWSTuSJMlgHdU8hRufUxYuywtK5nZ
UoTyMGu6I9+dNt2NhybThXJGF603y3GvR9wFZZab7rz7LuA6XqnAtGynx7j6
ecb/fvvdBbrbAbbySN90h8ps9d0tTk6ztGw5JyYLsyZSYU64y9oZm3J3ybem
AF5zdkW+SIVFh0/CI5ex0deiO+XuOqa7BUA7jFQUqHZmW1Cek7uL6I5+sTHw
y3kK+gca7m655qerPv99aO04QKXvEuRG6nzIuq6fj7tDdOc6jRn7oTJrY7Mh
Oduuvxp9twqfu9aDR/nZJdN3qe+uuTuk0/jgm39eeeVlPMjU3ZxRWaBelBIN
o1KUgu74SHhj065/AeCd3coZPN9sDGm4oMzSzdUaq+LT362QhAUGKxx359x3
Xwl9V+/5GqYBhpvj7jBbwfNkCPCo3LiIs8avVepwDcbDao4K8zIPnttfaDxe
H+MFJxusmOnOhTaQzEF9GUosWYnG1NU8LLbYOVwX+Lr6L43PhqE6T8PW2C9Q
M+hZux+k8yTRZM2ebL3VDA6GKfqOuxKmwHfsTpm17XZpnuKchmUtusscd3Yb
2u5TYJxKRmaD404nKqI4awKzxN3dFHRXHXc0L3vd9Rhfc2EKRnSE7mi3IgK8
erQ/cIHZ/cjdDd9aHH/56ptvLkvOoty21XHnViq2pMziiS8Sd4zuWGk9wVNq
TtwVLqVydyi98alZEODFX9zdcu7O4kCvMCreY/oubo0pcWcjFT3THZfdTXN3
AwJcrXc3ic3OtN5RsAKtd7XQGNVnou8ybrNDfqpKG7k7pPUajOe9uV7lXXtf
ZQbOYAqN1yDgLpim7xau01jRXexFwaRt4O5cbHb4FK8P4IJO6bt96DzH1rvh
MHL9dHNRivL9T+oJaXhvZ73L9Nm6WCG1nyZbMdlpbCbJgjL7ULSYn1ty1lrv
uBqFgxUB48XWO7tKdtxaW9l9NzAbpcm/0XfkvqNqlIy+w3ky0meVwSOAV+m7
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
73Ii8hkyPGVkuCAWqJ2ve/iBulAKDmycnqRiFd4wcbeUtOxCAZXUoSjVNhOz
Tfvu1mPrnfxY/mUWkcGzuvOKMd506529VQX2MmweMWyK8FMUl3Zlm9w3/C+S
1jvVXrEXhfTZdn/IVmwrg9dJzuJuxfAB3BeAh1d8ywbhjDhrfXc77m7XjvL9
RQv6jR9PLKhL87PrTU7fXRxFb0WMV6oJxvo71WeHw7VtpLcM3p28++6u0Wc5
P0sRv7hQ1px4dsOi6bPC4NVuWFTE7rVb34NXcxbeiXcfFuRVqCUGb+xLSVYt
AoP3xFB2Grt4EGGesl4db57fesice5DRUEdfhtzou+mvlDB11lNX+DplMg1f
p+C5grryWoy4bvBMPnt9q+PufhKiIVw3JinwPeNiFMjaWeJOl2S1/0Rzsjgm
i55V43lwBXe1COUQYhRE3PX3Kcbjg2tBcS1MZ5inINbuekzLVlk25imYpiOM
d21GC0pclUXTnZdlq2g7nDueXXr/8b0/oQOnmMPlDEJp2UYsRDc4YzwmKAjd
AQ6MIpfAP7stm51/h76LePIdYIAn7lByHb+IDJIHdVl+NolUrBj1JSJsgUz7
wV+HadlpIPeb+O609c52GneV2Wn6bpGgu04JXo697cvaa73rZCv2SrNxrNwJ
WVd7lQFOg8K2ASDMao1JuiV0tzgJuxWarSCAtyyXaZStEOtd1W3XFt15gHfa
Dk2vv/vuX2/fwcMXwjkAexuEdoM+a7MVN5s4++wBm3q8tfQdrVdIvKLXgFfX
K25vz5qf58xIQp2EBZ6qrHu8M2MRW/1NyzECvKynItmiDSTel8VjDzAAG4+H
25OvQ5x26FKbKMRrxSmuL2Vm8mImp6fYzHQmK4qLzNs3guXm+OjwtyKaDiZi
zb805mGf1K3Y4alT1ftrQ9k1vi6osRdfQ4CisnagxrLLLnJ3x8Fl164jENc5
1q7d+cVucY8EWafJRuJOHA53c9bOcuy3nSaLDUhZBYrujmX1xdhxp4670GDs
rmdJs2BBVtKy++MR2DYYE3HXDNX1Kh7tNxXdvfb2258c3kXHXT3jNANPrLmj
tGzVmzJNtqZl95DQUNZuRlq2z7TYtGy5MXGHWG4vJesM/OsjDTHdne2AosKb
oMymjrs4L7uKXSi/leluTn62EHoxOZsos1ZoVutdELVR2na4OgN1NmMrrxe/
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
Qvcd6rYR3c0Izw7Fd6ebl65eXX113x7lJDnL6xVdfZa3yeJhuTddUY/2KM5m
+o4mLHShDECdX6G1CQvqiMhPlCFF28lZIOtyL8F4nKX1idoCGHISTzIXIxqJ
iVpEL5fm8TK898DiqwSJJUkNwYT6txyq1HzEzFu/4SQOxQa+Ln/CNfIcLZQS
jxWXXZuiqG+bCTX2PDjuOiFZq8Yyogvx2HI1lBB3QJ6bartJQRbHKXSZAjvu
xu7idXPcTbB2lbvbHc0wKjvJ3aEI0knLRmPMdr+Ulyq60yKUXZ7ik/eXK6T1
jOkucnfquFPTHdFx3Zo7yszGiQr0op8aXOcxXnqy5vN4tzHDsHOWNVoK8Kj3
aNfHZI9xb6XC5Sx+PVr7NZ3G+/Na71aNrDPoTqx3NjnLrXf6xZQmy68pZGos
qWuvNbwTb7juQO4uugskVQEPQ/DWV2bJjxeU1vbx5OK7Zeknb/nZBN2h724/
PKA1Gx9I950xk+zurNmKRJOtR8WK9EaNo2YrdHx2YPAE3XEBqRjwNv1y4+kB
i8LgDQoRu+8KwEvLjWPLMTVFVAYP44fYIdZXaXVWIGtK6WdpgQJytRv/Yide
BHgl0Vmb8UINMmu10XgWWkFmIr2ojVakJyxfGMB9bBBdwsWp9tq9PfWIzu2I
fV2fn8fNwVihWmE7PbRzenrisgM19lhKEY/jRYFCu06vne0rHt7A2SCFRXeh
2g7qhri4uLB2qsnG7mLbgiLpKkPcnZHjDjTZqRYUkGW14w7lWjoMIq4jTk+I
O5RlWZMV7m7448Wt5Cm+3S+d9nhmgahsgHbjOeVET0xGlvWabMwMku+unhZR
llqc9GHbxMm3sSsR7IlOlyqt/Xs0fKHyK5ruKF8whe5CjzFAO2wm+S01Wfq7
+/J/SVvv1uN/sfUu+zcKuhOAl5BylqNTNtVxd5v4NbG1ITw7iLO1DkXpu3hl
QTaD/M1pLnA67jtjvWsAT/TZgWMPlHvovivfAvcdRuktfacMXqLMwpFqaEf5
/ocXrvzu+g8/Wc9JqtUm1SgyT4buu9747FQ7ygSDV7m72yVCWxm8iv0oZ9FI
CQ1ZpB0pKX33uV+yYGpFO1LsnsWxnbRIGo9rnFYTtdXV7/x4IV0rbN4TCBEY
xRYtav2Kla6e27i+HK3NzbfO+X2yLmJNwrq9ifYcciQ290aqtj5VZ8cZCpwY
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
tVM5WcnduTzF9AhmpQ40DsjNc3opcWcZPAv2gjzFMNXWPMXwQj+nR2FJX9Gu
gdNDTRaAh0lYIOSLgIrfAN0h5cWmu3a8l6Oyc8dvo/RdKY0yWwnrXZStaOtb
AdgvJWODGimSozMXDF1C5WpcOfedJvGIweNnK4QjfCgYPI/6cMFV7328Ez0t
H8crZG+yPD879dVRmL5rqoDnFsJfPTkRIw6WRydjKdF3nLAYrXJsEhbrNTN4
DX3Kjh2rkJbC4xop4RyX5CxylTZw4rmMrUd6csaXJB6JgP8pfS52cuXhMar/
he9sa9KjirtzeE/xaeNoLUKM7lnJGWLW1fJ1hqUsX4s01I0ydaTDxnlY8Ncl
29MexZkVgbuKnvhN+et6C4HITSCoI6+dBHWmMFFDQrZmKFRFI6h/IhpSMGs3
vhmvXWM/2VW3pF3jWAeOZaHJIqdXiLv9H37cdqZ4iVFZw9otK7TDlrJd+WI9
/tvlv3TcVXQHE001gQfQrjxVZrdElh2rgnKC7ggrRlrb2s31DPmkkMek0LQS
RyOOuylhFaFFuhYV62PEdZEmezou7uzbKc7mupKZbEVRbK37TlnvfLFo8f1L
ijVF8nHsIuJ4Q9LYsG1H1i8ah2c77yiKs/GNo913ZV3m9Fm8hZmZNyhOda8o
nl4brzgZqUpoa3DleUswpfuNqwQTZBXaDQ8As23evXPnk+l0obBcztqJx9TG
wtnwDvsSeYbBO9STS1AHb7uRfUgzeEzilZ1PFMbLs7Q9m7d9bV8vhSZ05vdC
rTbEeMa976K1uSvP8XiFwlJZDM99eTQ1xrkxTlNsW8bF0X54X48nGdFh2WfT
EFZiXdr5HwB4AtFF/jrMTSRqrOd1MRW7oerZoqKdBX6gxqYhWUZ3ovOLJMYP
Tclib7cbDBUQklIxCrjrT8/aNdY/oX6yPWs3H2PtbJJiu2p+udq7fv2rJ099
7eIjZu064m7DfcesvqO5u+5fodv2W+UWpjC1mSkvigcCuZG57zTAw+l1o1qP
+SnbebRcniKqlVHFPmX6cpCDYwIjrN1Yf4rT8XJvBvu1ZisA4AkxWn9pm6kB
eEiTBsyeh2f+emiAc+2LhXVS2bgyb/YKx+vcrFzGw7O69h0iN8f1SR6+eirS
6igYpa+IcWDwwIBXV6NowJP0HTF4Q72UqD3Zb3+cFAH41y/F7nJAo2uC7g5w
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
9NkasthMVXUU155sUBwgdds/ZfKzM2DwZgDzykjYUuJ4sdqcNOKZL9yCOkd0
w1bX6S4rZ8N0IYmHlVJskDbLWZj5i+i7xmp4qHbJeinGjLfpqLwyX0OH0I2d
5QNuxyI90a/2GeCNpIJKVDGPub4I5u2K0N7k5lhBh9/sY/4eikdxPAM7ytrF
v535ffvcxMZgfsHauRrFMWunrs8N2gzcFS4zFOXukM4HyFB0W99ANknIFu7O
JWTh3u9Zu9FOsoMU69TYrudO/6warLzdzvWkYLsdrnw77m7+cnXl5s1Ok52d
DMUwksNau3BlJifbNQsbZgQy4aCnzvensM/yFrN2w0zklCkjTgUsR0F3Nk+x
AWIk0ls1upvCvwl3FxF3k6NNwCAVP5523EVFjOfrGqbotkWK7t7ODrPR1v0V
M9wgW8G9aCcj6A7jtAJUh8qsrle84SsEjsRFioZ2vNzABYtZmIS4jtY4iYXV
174DJpyQm6xvrPh5WBXW7hW+vjHnZyeQn8UUPxdxkuKsSlik+dl//3aynoX8
LK6p2TYjrTU+Ubv2/hwGeLVhJfEGthRenbDQhueYB99rae1Yu2O04Y22MNMY
z0i0x6jSWphH7rsCD0jDRdThtdqMwSs6o9AfrUPvrOrtG8N1vDPg6Dhf3FDV
JHDWyS//ma1toh2V9te3vK4plN2ixjq+jnwFrpxd2D2W1VhF3J3cXycb5ZtE
4WJH2Q2snbzrcUyQg4YRZBuroPiOYyIJi447yqbV7eP9/ZsnOdl1lpO1rJ3R
ZI/MRCDdOEzclVfZOcjNNQNfx1MVcXRypnNRWZFADKZXqoOxDqbsythIxk9o
snV/k+NO1ribYesx1akBIdCbx2Dn252Wdy5KQWON7kaqo7ivl7IV+P0XBC7I
WInqZbaikLcS/w/5HXdN7lDZODpmHN3V2xMWWfZVeGvnDF7dBnSH5e9KtAQ5
f0BxeX5WJCxmBuO5DmWrofInKx39qPvloydXb944OKlvrOm7qECKrpECKVpW
aXMGDzBer9KWThaNKm3Fe80evLGcxau+7vFGOPHc/I48Xl8fL1Vpn40xSJLN
UxjGZGx1z4VmvBcpqrx/VEWNeLnvLGYbDiuf7T+4x0JW/dflTJ301NG37TMy
Ea6TqdhIjfVVdwjdWVznH/PV6z0JgSY72FZdlzEvyB6295At6C6oa5ezdkaT
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
Dz26286nB9DLqWWObkF9jtUpOFDzeN1/yfElIxijSI/ToPjf7r0ipHc67HcW
5NaC4lryreF+zEeg3hp46gCHryV422kzKE5dURzrzsk6h+vqxT8Uitzenqu5
BXXE2pnbyq28+H5ENfb1yb98/ORvly99dnDQ3aeCQzOiQBniSja2Vj7hesVu
HYr7y5gTlQvAUREWyzycqm4Uyy7nm2myvIq3o/qq36Mxnukkm1S3k37yqa/0
5ZkKpiyEx2lAd8y3FPpueKGfxFmrtRDOyLLzwgWdWZP9E/DPmc9/vp/wfM/P
SNtxd8Z9t9LtyRJ9lpcJk6OA2bPgTboO1IW9HlCZvyOm9tl9e3NF+mynVNY7
Gil39tAqfdZvua8DKLgB2lmMBxQc+4156JNokGSLI5uz6L6NVakyiiwc5ywg
alEUW4sYK4+HM4jJWQRIz+PAHqetNp8d3D9pdfT4MZIYOPGV2XBcq0U/3tiM
fDDAgJzfi1x5MaLQvFCRbjuUgt2vki63nejpaa61R4D3U1iVYL9RZNiI3DJS
jj6/Q3Hm8fbbMN8JY+P1ab5/e7zOSnjMFl8/3SVnoF1+fTaosexTdbXs1Oqp
3+lYO8R4mKHomPbFi+Xtv3+2d/367KefZydIslY+MaMQOTpQjS1nA0NvNjol
45suWbykMdZ4XUxC1nhjqqRSHcj7GNYgRFeW1SZOCwyAQnHlHTcRa7f9BiKO
Aue+Nf434e4cazepXrvjYf4VgmxSyVaydnPbdKxgCcndvbX45/+TrRNnZ2vM
zwLGQwYvRnco1ksIh/1nI4zH7LRbucjkuCKo1/RA0Hep/TXc4rw8HSAVBIXx
siPtGGhNxaEjBUm8igxRoh2E2mE03iQdact4CwVSfL0UHJYdbHNCbc7jgT4L
E9nPv+zduHHrk08Xf7yIMJ7UuUY61bZhvIilaUF6jBkiNdB0sCJVcVcN1+i5
jKD+rC34JCN/Ef/VQnXlGia4nbKeSc7fugum/LtAUBfjukSHpcVL1FOs3kdT
BerQZSe5dzF6/PDD5atXP7h79zXGw5sd1nemTPGswqQOTel47C5qrBnZOCFL
Y6kbP0f00zLGpp3EFWvXMjsclTlFJvgS/Uhu/bMBvyHIwKlKwkZeu6i6Xdlk
SBZ6H5gqKG84TPHGtvOtmXxeiLT9/HPfvcIzeBXdBeXv+Npwl1YLuhOrEnId
SEJvagFhWTHldw1GMPZ7Rj29eSEIr8aBeEzYmjem8Shh6bWwUsq+XvmGEoYc
SwuDl1fDm9qOtO5dApV23IlX5hplw9OKUsdRHLw8unNSa+vK5Jtv2YYUCbWw
rbR3vVmobd9yNs/ivQjpwTGk5DJ/dTrUF2V1e8ZPcYCjOI1flSuq0ecP2bnm
rGv0De+E7vJtRIEd4+i6lwibwUgqdjOnHITMTQDMEwGKmR0lTo5cHt25d+/S
lb2vn/2j3NogMfTSqrfm1mEwwHUE7SS6A1LOjGalYLuj+Jx3ZUSTBcfLgA99
hqKhHkLek6JosmXcdjBszbOYoiY0cuOJrxJ0RNyl86+fhRN0l3B3A1roNzZ6
/YXwz/lqvue7neX8jLdNLsbpsypCm1S3jlcNmwjdjV7edLP4tc9wm9TbNjiz
XD2JCnjyXt5Xqz/GeH5dmYJGoTuUyMMwfO3ThiPhhIZNTt0aHq+2n9gUgNcN
1LxCdxiPhdpZPdu6CLVWig3NeKlWW/xFJwXxLl+79v5nn99/eeRmw8SM1yLX
LoKJexTmyWN2whKAQ2I2b9Xg1kNtN8VOLQiQUV/L8WfarDbt/XKxgy5ByI3f
f/5ryqsiupZMHzFbCMXxdSFTZ6/n13cf83UDrvMuO4fxXDDWsXYGif3z5ys3
btz6+OODk3J2G5GNBTLfEPvdcGGEgEEaIPMwya9uyBKU3b7Hb4DWvA/Zj7H7
g+fZoUEYn8MVeh3eaUXvDiAIl5ByuFMfw4BQq7ecpFihLFvBmxNkOf+Y6HEi
SbEWOw0aIaT3NuOfv+Ln2dkfaNBdrXE3H8KzJl4B9F3C4LnrxxnwMF7RP5v4
CpipU6R0I7MtI7TDXebRnbydR5h/d3BZPA4DC655GeaJFK0d3HAVDLiuvipS
PdC7ggCvGufiangmbQHvOMwXmw6PTYcKKoUQ6MBeYeeQxHOdyxy6mw4vdI6j
g+cv37979zXGm3z3Q9WtdKWIfg7leVnP1MC68FzfiPQkllB4Q6duI97pPh0f
JXA9x2XR3el4v5220fOLBAR8/oOCYMd6RtjvB17bwJ1GyG30ALwezLOQ2WnJ
TUimbvAYeB0W9pT1FHPj/j5yfJ1OT5xQdqtPprO/Xb705eMn2zvdq7EI7cxJ
Bgas83Vg5ZOEtdsPwB6DSVEpxY2lnr6LiTu1vpa9xhDp6VFdrPfFbFL8cjIz
aNx0nrjrXx5lZt1LMEYREXeSXZFEjZBlXRUUW7hYarKj4dm3Df+8me3t+asz
fbYtP7tzdZSAweOEBRzDiyMm9wS/F6A7PCZ1XMT6rBslHLqrIC0aQGJ9tsJC
MuCVkY2XxnLJXFfNcaWUwuBNAN2ZfJwl8YJ6Kf2RUqVNtFp04hHGO4F5+998
e2lv78PPvzh4voz0LObxLKjLtFrOXzAyzKEdH9OoACbIJNAiRf3kipG0pqm5
PteZS6uiiOXyPcE78ifEzy9xL7zFeIal8YtNfilmbvUxO0qxDO0cUxf46wxr
N4VbI9JkuZZduZVg267Cfvzp6rs3TzpQ/PaHU2MdrnMLvSLFTnbMUCjKzkA7
Ln4y5fHTjZDJinsJ46pcdxOua1nIGxwIXjs7IwjMpqankLWjnWVCXOMBU0B9
O828bJgXvE2ak/1vxT+7vuosau+Fnr8D3oW+W5iEhUF3DPDkJhk82O+vNLgs
Raw7MiS45KwLZbjVUKzPCoy3b7JUegXnwF7Wf3AJfKBl8Mr5YVm6siNYtYhU
xi8YOZ1CIQdSqc+e2PDYO9dHLXqMV9fsIYO3UbWzVkWlRTZvPvB4SOUpv5Cb
yFY4Cd5/sfzg7uevMd7X//i27PQT7srMqmq2PcF4DOEclbfYJXnRgvFinBbh
Ft4y516oZjrfWlyFL8Rp+fFBTZIEucnHOSM3QL5WBfYUtroI13kstyOuWxCu
oyVJX/Ok5GHnNdkqdNi5vVmmtG5yx5cbfP7y6KOv99/Z2/vy8ZNtq8HNdLiX
eYioRjuTjaWaJ6DGRrgup+zYRlKHMr++rrjOPzushT25tx3NGvpNYFq2016T
430nWYRtqSPI82+5DuX0rImaKEPXEz1L87VUYzFlaTtTVNbu9DXu3hL8c2rU
95fbSnFji9i7p7T7bmKukwrkZLxiAtehLZACB4BN1AC2YKVjee+R+0Id04Df
etRXOXm0ZNCSzT1Q+qy04Vk2zEi07ngYslpStGWcxFyGQYmWx5ssfSm8iR3q
nexSPHgYp50uDYOH6G4WoDun1ZKhCHFg78ebfPfD3vVrtz/99OAkTmuMSbv7
8YDNs/O4ZHVaGJ4c6TGeacEqFu8xCqqP8/MbLx8/G1SNQ4Q2fn6N34ziTCi3
9fPn30/+/Uc/U87TjjF1OqPNV6C6PjdJFbuBsgtr2cEt48qeeL69v8G//37v
+vX3Pvlk/vsfeMOCn9ZTdrMOMlnKzqmxr9eJidGOV50T8JY4dGfsdmXQOyIn
c776xne0o3GWkA0oOxRkzZr9ZH5x+NDPMlM/11SQRjNRPn/5/UyDpGGKjaP1
GNRBZwrP2gHqizTZPx/DXOiGOPAimMCLPn/ZBINnm88m9B0yeEwU2yZ3hsFj
idblYaf6aodbhtY45QBVdEhgvGldkelVHi/ltsPRSMJCdLIYG5eIwdO9MII1
7yrx4PGoOxlIPCfRdgweD/WI8ciDZ3g8l6V1SM/NSo67UxjPzGsnFMeL5Z2v
7r1z+fLnDx8vwKfUotVaEs/P6YLHI8U2Qm6N5N4oVrkfoKnoVWrz2K+F92Ms
13b+zBenntWvbflLo2MAiIpfh9GjBHUHg/ZqcF1/MWxUswlz/eSIjnFdebCo
PcV61s7hOoJzdVkkjXYW160Xz1+eMN5BMNZRdu5Oh2BsZe3qPZ7GYyOvXfev
DH9NJMCr+mwIwwSSPFplTptS0c7it8rg6Ve5ycWUvCMuzrwkEaTMxEeTXQtr
N9OgTrB2joGx9U8Ea2eBAfQgW2l08VfEP2c//7kjsQs6PyYp5gXOpQxemp8d
NeAdI7qLkJjksZPjuxvQrp6Yx/N37oDuQnKvdqawg0ySwMLOX7yutOguYPBo
BHM2vMSJJ9HgQPqJangdgwfFUlao0hq9xoosVC/FZ2mBxFvNFOfAPB7BPHf8
ZvbTz9fee+/a7dvzn39x7EcE8LpNYLlkI/ZGvlzivQhOtIC96L8tnNUAaXIm
TXvbIjy2i1KsseVOn9/94bsydfn338TUab5O94d1CqzDdd3j7vq0ediRrhO5
vw4iSwPVZkaAk2e/ePTonb2910uh+fOglp2k6Hs1di1Zu3oAmUC8D0SNFZiQ
RU1BrH/9grfNa2fXxdHqmzHeWKU7WUHLzCn7dWeI7vJKEWbWk0mKHTRZXQJF
JylW0MLAoruZQnf/rfjnfM929vc6y/m738vmZ8fcd9v9E1oLyG1S2Tx9+b2+
bs2F55KzVdJVXlO4gxL6buQOEoeF0QkJ9vjIsJLSqAfPj2lhHbwJLZntEBoe
KbAfYLzZAMawWulErustnrTQbtM7un1vC8HgsVYbozue71aL5frzw8O/Xb70
4b2vFy+WOGMm9fEW8GAc2h1BOvJowACxJz/n99rRCAIthdAcv2eYt+RVKYpr
OTJj28ZYQdxkkmLk/I3fmzxScq0e1yGeT3hdOOcoUxfkJvzVPlVXeMDdmWon
zNr1CPDnX67fvn3S1O+fP+PtiaCuE2TJp1fxDLN2RY1trFc8obGCV5oF15m3
ZmgXDcXCa1cW13rc9mdzJJ4Y4ct8wSfk+gy9ZpSjOJOiZe6iDdcFlJ1R0NIJ
2jnrjBcLIcF/Jf55+z/PuZ8f/ZPDTwwMXvFewuUx6r4bXVwgustXN4FKO8rg
8Z1VEaBdtUlmTw0axOAxqINe1TX7kEm0nAsjAx5iM1cED8dtOcaGnmfw4G1H
+A0yePvkyWGVVjrxnFaLn5AZuUiNYgZvOkxz/QT6+/P3//7ZpStXvnry9DUS
m1epK1TKIowXdrswPN7mAPBeguvOHe8laCreWnXeXc55Puff9b2i7ydCbtGm
Ed2R/kEHwXTFv2NyjcF/PbTDizO68vEWQL7O1rKreMykJ54vP/zq3uslz93D
w/lyMMSyO7dQ8Zayw2ysZ+16kt/zdUYRiCm7bpjCg7WWYRQKYPyGFa4/+Mgc
bw1ybjSmIRrH5yPTaww2w9pZ0Mi517JTz0rtxJ1Ad0fS+2QK3HG2kU1TZLfj
frKv3H4DIc4ATt5+/HPG8599O8fzS1jODN7MtaBVOj7L+i1J7YlfkggGL+W0
11N6Fl+FmC2+s8xabFJV2lVO3xEyTAChyVnwq3CUQ/xm8Z4fzdwYSwpIxt1p
Bm/AeOjEYx5PRi3Ku6MTr+A9oO+6Y9BuF9VXkR0uhH/v9YPJ9z9efffm9du3
Zz/9xMUlckse0npKjLN4j3ke8OYl0O6MGCbHSy282e7IDTedfs2R21mw3E7f
xiiuRkR3UPB5G1MHSC9cL+T16xjXSXYa9+MtgHydey1itvly/fnDR/9z+fIH
d+9ieiJy2bmqRx2S0dlYs5prGVXK+JNVtPP+E/YeB8Tddr25dbygVNEhsdgL
HSC0ZFQvXh3D2o3RC2vaw/OXn5Xi+SsRZGNRLDDdhVSectwl7cZylfYvhH/+
i/8KPrmN0JadxyZhERs1YwPnRl6KWOJYGvCm6lJ3K5pwleQBXjmsW6NFAM+9
l1Vdg/EB2X7uT+0xXiAl4IrSIzrD460mSzHGsg0vxHJUKcVgPF6w99/PkKW1
ag5rtdKMB91pve0ncuKN8Xj9rFRe2wm172zL4i36RK2fWNlbNYbuegInw3sW
6Ul8MoI62gDMrkAxQV8tyHAky9C8ZxTXMTYb/R4Svs4fH23xb+2YOifoSxFW
LRycFGsy485ll17t2mVX1kr9KuyH16ubd1+vbqb//EktlwBoUY1iDMYK1q43
5Rp0xy67CPKh0c7FYwPWrnqb9fBohzLEhzIh6zBeWP1AvEui48jpg5DbCqcS
D/Ocn1yiQRO7QK5jmDcpUuEFWeb0fFeCtbfbwc5Mmf0vwD/ncv6/yufsNlv3
puwX3Um4vvFwyQkSD640vBQ37llH31mcFvDYY+y3zDH1NN1yrW7h5L72I0l6
jB9VeonWYjz9covx+nHsyB5vVIyq0iLQkuiuAMJRjDcpRRUGMrPTbrxQC4P5
FrD1Qu0wMQ29LSBtUWBelJ6YBfRdjvTuP3/54Rdf/e3ypc8O7i9erpDB46mZ
5+XFGNIToI54PMnpOYT2Z2G8s2/tLJz7tKcjM5NvL/tRJJZLcd0p+Lr6mJKw
cSuxHXITM5Uzghtt61L49fdbn3x6aW/vyydP8A5KohO4LoMxJ8tQOPyGmQge
Q4xbAyg7g+tGKDuvySocGA+egWu67uxBoGAFaWc0O/CMo58dZfZ4vjNOvNDR
FPqdENqN2OOznKwuX3wKG95fAv+cunpey+c5S3W+s5/f/Y6uFwnjfHTfKb6O
1wvN7rvVcEnzNb/y652E625h55ipizBei0e3vWdZsPDUAG+/YrwB7wWMHJJ4
1oOn1JlAKzHlTA2V131FqwLtpszgWZgXOPHQj1dPMjWYzVjHpVBrAaF51cn2
r19u3rlz+dq1e0+fKplM0C8NKu06c+URujhghx5hlVFa7xTIJ0FEp0Z0jec/
F+TWgt/C85gNKpkEuC5yWrorIVVg10PlugrtCtjrLn6AdrrOCXJ3xGB3L+nX
QXDzrhbPX975ev9vl975ZDpbvFhKvq5AO+bbHaiTLjs2gfCqUJJ1MkOhvHZY
0c74SXjYnFpoN5xnldQ/cZWKW8fn3msnx/9W1s6REuwsoj1rabebAMBD1i5J
UkhNNpdlwYLla6P1aOFc+8m+bfjnvM55lu3izo8NLECfNb+vMeCpAA4TwlNz
ddmE7Jg+S0nYdXSPlDtLsHbKgyd5PGHPqPd4RV/TI9l5sK4HYQ1oMJsdf7xE
mww1dkVcjl/hAd0x+zAIl6gFjLcaDQZD9NpVwxvOtioYbx8wHnIC+L4wqVlc
t/TVjwuPNweo5px4JaMR+5cM0pt898OVd29ee++92fc/lnrIvnzKtlAe4j1J
18wBVwSoYNyhVxFIG1Ia5frcnlKN5NzPvyuK2/WYls8m9rhvFffviOjm8EAy
dfWxt89xf1jUYTVT18La4f1iV2er+fLos4P7f7t86f3Pv3A9xTxxp+7QEqAY
xrTNxNWyayhn54YRN9qUDEV5rWDt3BiIaqyCYVPvV1kb5AZjb7CmFuguSMhG
ozFON5JhKLNVyNolGM+zdoa4KwhNkCTdrDqxTJ3jWHCmRu3VTejzmLg7RT/Z
vwr++f9zk/1n58TgJf1nZ5KdU/QdLlLy/Gycq603XSMrHlN85cgwhOUGFrd+
dHXwBrBHa8wc48F6dt/weP1r3XoWRRAXp+WchST9BI9HIYtp/4UAj7c0M8j0
qKg51YaXJ2pZq1U+pbwmnoF502Hy/erJ08vXrt28c2f207+ihp5eaBvDeKfc
WCVEfNKAdlow3p+4NaJKfrYd0R3A98bf5Cm0V4nopAIrEV1QvK7w0sZfJ1m7
SI0tLzG47mj1xaPHr6/n9z76aPbzL87a6qVYx6sv21i7clg6PpAaK1i7gutw
1KoAzy9aqzZRF7ZqqMT9bsjFUbcbP7HKwaiXBpMUai7I5xR/GAM/3J/nB4m4
Ox6IuxEVLGHtoLqdz8nOzFN/PvD4E7fzrZl8Xoj0Is4PHryys7X/rFs+zDKM
5wO2yXWeojsFBSmUAUydvA3XqNLu6zqWnsHjnEUXrxgbTMhwoo9ROYujEZU2
YPBWeHDK3RmhNlJpS9piYgWgvDKehXnoEq8b6604/Tmtlvx4/Zm78yyWq88O
7r+zt3frk0/n//plIZxRPnmxK5vHEGVXpIe5VInZ2vHPKOo7OyY83fkT1Jp8
fqF0pygOz9DO1LFSXzx1MgPLiQl5BY7668q1jVfyFKBdd++crFOePtu7fv36
7duT739AXKcctmbZVW5JqK++8dDOIUAaSaJxRgqyDt0NKioMekcrh+v8MYDx
LIYsh2nvXEV3gOs4Q5E0pFCfJOfi1jzXwNk0X8e+o2DKOwYVzKm0RpMNpmD1
lOo4NleC7Pz8NNm/Iv5pf5fz2i7u/FzfeG57zAF/6/XZiS1/Fy0iJoE+Cxgv
Z/A8JBPuhSZ2TrN5jMem/QH9eOJRnMBgbrVoBpxhM+cpY9d+r1fmGM+Oikeh
0lEG2Kl9bT5KJ048R+JNDaupZxOZqJVOPKUCOz8e+5G8H0+SeMXONH+x/Pt8
caJn3b27+PU3MsAP6G5Aei0YbwEPGjayeBWUYtkni2qGx2MMXoKdEvyTc2in
O3/L5s+vEF24HZmX4Dc86o0cZeqIv41wHaI1zdRJvm5KqxX5QljmbL7+5rsr
7968+u67k2++m23f3fF19dYmBRbvRCxnV263nj/fmjGS0YBHDEfZFU2WK+DB
GGVWqUaPaFz/LtU4vKwDrFtlJ2pseSE8xVjRTB/7FdFlehDm+KL5iJOwiPR2
TVJM6yRrGBU3Rxd2zvEzcyvIDvXQ3i588mbO/7Z9novEe6YXyYzrG++esHAJ
Wch0ZwkLvvLV3SQeJwxecveVe9OWK4+HoLYULR9fUrSGMRMIE1k4OeL1R+I4
TOVGV+4k7ni37jY7XeBCVcObHGmfz4wYvAlxd8zj4ZSBaA1nRgR1uWhb+MCD
58uPJ5PXGO+Du5/Pf/k3+fFGkhc5m9dtDv8w3gjRkVYbN6VfhkFEK4+IUBuN
EFoLWsvx2+nOL3i8AM32UYhTaaw5omN0J35fX5hO1KzDzrASmM0J15VbhnGd
u1zhljw57dfffHvt1q0rN2589eyb4TbZFFw3O4LFmvXBIn/ewyoZnQDijqXY
Mb6uqsZuqAnYth6twd0Nzy5XdayL0J1DboTo7OPx0RhEHD3Id0UVpn5q8HNH
ML+I/xIj0X+ASmWIDGxxp8uWst5Z52Zb31vKQjuY6+ts/lfBJ2/m/G/npzqX
85NG7yrgvSrXSdShTAE8f4kOBbfVAbEO6/ntmOKLGLyq1fpVmBwN9H7m+Rnp
CU9IHYJWbkkbDkeFrBtgYR1FS8FhixJ54GUeb6IG9qxeijLjoVAbkniWxytT
lZNrMW1hjzcknuT9WKu1YtnAB/7x4uP9Scfjzf+FnWpHWJoWpMeIYmxLExkC
7+ktRE3N2GxX1LfD+Vu26G9X39ipOboI1yGcwwzsnLISagUhAB6SdTI04U5i
/XXrr57948q7N6/cvPnV02dzWA0xX1cDFNQxEHHdqZvG8vigbB6+DwWvUr2/
rox1QZpVrGTjRXSC6+RLIFGynvQV7N0IP6r+iGMcazeN5yCmKQjgecPSKGuX
G6Wk166f0D1Xc7KxJvsW4pNzP3/Lq86i9v655y/5WW5BO2eaDjuUqQp40gnQ
oM/C9Uz6LHtQGd0JtwMxfvZ2ju5ivtlHchY4Uhn7R5Ln8gNgzOD1g2EZJ+1o
ORzJa22Xs4BROmTwonEe6TuGeeYlFub18w7PETJtsSyyUWXe3OyphC09BTOb
N9vWlPh0NnuN8W5/+ukW460LJ8Nuq0VQFTlCeoIpsijoNDQUsXkRAmSXmlZ7
FQ7kI0OOLsWWIXKLPn+KG3dl5+qDlf83+L0Sc93GXm8C0c3tv+XB1LaZKLgu
0GFPrr17T59euXHj6rvv3nv2j9lQK9KhO0/Z0WIqAXWF6+ZgrFzZuS3SYd1r
iyRBIA1XphXXBVDQLHhdd++gqF1/zNQOxfFWcV33WkBoglsosJCJu8QU5FgI
6S0v+6e+wokTuQT2K/NpO7qbb6fsuVXo3n588mbO///bJvRZVeJY+jnZDNCS
sKgLHLKbRkuniQd7yRJsZJkWLwYF9pMJizxbYdm82vvGDIYpLIS660q/MP4W
r5u4Udp5aSK1BScUUTJl6GRUEenSzz7SiTeRTjxTNaW+i0V62sKHnAnzNvja
16davDj6dLF4Z2/v5p07k+9/3DarTaZ7od8Ffq2M02uj9YK+GMxxMY6S+zXW
2nGLXtv+qVr+OoPcPFPH2C+n6RzM68rg5LVNCs4PyLoRvg6vQJUM6sm6Yam1
zU28WN59cHj56tWT3MQ3303h8ta9YuP7CwaN/9femWg5Uhxf//0f4vsDw8Cw
GAazDoOB1tKYxcY2ZrHNDt1SD0/xdbeqMmO5NzJKUs9IPXlOnj7qUlWoVMqK
+OWNyCwq2W2q7LyX8Ir9zI7v1CpGXrKrOYXiiOocCqfatQa5MjHB/Sc2VV0x
4TpRaGdcelno3nv7KJfkFDyyw0qpCrFqt0lsSbQL6tt9JbyhO1szr1U7HfEb
S6Dc+iY58CaUwCdlHz47uEyeLX1jWUYB67BfkRkWzUrRsSdTBU+mbv0MCzx0
cmJ4oOBJpV3vECl4QQ1efiJtqTeWo9rhdRnzihExVPC8IudXSvH7+BobqODV
mCKm086EiMcq8bxoIBlPSHk1ks51+ZzM1RpVZDnsP+GJZpft9Pfzh599cffe
vXt/+tNH17mwEtnRrMnKA17TY/oeY7wlkvKSKydTjYuRHnjtlDT/bsY+eXe7
WRjy6+s5sFgXhVDn+LOuP7w897nXeM26aA6s6WkmFSv6Z91NctrpL7+/M1/c
uXv31bfemn/7rR6tDE9tNnqdScUartNQt3FitsQuUOegByhOxnOdU+cIpClP
hVU7g5TQozLVTvhPur6xvj4bD+9kQ41wjuXWJrh4ac5jG4gsTrUwVeUyODq0
uzBoZ2qfSKHdHw7t2qrdYfLJ4djf15k8cfti/uwjA3g1P+tmWEAFLzkPaHwN
7giPalyga2h9c6G3BxKfU/AcuTknMztTOl7gkeoki7pqgU9MIPsVBbHuJzee
6Gbmu+lCGsCEwP+7MjxSj4fozul4Uq8AOp6S8oajtJZSn3BhqptKTipkvNUl
1H38z3/de+215+/de/DXTz/59UyEbzb/wmp6heimqnk5Qe+QW0CkWaVOAF6K
4ow617zmvK6yEp3s51KpMyznZTpfXAczuaNet1r89/s/f/CXZ6/qPx8u/vf9
tc1aiepvzwJ1c7PCpJsSyx4/Eax5Apez81I/VPWlNT9QHWnQcp1pdr3iAcO8
7wX+8ITYD9atQr69meUpB8I6HxpirCLhMrP6XRX7BO/hhGzhPaPd4bTsWG63
VNR3/W9rkuyB88ljtp/nxgO0v9DVd+T5s5vcPUjOxgqen8TtG3iMRa4GD86f
9QreXD3GIiJAd4NfXPsNWaFRnQlgPIxz4QhUektUhgcZTyt4dWjsm/bMpkKb
juixP0c6XsnSCjVvbRiPVeJJokNRUqqFJgSD0juJefEqeRL55t9899o771yG
3Tc//EiU5K1lVR7T9FiFnmePyoEBumjUOc3V7LFnbGUoa9TKrvY0tXY7fG78
WQ3uNTs0rqrKm0fVdG6GLNDofJNEJw9kIwtZWbfp4ZcbT/711Uv37z/7/PPv
zOenP/8KRzQ2Dyu6ulK/nWqXmRU7C+vrZu6ujFU7xXXF/2haox5McaAamRok
cwtMTVijQF4fERE87OGZET6acNWuGoFJJZs84tV0TLULoqqlOxW1B+FuWWdS
bK/aPXE+2bv9Qzufx29frZFCcvdsBGHm9Qi6gwukXJTqOzPqCeTupohHDlzL
uzKgOzT6K28NKGVcUxlUBrlauRTexgVtRDyV9TgH9gXdoQI8q/VZEU8Ow0FV
jz5EMp7fwVfieRHPxCPQdDTRWdpgXu1QkidTt7AqzwflpeM6la798ee3Z/Pn
nn/+1T+/efLVv6/TtRIzVqK1V0VjZALeRbx3Kl7spcnzz++/yyfGWVp2rdjV
QyQcc135pcCxTa6DR3m9ThKdbAPX/fr7g0/++vyLL7746qt/+dvfF7+f6x5+
lYcN9LrmrFibhx1ujXOfaWX3sgc8OYdCHnXiXM1gRPkNLanFPKYpsTjPsvgJ
wLziV0MfOx6yMqU7LqUC87CmaTbTe8aBCap2EvBm5yZvBbJaInRaLGyodmp1
O0x38STZw+eTJ2t/9/aY7UO2l8l6m59dY7QLFDy/CB7P0qpCOwN+wQiLYduc
r4N3de837vQL9iQLAGAA+do1eCce2JofNGZpDe/NRziUrhtlWECWFip4MFer
UkV1HkQpyVuPz7ZYyThldDwT2kTg20TPOotwTNcqnQGnXEUE9yuo+NgtD//k
9/MPvvjbZTh+/t69dxfL059/dlG+LINmKKKdvQ2IxQMMoyC5w4agPAfuaxXi
PLklzzmgX8jD5IrV6ywL6pZKZZ1GdKxv6PmnleiW+qhCdNfDjYv5t9++8eDh
M3eeu//ue7NvvoWjD1YpYe6UzfiozE+Xep0S7ty4Kb5/3cjOnoZeWGn0KmZU
eyZpEFcO2yHqmbGGVy8x/hOwYlvKuxAzZH06hqVpaLaoiAZ2H//CrdgguU7n
s+CidqmZFCBrhp5JISI4qK4/Lj450k85cPv68WSD0hs8glZnY/3jySq/GaVu
k5+18t2IeZDT8LhpU1/nx1/1vgvGZWwcNzBeXB8yclp75pdDPrsU3uZ5FtLC
vHKdmWehxTfiS423D+guOfZXjBfqeDOXaTKJWhtizmS6tqpzYz0eDkmsKm8M
wWqOLYzRY6y/WHz3nzfef/js83f+9PbbJ1/9+3Q8jWXVwZSIROZiDDRieCPg
GTPrk7FfgHw2s5nYktfZpvKb/755xjPXME65nurL7rP889o3GmKdy+lHK5yI
e+dq1Z33P/3shZdfvnvv3nunnyx++mWuBiwXnutK55f3RdXr0OyJIBsb3LxQ
rxPOQZ2VlPq9Emh8i9Tu2tAlCXB8gAV8GkXsV6vKB+BwJXy1Rz4cLITPj+UC
vI9Z5wRyXTIna3YwMXQBkU/nZJ2U94cstysVd/l5sgfOJ4/N/rGcZ/QR4nXt
FWZ9YyQCw1q7ItO5d0tpQYGuR7pjg/xsKUmttIZusUDBc/wW78Bm0TrPg1Y5
Tgwwxc7OBxpUC+ZZgFztSINzbU0OzD0jzfhUCxgsjI4HMU+ujDczIoN+dpIn
PVa1XuZNzEWu1kl5qZkXMA1Xpbzfzj74/PMXX33l+Xv33pkvrh94saHEtbQ2
4gcjPbKS3rWsl+ecHAXth/e2ozgGb/78pS6n3k3X0cE1hx3dUY2OEd2CTpcA
edgBzC5J46uvX3/vwTN3nnvtnXdn//5GYKSqLMV6nc7DSrozXJecN+Hv8YD0
4PgOrnziHJTzPzmuM6odew6FrLVjq6CQduFeMLpbN2PB3P3bqM2DdHdOuS6j
2slEbaDa+SVQlkK12/tjKY6Xf7ZePS9zPruszvcE7NuHlA3bFysg39leh/on
nCWkiw3UDIsq5UVzJeAgi9yhdpKFuq+94ucATCl4vqlkhPN7fAF2MYw9s0hm
7M+1fe2HtQbocbG1Jl4w3odRQ1g+R5Nq5WyLWmFodLwa0eo3GgCvqHmwKk/G
2bmMuSRXK8O3ie8++i8G8LiS8t788KNnnr/z0uv3P/ji75fUZyhCmGLrq8gE
bqUXvU89KsN1Kboj9WzxlknwNqnpw4HOOW6x0lxR57QQunlGmPzdp2Vg9faV
7y2G6+Q9svzf92/P5nfu3n3h1Vce/PXTxU+/ICys65zY+8txnZbs9FT0M1n5
YPW6zCgMjuaMZOer7JS3UVhYuc7uY/Y/X481JJVXkw9zVLuF5XbjEgSA7jyh
+TE+kwKSqp1EOyNHkPVPmrVJjZkURrtbapllidY/gfNkj55PbsD+fs/wKOyb
FfBA9Z0APK/gwRo8UoAHErhg3IQe7DI792MrcldqwNssaDnuX62NC136seEw
G8svYqxEvNEjSR+Fa4adp7LspA8xgId1PIGgBsZk1TR09QHj6WNF7KgqXNHW
VgNtivVSyjh9cwjOSelIBLWUcX+5fEo9yjFeFMGhnuO1mtPrRVT+9Nbbz9x5
7vV33zv511fL388dA0hutKTHl02OZuP6LXFu1ytj8VHs3Qy/lX3sUfH5JzQ6
vR6dz7pGROfJDf6yy6riZpW6q974488P/vrZvddee/b559/8+GTxn/+a+gFW
X1csmEpUOW+iqHZlTKRr/8b7qxwSjr9kVYa4l9WdQldAqjqbGSR6bwO0u/Hr
rJQ1x2y+RsW8G0Od/kSaW9EhYNh5bnfWCgChuEC789FKo11KtYOZLzOTYiYD
LhLulmTVi1vMJ70lmym0W+o1UpozLBZcvmMFeM3KBJ+fZfLdFo3VXQTu4qTO
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
Jqao/NTCQt3FjMyeaHNdle/K8wV8Yfx1NN+BhY6RT7bbszfZ/BPKbN9b4RRt
OMPCTrJACp6gu5UdMeFBVvgvcwLFUfD9OVY57yQdVH28jvZscS3K6CpFTqQi
k32qhXOb61rEYkbiztt7xosVPBYvGpV4GvNKTspU4tWTDGde+DOEYovaaHFu
OI0SE4nCNmRsYzWPzcX45OdfPvzyyzfef3jnxRefu3v3/nsPPvjib8v/fR+Q
DyElls20e+rzXENJMLMns986q4jujCIX0J2/qu6nBOBtzf5+Nvvm23eXpy/d
v/9/zz5777XX3pnPZ19/uyi5V8KHfg4sqFLg/VPcy1ysGyW78qDYQFEH4ztV
gBFJdifuPtV05OvrxGviXuaoyhdmY41/Ay4x9mPna+0ZLvzY1s+h2IzExcfZ
4Tzy6orZmqqdBz8ZsGbnj8a1+rFkJ/NWkO6aCxfXxw3czBIot75JDrwJJfAI
7LstSAfeKHiN9Y0XjvHcCj+BiDeWK+ibKx6LueRs5p5dm/sdwZ7GJPu0stBT
hZXDnvGKJ3TZEzAGn+tPaSp4M8RpwYzazYvxXyom+BohL+IhVa3qeIOFMVaW
uGm1Dn16iPQuwifYFi2xnEO1VjUfpbApdQiSkmOSgV6upqZ+/8PDz764/+57
z71w987du6+9886DTz9d/ue/KHsr9bokOwW62QRVLbFPxkKUV2U7yP4wXlhP
kv76DxY2XeX0199P/vXvt05mL73++iXRvfDqK2999NFVNd2vv499ya6MDblu
IfpDQHSe6/R82NqrJdTJQ+buVmpW2blx1qoMFcsLe/cpX1FnxQpQxFV2nqZm
2GbswRzXNYiuOCjjuos/tOQW0FqgzrG0Thxf3AxZoEi4R8raiiOm2mmuqzFX
7r9EaxfLGH0o/HDk9vd1Jodsv+i9C52lhdIx6KVEwZNL/ejbxN8UYotQ8PQd
Hd3FG0fREvGMx8A2gTfTKy+5dy3dVR8lXgfFKuZdxWPIf3rGOzFjbUR3TDfw
Up4nOmMhiC9BMZ6fVDsGShBSZXWTOSuDeaQqr8bx+Sbii4ytBr/1TM+3LbyH
NC7MIUbZu1qf5Icf//L3v7/x8IO79+7937PPXKLIJZB8/I9/ffLjT1dPymjQ
3aE0SGuQ6Jg6p7Ou7SsJdL/fzxf/+e/7n312/8H7d1966ZLoXrp//+35/Oph
wb+ejb2OdgNDdFKvq3R3Briu9sCagXUdmMyH9VV2MzSqwoTm9Doj3Bm9Dgzr
3FtC4adimh8JSu9UnwOLhrf+CRQ258sBj8+NVdR3ovw2YD9Uh4ObVQna0yg2
CVn/9FhAd17lWLi3tDqncrLLG1u1+Hj55Cbs57nxSO3D7bAGr87laa+DZ6sO
8usCwVWO/QjLqHZkFu1avLYDtPKu9wMlC+DK8C7EKkxr/zwL4+twtQmdwaE8
pPWxphgmZDyr6Tli9Hjm6/GSjFdijdccoJpnME9X5a0L43nGyMy8QLRQ1bzR
zkbTA+FVMp7BG8Q2Nu+5+RdqetfZ219n//76veXpn95665nn7zx39+7li7dn
17D3w4/+8a+x9sUoiPEYOyqzZ77JYws8B2wMD98ccvrb2fzb7x5+/vmf//Lh
RqC7hLo3Hjx8+Nnn8+/+s9wsrN3OJsv6zAp1pv/MUa8z1aEibyih7sJOmhCz
J/ydkmlCbVNaenPmhSM6pO3rsSfwJ2fyBGwWwPixSX4P71nHy3jUnFftfGjw
Ht7HC1NrR7KxpIhIZF0h1/k4aHNeKs561a4qe0O8Pjx+OCj7h3Y+h2DfP8Ni
3D72sVC+W+iHlC1cDzd6NZLvytRydcdBBc8wHhyUxaM27yX4mE46Irk/G4HW
8SlS6oDfk1UrYn9RhSLpLnCbunZO19XYGbUGHY2CJwFPxEGaNoJ53hoWJeM5
HY9V5dkqvnRt3nxU82ZUxllLyHStot3cUZOnCK/syS3e/ubYjaz38T/+eUl3
l4z33At3n7nz3Euv3//zBx++/+lns6+/Pv3x55idpnKd3ydjv2yHvCopTn/H
tjpnSGz5+/nyf99/9M9/vrNYvv7uext17oWXX77/4P0Hf/109vW31ylXej0Z
0c1Fl7CjlZIwRX0MzpXwMyZ8fR3kOiOSs1GS1u5Ur2azYh2A1WzsePsrDdD4
n0Jog2NBXBc/iweOTA1DkmVPBncqVTuXzwVOew48MFXkmjHCRxPHdWXPrDrB
6I49a4yvbgeDckPNu3188jjt796Oxb7vY2MPfLREdQKR/pyaZHHhCdDo5NF9
iqhsc+8HIrwZCYYcqDzSiaaRYHyae6w2OKo8odu49DpUjzAPZW3Kp+iNJgwZ
LSvQ8XwrOaMTaVxHUslXo2VblVdXQibpWl+YZ9SYkrGdowo9T3r+rPy3LtSn
wW+laaqBN4b6irI3//qbB59+ev/hBy+9/vqzz9+55L17r732xoP3312efvSP
fyy++88nv/52uoLrzmU5jSlsSwdsbIs/f85vRKM7Wy1//OkS2D744ou3T2av
vfPOhuXuvPjiq2++9eZHJx988bcrde73M8Tbluh8KlbWZNLe26qsm4+k5CdN
2NkTPAk7Sz1swm+xZxtx3VgH6G9nq+C1XJDW9+SEL+qmsH9LebzhksJaF1QC
Lf0zAz/msW10iOv0XEIWS3Yzt08Q8sBbIhWLCu2inOyx8MOTsn87vsV+7fuR
AlsjxZQKePkOdmmv4AUinih1ACnaes+uLPjZmtisgic9hqzukAzJRpTa3fmB
qp5Ly2pXeMZWzbZozKLVPKbzLGLKRkLEK5HFhMg86dkQJnW889VYUBcX5gmf
38zYIhY15XmG98a8bc3YanVOniG278+HUU2GgiTyffLzL/Ovv3342WdvfXzy
2ttvv/Dyy5cIdIl8L7z6yuW/b3740YNPPvnoy38svvnu9IefPvntzFOZPH+v
s+W35M+/vnW2+uSX35b/+372768vKe7dxfL++w9f+fOb1/WHz965e/eSYN94
8PC9S3D98svFf/67/PWMs7SYAWGfTwd+U6zUNYnOQJrLw8br1wV5WDrHnIyh
pF5n7MCP0Gzm731U/1YkO4+LoW+BE2NnVt+jdAfmt9LP8hXXa+dvrbwGUY3K
d1C10++KaHXhAU+EMFtePneTCoMnycr1T0TRO8jDHjI/HK/9YznPm7BvHkG7
8Cvg6UeVxTV4bDSElklx6ndCwYvFPSLfJUeFxnfJ/ZErY9xFvKJnvEkrHls/
WWOEqcFz1ES0wUDHCxCuZUGoeT7fShmvzr+AB2LtxZ2qZDym/MiNWtPbNEt6
nkZazXKRJyhKU2fr059+mX377cf/+OeDv3765iX1vfPOvddee+7u3f/3zDOX
1PT8vXuX1HTJfn/+4C9vncwu8e/h559f7nzy1b8X3353yVrLH3/65OdfP/nt
99PfzjYXPKM0bmht+dvZ6SWw/fTz4vsfl//9fvbNt7Ovvvrw71++/+mn7y6X
b52cvPH+w1fffPPq4bwv1PN55Y03Linu7fn88kyuTuO//x0nQQwaabmePr07
nt5a/FUarPz5zC+iRiJxfh9kYOvrFNGdqf4v5Wva/9UtAzRGXSxB9DrvE3w2
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
1BpH7UfKMH9qjm26aIOOIyHEcYQFGhqnZkPUu9DPPTdxsEUdJG6CeYuAWMI4
jgJrcy1lzglRJnomwAboV1MJMEGGKSUtmS2dosXN3VceN/rrszKMl1p1hPxe
qXcZubGZEdf75PVS/XG+z5c8bLU/U/PTPYw1uM4cC0dwGUXOu5S6p3tS9ty0
4sSSdSkgG3sB0yU+G8vyKWBurFjlnq1ot8nGnvrVGG51fHza7Pd2+9pCNewK
/HTamXukhWC5YWlNP5aET7Vw2Ydx51qCghU8C3t61Xc2cJYhAHnvtTciokB5
1wSsRhRw9n0b3hU5qRYFldgndJJ89jbO4pnsbZLl4tmU0jLjE1rFN5x/xE57
oL498ZtiSH/+42v4TXPXJ7r+rKLS78N/nbDKTvSfuDfG/Up0e3B3yD2TN5fW
5Nd6e+NAVJq79vu02A8fpYmO0d0wyPVcF0t2LBvrSuxG906Ws1uGet3jT872
9kSa5MCbUAK7/RuyH9dRFAWvboErpfCJtEF9r5lLu1hZJ2ac2zjzItzfe2ll
ivpksz3O1TbH7DEZhnFBxbLyel6lPGO5odJMiaqT90nU4EXvjhYC+2w+yGr8
4i3WFexEtT73bkyJjNmy9nmNnP+mzd+ITHmIaM1c/EnX3yzanKmpCwcX8gpc
9WqxFjE9St47MhWLbupq2d/R3kWge9NbAPdvkJkFkp3Q68Sn50tW1P5UkSPZ
WJtz0YV2Fvz29xyKI42P3f7eW7f/BO0Xyd1kaRvPLFspEY9laVk1SNqngbFt
rONJBx4gGR93N/nNNxmMPOOt+fIpQ2He3BoxEbM8QBPEwUa8DqKtXFpWz8WY
qhTF78YVX/n5uXKLb35VN2RhJdrmIniFzb17ViCtbd+cCedV+10yVzhTO8eu
f+oKhz2B9a6JSl3pxvVOaSZzw/o6abAeYugO5mH5KCz4OOA9DC5aurPC3aOU
Z3NPFguysf6t5sTYoNbuuOJXt/+Y7ee5sdt/IvbZW2yexXIU8USWtoj8f/gs
rXE4UMFzr1WWVi/Grjyh3R/R3ezcukpDa2xUTqjPkSGiR6gVlHghn4nGsjkQ
87SOtzZzCZNRGL6GsTioqopDsNizwRv57VPPZNts5q57No9Kn/8210fz3kR1
btPieda6/4QsB8/zQlfWsZGROQTfevCt8XPD+9fRl4exzaeXd+2YsTWKBHva
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
mvAk3BtW/26ixU+v0M3OW9HXJ/p1dqmgM2sON1mO95lG74X3i+6HqvPAUU9T
MJ/rT/R3TUh0cN4EzsOioy6CEjvDde2cRWpWrHK22D8fVXzp9h+n/UM7n27/
0Oz7pv3SuBGWkRBP2EzRhjqejSO5IbY7Svp/CkIWZlg8YuFyqmoX6h4YtBBD
FuJqn3/Lfqb5a3VNO2S1PTFd19COZ6dp6t/U51/oORcZdXG1ESSlfXT+JqMq
X0e9a4efYI2ssV9cjQISefyLyH6o1PE6gez+sQU/2mqN19oZAXkUyyOwjEPe
0bFZsdaF5hasO9740u0fsv3dW7d/RPYX4oVZ8Vj4KKTgranHa844S1XW4UF3
wp+jXK2PDttGIh8xcVSaEjcLVBSWi9aMndtjm2e7O29ko/kIG2aFFkWJmgCz
SiCiuMyxefv1DP0KM6yNk1bKT7AjxUUXdsrIgvVP2dNS/TPZ/2et/o+VPZSB
tXQX6nWzmoptug7qdqBe185EhKudKMDTet2NLnJyaPGl2z/ST+n2j9E+HDyK
J1PbxEHg0KSaJ9cEmCHGY+Pi3SrxEsfmIguMZexYFq0Yj9F4DWZh+GMte/gY
rRO4yk6CFlI0BV/PyefqZp+tcKKoSTLYsM8Mk5XkNHb+/lhgH5IbqouLrn+L
PKN95uD8r89Bp1zhz3firgDMk0L7/DeKe0i9FExPY4ejTijOf7wHsV5H7ujx
WMl4jaeJjf4H01pzH56N/UPVrgiiE+60rjLKffLtiS/d/qHZP5bz7PZv2r5V
58p2AXjBsy2aI98g9wGzJEWyS8yrJVxH1DwZX1TUmJh7jY9KxsGQJdrvbnHC
woi1vx31ESUqdf5siyauIQtMqgHrPujYjP34/NtXY0rbpi/lekvZQj8rHtfw
kQXeArRxpzPPzyWV2U/3xIjQbpv6OnYsE+vimmFJdEa1Q/uAp0DGLvoQ/H+3
f7D2jYVdbPpjM1u6/WOx32zGL+lcg6a7VXZSbcB4E7S4rTGPstZ6ZmU0sDNQ
/0gcbMVHEtOjmAsjdYamcAT3/5pa/SbP5AmQg020g5/by2b7cmqKrg+yFrWp
KySnlFvdT8jKh8nf1z89ud3lmqcnO0mr/ze2t4lOj7O0nlaM2HucSXbeqyT9
j5fs4HJ2YrUTq9ctNdfVjW69glscX7r9x2//pgmh2z9q++bZN+rJZevqwaSC
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
Ot6D/+YVPKYLsVhvgj7nwMok0H5IMjsxVVIl82vBxXveDLPZ7XqfiK5bv6/9
EdlnmT6TtE9HFnKWhBzpCOGasRy8g5Z6JHUqbkB4Yy41BB67/+n2u/0na39f
Z9Ltd/u3w77RHIYtfkV9FRYnqxypaOvoq8l7MPpvYKOJfJmsrpH7YvbLt/2t
R7e9/Snnb69JrMXliG44h+Cqxj0k7l2c6PR4BFbTxZV1RMGeeNPdoGc4Lv/T
7Xf7N21t98/q9rv9Q7bPmqn3hs84U9FteG1nYYAZGSqGWk1vu7wtYzxICDHv
QfsTIbCISPJzfc6xTVO7sGJMnv5MJK2h7ZH+lsmBZn6pzLt5++2ng63crCLd
bz3LoT5v7xdZX+cr6ALJ7gD9Q7ff7R+O/UM7n26/2z9w+5kQg2vqyls8enq6
W8p4mo7Rs1a8DpS9PO0Y3ptz+0naaal//q1JvKcOhKoavwLw2G0gdoG2uJ8m
lWMNeC+wn6I4C3XjX851dTfPdW68M3bsOvYJbjex0vgR+Iduv9u/NfZ3b91+
t38s9kvidYl0BtnQLIwolplImlpZJcd7cctnAKGKBff0H8E+Mc8/5d/g6fas
sRzoLnvG/Maubf5qyysML/7Wv2ab7vSMIbe4d6TUbXqyuQt8BpblYYNJE0fh
H7r9bv/Q7N+Ob9Htd/uPx/7UGiGkXYyvK85d72ljJdFJSNkSy9sGq5PNIgVp
MvVltuT5ZIrKhzkq3r67/cz5F0hj/LbH68NYrkF0sn+uGhpd84kSY5+3LDd1
Duzx+oduv9s/XvvHcp7dfrd/aPYh6S1RlgpF4Ykt5IRMhg6yyhZtd+pbpGiz
TYaZY3fZx39r/zrc337cXq5/o203M0K+hiOXll5db6gbu1WPzj90+93+Xuwb
C7vY9MdmtnT73f7tsJ89DfG6zrZg2SsST8ctYEYGWF9lfzlczznbZR5jCopZ
aCovxee/L/t5as0xHriqZh9P5o1KS5ohxUQX95nSgQN1bos5sPKmuGX+odvv
9g/N/k1HwG6/27/d9tmKecMWoHhE821RnBW6ClBdxLE+I4zwoMkPU0gp0p3m
iXxlTESZjHD+3V3st+xkr098xdj86FTWVfWBiOhkj5L9x/dtT4myV4P9V+Cm
MPsf2v3b7Xf7x2u/t956e7LNzM7wNe1l1u2wQ0x6LLPG8rbqNTA+4YmiIdVA
btk925uhsn29O/Vbb50pDsiNSnPqX6Lfkp4QzI9YtHOvsuuC9UxuYqJEb731
lmzbESM7al9E2u13+7fD/gSbLrflo6o5ZMHztgs399YoeyCTu2rkhRndbbfa
nt/H8E/SQp4St80dp85/a/vbrFLSYrmxFwGQW3KNTm3hs4GWI8tl0q9mVZNk
xvZw7t9uv9u/ffZ3P7bb7/a7fWuQv8WEjqhqfaQybUdG6syzbomaB1jCTsuN
KWVCDjHBVHk1LDPjtWkf2syzXHw1trkmqCYT1dSFGVhiXPc3W6Entwe913fg
Jssd3f3b7Xf7R2T/0M6n2+/2b7F9Ex/jdfPA6v1jxJTVesu1UuGGPakyE+Vt
6Yornij867DFJJNau2PndnMzT/35b0m2oFJOrFWituMsvNbl8IxX2C0J0e06
V+KW3b/dfrd/1PYP86y6/W7/qbY/5sJcHbvU9PCMjOWYw0WiDWKDfFNkEup+
E0mP7bm7JnbT9qe1ymwoV55T5GQi3v2+YGbEaBzn/bfQ6B5DO/r7t9vv9h+7
/cxRu2R7u/1uv9vP7KmOar1rapkQ44H5jMYOQ45pczQMmRjFCVJfWv2bylFT
1bNdOG04NqNeMkUuhDfx21F1TpKbpzj1W/OZEbDaU3SSRg88/Pur2+/2n2b7
vfXW2yE0z2AV5HKaCaAsV603GrSvI4mplRlMqXwZDZBx0Q5tlwrACVeGnb+F
4cY1BNMfyKeo311vp7WaulfgLtTnuvbW2+1qkgNvQgns9rv9bn8n+6134fxE
RnrDuyEnVFqwTIgzua26Pnk+viEmiXQwMsuAUlZCM2T7BJpkfP656xM8v3XB
FbmlO9slPYfh6+efDbHFUySO/v7q9rv9p9j+vs6k2+/2u/2d7Kf3RNk3SCDj
PgneY605a6O9Ft9UJXBlEAvpZkxn205pnNjot8YXkF7/pflGLaq8ub53EP2/
2+/2u3301v8HQ4wF0Q==
    "], {{0, 828}, {842, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1: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
A+rg4SByqHK47Ig6ejqKHdc5tg4jDPMeJhlWPeyWE9UpyKnIqdbp0XDm8Ojh
JcPrh78aYTUifcTSEWdGfHP2cM513uJ8z0XXZZRLiUujyxtXB1eea5XrdTea
W7jbTLcGt9fuju4C9/Xutz0YHjEe8zyaPL56ennKPHd7dnpZeWV4rfW6xdZj
x7MXss96E7yDvWd6H/b+5OPpU+izz+dvXyffHN8dvh0jbUcKRm4Z+cTPwo/r
t8mvzZ/ln+G/0b8twDyAG1Ad8DjQMpAfuDXweZB9UHbQzqBXwc7BsuCDwR9C
fEKmhxwPxUIjQstCW8J0w5LD1oQ9DLcIF4bXhndHeERMjTgeSYiMilwaeYtj
wuFxajjdo7xGTR/VHEWNSoxaE/U42iFaFt0Yg8aMilkWcz/WOlYSWx8H4jhx
y+IexNvGF8T/MZo4On501ehnCS4J0xLOJDISJybuSHyfFJy0OOlesl2yIrkp
RStlXEpNyofU0NSK1LYxI8ZMH3MhzShNnNaQTkpPSd+a3jM2bOyKse3jPMaV
jrs53nb85PHnJhhNyJ1wZKLWRO7E/RmEjNSMHRlfuHHcam5PJidzbWY3L4S3
kveSH8hfzu8U+AkqBM+z/LIqsjqEfsJlwk5RgKhS1CUOEa8Rv86OzN6Q/SEn
LmdbTl9uau6ePHJeRt4hia4kR9Kcb5o/Ob9V6igtlbYV+BSsKOiWRcm2yhH5
eHlDoR78eL6osFP8onhU5F9UVfRxUsqk/ZN1JksmX5ziMGXBlOfF4cW/TcWn
8qY2TTOfNnvao+lB0zfNQGZkzmiaaTlz7sz2WRGzts+mzM6ZfanEuaSi5N2c
1DmNc03mzpr75JeIX2pL6aWy0lvzfOdtmI/PF89vWeC2YPWCb2X8svPlzuWV
5V8W8hae/9Xl11W/9i3KWtSy2HPx+iXEJZIlN5cGLN1eoVNRXPFkWcyyuuWs
5WXL362YuOJcpXvlhpWUlYqVbauiVzWstlq9ZPWXNaI1N6qCq/asNV67YO2H
dfx1V9cHrt+9wWRD+YbPG8Ubb2+K2FRXbVNduZm4uWjzsy0pW878xv6tZqvR
1vKtX7dJtrVtT9jeXONVU7PDeMfiWrRWUdu5c9zOK7tCdzXsdtq9aQ9zT/le
sFex98XvGb/f3Be1r2k/e//uA9YH1h5kHCyrQ+qm1HXXi+rbGtIaWg+NOtTU
6Nt48I/hf2w7bH646oj+kcVHKUfnHu07Vnys57j0eNcJ4YknTROb7p0cc/J6
8+jmllNRp86eDj998kzQmWNn/c4ePudz7tB59vn6C54X6i56XDx4yePSwRbP
lrrLXpcbrnhfaWwd2Xr0asDVE9dCr52+zrl+4UbsjdabyTdv3xp3q+02/3bH
ndw7r+8W3e29N+s+4X7ZA+0HlQ+NH1b/af/nnjbPtiOPQh9dfJz4+N4T3pOX
T+VPv7TPfUZ7Vvnc7HlNh2vH4c7wzisvxr5ofyl92dtV+pfOX2tf2b068Hfg
3xe7x3S3v5a97nuz8K3h223v3N819cT3PHyf9773Q9lHw4/bP7E/nfmc+vl5
76QvpC+rvtp/bfwW9e1+X15fn5Qr46o+BTBY0awsAN5sA4CWBr8drgBAoavP
XKqCqM+JKgL/xOpzmap4ArAtEB5fZwEQDb9R1sNqDZkKr8rP76RAgLq5Ddb+
Is9yc1XHosKTC+FjX99bEwBIjQB8lfX19a7r6/u6BYq9A8DxAvVZT1mUZ8iN
Fkq6ZDkP/Fz+BbL3dkQ=
      "], "RGB", "XYZ"], Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->{338.22734375000005`, Automatic},
  ImageSizeRaw->{842, 828},
  PlotRange->{{0, 842}, {0, 828}}]], "Text",
 CellChangeTimes->{{3.649893455874217*^9, 3.649893458437606*^9}}],

Cell["\<\
\[Alpha] - single-scattering albedo
\[CapitalSigma]t - extinction coefficient
r - radial position coordinate in medium (distance from point source at origin)
u = cos \[Theta] - direction cosine\
\>", "Text",
 CellChangeTimes->{{3.617428487341361*^9, 3.617428516514864*^9}, {
  3.62117873415422*^9, 3.621178738599084*^9}, {3.626744515152608*^9, 
  3.6267445586349487`*^9}, {3.627012891843924*^9, 3.627012912866523*^9}, {
  3.649256344957097*^9, 3.649256385822545*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Analytic solutions", "Section",
 CellChangeTimes->{{3.627013027925056*^9, 3.627013030948131*^9}}],

Cell[CellGroupData[{

Cell["Fluence: exact solution (1)", "Subsection",
 CellChangeTimes->{{3.627013036155699*^9, 3.627013036987708*^9}, {
  3.62701331063284*^9, 3.6270133130703506`*^9}, {3.649259718336639*^9, 
  3.649259719232292*^9}, {3.650001074975786*^9, 3.650001075075953*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`\[Phi]exact1", "[", 
   RowBox[{"r_", ",", "\[CapitalSigma]t_", ",", "\[Alpha]_"}], "]"}], ":=", 
  RowBox[{
   FractionBox[
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", "\[CapitalSigma]t"}], " ", "r"}], "]"}], 
    RowBox[{"2", " ", "Pi", " ", "r"}]], "+", 
   RowBox[{
    FractionBox["\[CapitalSigma]t", 
     RowBox[{"2", "Pi", " "}]], 
    RowBox[{"NIntegrate", "[", 
     RowBox[{
      FractionBox[
       RowBox[{"\[Alpha]", " ", "z", " ", 
        RowBox[{"BesselJ", "[", 
         RowBox[{"0", ",", 
          RowBox[{"r", " ", "z", " ", "\[CapitalSigma]t"}]}], "]"}]}], 
       RowBox[{"1", " ", "+", " ", 
        SuperscriptBox["z", "2"], "-", 
        RowBox[{"\[Alpha]", " ", 
         SqrtBox[
          RowBox[{"1", "+", 
           SuperscriptBox["z", "2"]}]]}]}]], ",", 
      RowBox[{"{", 
       RowBox[{"z", ",", "0", ",", "Infinity"}], "}"}], ",", 
      RowBox[{"Method", "\[Rule]", "\"\<LevinRule\>\""}]}], 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.627013295305633*^9, 3.6270133031837482`*^9}, {
   3.6492066123681793`*^9, 3.649206619804143*^9}, {3.649206663304042*^9, 
   3.649206666622551*^9}, {3.649259737788108*^9, 3.6492597406095657`*^9}, 
   3.649260383663227*^9, {3.649260911843635*^9, 3.649260916691996*^9}, 
   3.6492727254667597`*^9, {3.649894526690342*^9, 3.649894527064891*^9}, {
   3.6498945705984707`*^9, 3.649894570917386*^9}, {3.65000334336698*^9, 
   3.650003344318315*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Fluence: exact solution (2)", "Subsection",
 CellChangeTimes->{{3.627013036155699*^9, 3.627013036987708*^9}, {
  3.62701331063284*^9, 3.6270133130703506`*^9}, {3.649259718336639*^9, 
  3.649259719232292*^9}, {3.650001074975786*^9, 3.650001075075953*^9}, {
  3.6500033391328697`*^9, 3.650003339244678*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`\[Phi]exact2", "[", 
   RowBox[{"r_", ",", "\[CapitalSigma]t_", ",", "\[Alpha]_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"\[CapitalSigma]t", " ", "\[Alpha]", " ", 
    FractionBox[
     RowBox[{"BesselK", "[", 
      RowBox[{"0", ",", 
       RowBox[{"r", " ", "\[CapitalSigma]t", 
        SqrtBox[
         RowBox[{"1", "-", 
          SuperscriptBox["\[Alpha]", "2"]}]]}]}], "]"}], "Pi"]}], "+", 
   RowBox[{
    FractionBox["\[CapitalSigma]t", 
     RowBox[{"2", "Pi"}]], 
    RowBox[{"NIntegrate", "[", 
     RowBox[{
      FractionBox[
       RowBox[{"z", " ", 
        RowBox[{"BesselJ", "[", 
         RowBox[{"0", ",", 
          RowBox[{"\[CapitalSigma]t", " ", "r", " ", "z"}]}], "]"}]}], 
       RowBox[{
        SqrtBox[
         RowBox[{"1", "+", 
          SuperscriptBox["z", "2"]}]], "+", "\[Alpha]"}]], ",", 
      RowBox[{"{", 
       RowBox[{"z", ",", "0", ",", "Infinity"}], "}"}], ",", 
      RowBox[{"Method", "\[Rule]", "\"\<LevinRule\>\""}]}], 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.627013295305633*^9, 3.6270133031837482`*^9}, {
   3.6492066123681793`*^9, 3.649206619804143*^9}, {3.649206663304042*^9, 
   3.649206666622551*^9}, {3.649259737788108*^9, 3.6492597406095657`*^9}, 
   3.649260383663227*^9, {3.649260911843635*^9, 3.649260916691996*^9}, 
   3.6492727254667597`*^9, {3.649894526690342*^9, 3.649894527064891*^9}, {
   3.6498945705984707`*^9, 3.649894570917386*^9}, {3.650003378455908*^9, 
   3.650003415832753*^9}, 3.650003530791511*^9, {3.650003566038116*^9, 
   3.650003572734901*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Fluence: exact solution (3)", "Subsection",
 CellChangeTimes->{{3.627013036155699*^9, 3.627013036987708*^9}, {
  3.62701331063284*^9, 3.6270133130703506`*^9}, {3.649259718336639*^9, 
  3.649259719232292*^9}, {3.650001074975786*^9, 3.650001075075953*^9}, {
  3.6500033391328697`*^9, 3.650003339244678*^9}, {3.650003765070909*^9, 
  3.6500037652370863`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`\[Phi]exact3a", "[", 
   RowBox[{"r_", ",", "\[CapitalSigma]t_", ",", "\[Alpha]_"}], "]"}], ":=", 
  RowBox[{"NIntegrate", "[", 
   RowBox[{
    RowBox[{
     FractionBox["\[CapitalSigma]t", 
      RowBox[{"2", "Pi"}]], 
     FractionBox[
      RowBox[{"k", " ", 
       RowBox[{"BesselJ", "[", 
        RowBox[{"0", ",", 
         RowBox[{"k", " ", "\[CapitalSigma]t", " ", "r"}]}], "]"}]}], 
      RowBox[{
       SqrtBox[
        RowBox[{
         SuperscriptBox["k", "2"], "+", "1"}]], "-", "\[Alpha]"}]]}], ",", 
    RowBox[{"{", 
     RowBox[{"k", ",", "0", ",", "Infinity"}], "}"}], ",", 
    RowBox[{"Method", "\[Rule]", "\"\<LevinRule\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.627013295305633*^9, 3.6270133031837482`*^9}, {
   3.6492066123681793`*^9, 3.649206619804143*^9}, {3.649206663304042*^9, 
   3.649206666622551*^9}, {3.649259737788108*^9, 3.6492597406095657`*^9}, 
   3.649260383663227*^9, {3.649260911843635*^9, 3.649260916691996*^9}, 
   3.6492727254667597`*^9, {3.649894526690342*^9, 3.649894527064891*^9}, {
   3.6498945705984707`*^9, 3.649894570917386*^9}, {3.650003378455908*^9, 
   3.650003415832753*^9}, 3.650003530791511*^9, {3.650003566038116*^9, 
   3.650003572734901*^9}, {3.6500037678071737`*^9, 3.6500037946368732`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"besselk", "[", 
    RowBox[{"n_", ",", "x_"}], "]"}], ":=", 
   RowBox[{
    SqrtBox[
     FractionBox["2", 
      RowBox[{"Pi", " ", "x"}]]], 
    RowBox[{"BesselK", "[", 
     RowBox[{
      RowBox[{"n", "+", 
       RowBox[{"1", "/", "2"}]}], ",", "x"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`\[Phi]exact3b", "[", 
   RowBox[{"r_", ",", "\[CapitalSigma]t_", ",", "\[Alpha]_", ",", "M_"}], 
   "]"}], ":=", 
  RowBox[{
   FractionBox[
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", "\[CapitalSigma]t"}], " ", "r"}], "]"}], 
    RowBox[{"2", " ", "Pi", " ", "r"}]], "+", 
   RowBox[{
    FractionBox[
     RowBox[{"\[Alpha]", " ", "\[CapitalSigma]t"}], 
     RowBox[{"2", " ", "Pi"}]], 
    RowBox[{"BesselK", "[", 
     RowBox[{"0", ",", 
      RowBox[{"\[CapitalSigma]t", 
       SqrtBox[
        RowBox[{"1", "-", 
         SuperscriptBox["\[Alpha]", "2"]}]], "r"}]}], "]"}]}], "+", 
   RowBox[{
    FractionBox["\[CapitalSigma]t", 
     RowBox[{"2", " ", "Pi"}]], 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       FractionBox[
        RowBox[{
         SuperscriptBox["\[Alpha]", 
          RowBox[{"2", "n"}]], 
         RowBox[{"n", "!"}]}], 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"2", "n"}], ")"}], "!"}]], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"2", " ", "\[CapitalSigma]t", " ", "r"}], ")"}], "n"], 
       RowBox[{"besselk", "[", 
        RowBox[{
         RowBox[{"n", "-", "1"}], ",", 
         RowBox[{"\[CapitalSigma]t", " ", "r"}]}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "1", ",", "M"}], "}"}]}], "]"}]}]}]}]}], "Input",
 CellChangeTimes->{{3.6500039306672363`*^9, 3.650003997285787*^9}, {
  3.6500040777783127`*^9, 3.6500040820973587`*^9}, {3.71987124932053*^9, 
  3.7198712619301443`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Fluence: exact solution (4)", "Subsection",
 CellChangeTimes->{{3.7184027192928867`*^9, 3.718402724850512*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`\[Phi]exact4", "[", 
   RowBox[{"r_", ",", "\[CapitalSigma]t_", ",", "\[Alpha]_", ",", "M_"}], 
   "]"}], ":=", 
  RowBox[{
   FractionBox[
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", "\[CapitalSigma]t"}], " ", "r"}], "]"}], 
    RowBox[{"2", " ", "Pi", " ", "r"}]], "+", 
   RowBox[{
    FractionBox[
     RowBox[{"\[Alpha]", " ", "\[CapitalSigma]t"}], 
     RowBox[{"2", " ", "Pi"}]], 
    RowBox[{"BesselK", "[", 
     RowBox[{"0", ",", 
      RowBox[{"\[CapitalSigma]t", 
       SqrtBox[
        RowBox[{"1", "-", 
         SuperscriptBox["\[Alpha]", "2"]}]], "r"}]}], "]"}]}], "+", 
   RowBox[{
    FractionBox["\[CapitalSigma]t", 
     RowBox[{"2", " ", "Pi"}]], 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       FractionBox[
        RowBox[{
         SuperscriptBox["\[Alpha]", 
          RowBox[{"2", "n"}]], 
         RowBox[{"n", "!"}]}], 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"2", "n"}], ")"}], "!"}]], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"2", " ", "\[CapitalSigma]t", " ", "r"}], ")"}], "n"], 
       SqrtBox[
        FractionBox["2", 
         RowBox[{"Pi", " ", "\[CapitalSigma]t", " ", "r"}]]], 
       RowBox[{"BesselK", "[", 
        RowBox[{
         RowBox[{"n", "-", 
          RowBox[{"1", "/", "2"}]}], ",", 
         RowBox[{"\[CapitalSigma]t", " ", "r"}]}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "1", ",", "M"}], "}"}]}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.718402845523512*^9, 3.718402912438634*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classical diffusion approximation", "Subsection",
 CellChangeTimes->{{3.650007125291225*^9, 3.650007128481996*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`\[Phi]Diffusion", "[", 
   RowBox[{"r_", ",", "\[CapitalSigma]t_", ",", "\[Alpha]_"}], "]"}], ":=", 
  FractionBox[
   RowBox[{"\[CapitalSigma]t", " ", 
    RowBox[{"BesselK", "[", 
     RowBox[{"0", ",", 
      RowBox[{
       SqrtBox[
        RowBox[{"2", "-", 
         RowBox[{"2", " ", "\[Alpha]"}]}]], " ", "r", " ", 
       "\[CapitalSigma]t"}]}], "]"}]}], "\[Pi]"]}]], "Input",
 CellChangeTimes->{{3.650007131391655*^9, 3.650007161699568*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Rigorous diffusion approximation", "Subsection",
 CellChangeTimes->{{3.65000762860603*^9, 3.650007632916854*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`\[Phi]RigorousDiffusion", "[", 
   RowBox[{"r_", ",", "\[CapitalSigma]t_", ",", "\[Alpha]_"}], "]"}], ":=", 
  FractionBox[
   RowBox[{"\[CapitalSigma]t", " ", "\[Alpha]", " ", 
    RowBox[{"BesselK", "[", 
     RowBox[{"0", ",", 
      RowBox[{
       SqrtBox[
        RowBox[{"1", "-", " ", 
         SuperscriptBox["\[Alpha]", "2"]}]], " ", "r", " ", 
       "\[CapitalSigma]t"}]}], "]"}]}], "\[Pi]"]}]], "Input",
 CellChangeTimes->{{3.650007640709548*^9, 3.650007668561433*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Grosjean-style diffusion approximation", "Subsection",
 CellChangeTimes->{{3.591233786294387*^9, 3.591233792108313*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`\[Phi]Grosjean", "[", 
   RowBox[{"r_", ",", "\[CapitalSigma]t_", ",", "\[Alpha]_"}], "]"}], ":=", 
  RowBox[{
   FractionBox[
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", "r"}], " ", "\[CapitalSigma]t"}], "]"}], 
    RowBox[{"2", " ", "Pi", " ", "r"}]], "+", 
   RowBox[{
    FractionBox[
     RowBox[{"\[Alpha]", " ", "\[CapitalSigma]t"}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"2", "-", "\[Alpha]"}], ")"}], "Pi"}]], " ", 
    RowBox[{"BesselK", "[", 
     RowBox[{"0", ",", 
      RowBox[{"r", " ", "\[CapitalSigma]t", " ", 
       RowBox[{"(", 
        RowBox[{
         SqrtBox["2"], 
         FractionBox[
          SqrtBox[
           RowBox[{"1", "-", "\[Alpha]"}]], 
          SqrtBox[
           RowBox[{"2", "-", "\[Alpha]"}]]]}], ")"}]}]}], 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.649273093435965*^9, 3.649273097566102*^9}, {
   3.649273132652021*^9, 3.649273148106318*^9}, {3.649273191337154*^9, 
   3.649273193622284*^9}, {3.649273264439513*^9, 3.6492732764494343`*^9}, {
   3.6498982387618933`*^9, 3.64989824952006*^9}, {3.650001178382126*^9, 
   3.650001181010624*^9}, 3.650003309109735*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Approximate series expansion for low \[Alpha] and low r:", "Subsection",
 CellChangeTimes->{{3.719876301113772*^9, 3.719876310935204*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`\[Phi]approx1", "[", 
   RowBox[{"r_", ",", "c_"}], "]"}], ":=", 
  RowBox[{
   FractionBox[
    RowBox[{"Exp", "[", 
     RowBox[{"-", " ", "r"}], "]"}], 
    RowBox[{"2", " ", "Pi", " ", "r"}]], "+", " ", 
   RowBox[{"c", " ", 
    FractionBox[
     RowBox[{"BesselK", "[", 
      RowBox[{"0", ",", 
       RowBox[{"r", " ", 
        SqrtBox[
         RowBox[{"1", "-", 
          SuperscriptBox["c", "2"]}]]}]}], "]"}], 
     RowBox[{"2", " ", "Pi"}]]}], "-", 
   RowBox[{
    FractionBox["1", 
     RowBox[{"8", " ", "\[Pi]"}]], 
    RowBox[{"c", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", "r"}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"c", " ", "r", " ", 
        RowBox[{"(", 
         RowBox[{"4", "+", 
          RowBox[{"3", " ", "r"}]}], ")"}]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "4"}], "+", 
          RowBox[{"r", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "4"}], "+", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"-", "3"}], "+", 
                SuperscriptBox["c", "2"]}], ")"}], " ", "r"}]}], ")"}]}]}], 
         ")"}], " ", 
        RowBox[{"ArcTanh", "[", "c", "]"}]}]}], ")"}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.719876320704445*^9, 3.719876403810691*^9}, 
   3.719876489692534*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["n-th scattered fluence", "Subsection",
 CellChangeTimes->{{3.650001121889347*^9, 3.650001125936187*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`\[Phi]", "[", 
   RowBox[{"r_", ",", "\[CapitalSigma]t_", ",", "\[Alpha]_", ",", "n_"}], 
   "]"}], ":=", 
  FractionBox[
   RowBox[{
    SuperscriptBox["2", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "-", "n"}], ")"}]}]], " ", 
    SuperscriptBox["\[Alpha]", "n"], " ", 
    SuperscriptBox["r", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", "n"}], ")"}]}]], " ", 
    SuperscriptBox["\[CapitalSigma]t", 
     FractionBox[
      RowBox[{"1", "+", "n"}], "2"]], " ", 
    RowBox[{"BesselK", "[", 
     RowBox[{
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "n"}], ")"}]}], ",", 
      RowBox[{"r", " ", "\[CapitalSigma]t"}]}], "]"}]}], 
   RowBox[{"\[Pi]", " ", 
    RowBox[{"Gamma", "[", 
     FractionBox[
      RowBox[{"1", "+", "n"}], "2"], "]"}]}]]}]], "Input",
 CellChangeTimes->{{3.6500011303768053`*^9, 3.6500011838674393`*^9}, 
   3.720026915610774*^9}],

Cell["\<\
Alternate form suitable for deriving series expansions - valid for n > 0 and \
n even\
\>", "Text",
 CellChangeTimes->{{3.720026829113532*^9, 3.7200268514072247`*^9}, {
  3.720027012692597*^9, 3.720027025970048*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`\[Phi]alternate", "[", 
   RowBox[{"r_", ",", "\[Alpha]_", ",", 
    RowBox[{"n_", "?", "EvenQ"}]}], "]"}], ":=", 
  RowBox[{"Chop", "[", 
   RowBox[{
    FractionBox["1", 
     RowBox[{"32", " ", 
      RowBox[{"Gamma", "[", 
       FractionBox[
        RowBox[{"1", "+", "n"}], "2"], "]"}]}]], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"\[ImaginaryI]", " ", "\[Alpha]"}], ")"}], "n"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", 
        SqrtBox["\[Pi]"]}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"4", " ", 
          RowBox[{"HypergeometricPFQRegularized", "[", 
           RowBox[{
            RowBox[{"{", 
             FractionBox["1", "2"], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              FractionBox["3", "2"], ",", 
              RowBox[{
               FractionBox["3", "2"], "-", 
               FractionBox["n", "2"]}]}], "}"}], ",", 
            FractionBox[
             SuperscriptBox["r", "2"], "4"]}], "]"}]}], "+", 
         RowBox[{
          SuperscriptBox["r", "2"], " ", 
          RowBox[{"HypergeometricPFQRegularized", "[", 
           RowBox[{
            RowBox[{"{", 
             FractionBox["3", "2"], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              FractionBox["5", "2"], ",", 
              RowBox[{
               FractionBox["5", "2"], "-", 
               FractionBox["n", "2"]}]}], "}"}], ",", 
            FractionBox[
             SuperscriptBox["r", "2"], "4"]}], "]"}]}]}], ")"}]}], "+", 
      RowBox[{"2", " ", "r", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", " ", 
          RowBox[{"HypergeometricPFQRegularized", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"1", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              FractionBox["1", "2"], ",", "2", ",", 
              RowBox[{"2", "-", 
               FractionBox["n", "2"]}]}], "}"}], ",", 
            FractionBox[
             SuperscriptBox["r", "2"], "4"]}], "]"}]}], "+", 
         RowBox[{"HypergeometricPFQRegularized", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             FractionBox["3", "2"], ",", "2", ",", 
             RowBox[{"2", "-", 
              FractionBox["n", "2"]}]}], "}"}], ",", 
           FractionBox[
            SuperscriptBox["r", "2"], "4"]}], "]"}]}], ")"}]}]}], ")"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.720026801578019*^9, 3.720026825658155*^9}, {
  3.7200268876141033`*^9, 3.720026893720868*^9}, {3.7200269859034986`*^9, 
  3.7200269924675198`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`\[Phi]alternate", "[", 
   RowBox[{"r_", ",", "\[CapitalSigma]t_", ",", "\[Alpha]_", ",", 
    RowBox[{"n_", "?", "EvenQ"}]}], "]"}], ":=", 
  RowBox[{"\[CapitalSigma]t", " ", 
   RowBox[{"infflatlandisopointisoscatter`\[Phi]alternate", "[", 
    RowBox[{
     RowBox[{"\[CapitalSigma]t", " ", "r"}], ",", "\[Alpha]", ",", "n"}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.720027152967188*^9, 3.72002717140553*^9}}],

Cell["Approximate Gaussian preserving 0th and 2nd radial moments:", "Text",
 CellChangeTimes->{{3.720027224133655*^9, 3.720027237206531*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`\[Phi]GaussianApprox", "[", 
   RowBox[{"r_", ",", "\[CapitalSigma]t_", ",", "\[Alpha]_", ",", "n_"}], 
   "]"}], ":=", 
  RowBox[{"\[CapitalSigma]t", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[Alpha]", "n"], " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       FractionBox[
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"r", " ", "\[CapitalSigma]t"}], ")"}], "2"], 
        RowBox[{"2", "+", 
         RowBox[{"2", " ", "n"}]}]]}]]}], 
    RowBox[{
     RowBox[{"2", " ", "\[Pi]"}], "+", 
     RowBox[{"2", " ", "n", " ", "\[Pi]"}]}]]}]}]], "Input",
 CellChangeTimes->{{3.720027216396243*^9, 3.720027263943109*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Moments", "Subsection",
 CellChangeTimes->{{3.650041931458153*^9, 3.650041934948592*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`\[Phi]m", "[", 
   RowBox[{"\[CapitalSigma]t_", ",", "\[Alpha]_", ",", "m_"}], "]"}], ":=", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "-", 
      SuperscriptBox["\[Alpha]", "2"]}], ")"}], 
    RowBox[{
     RowBox[{"-", "1"}], "-", 
     FractionBox["m", "2"]}]], " ", 
   SuperscriptBox["\[CapitalSigma]t", 
    RowBox[{
     RowBox[{"-", "1"}], "-", "m"}]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      SuperscriptBox["2", "m"], " ", "\[Alpha]", " ", 
      SuperscriptBox[
       RowBox[{"Gamma", "[", 
        RowBox[{"1", "+", 
         FractionBox["m", "2"]}], "]"}], "2"]}], "+", 
     RowBox[{
      RowBox[{"Gamma", "[", 
       RowBox[{"1", "+", "m"}], "]"}], " ", 
      RowBox[{"Hypergeometric2F1", "[", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", "2"]}], ",", 
        RowBox[{"-", 
         FractionBox["m", "2"]}], ",", 
        FractionBox["1", "2"], ",", 
        SuperscriptBox["\[Alpha]", "2"]}], "]"}]}]}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.650042155560913*^9, 3.650042159202408*^9}, 
   3.650042622465407*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`\[Phi]m", "[", 
   RowBox[{"\[CapitalSigma]t_", ",", "\[Alpha]_", ",", "n_", ",", "m_"}], 
   "]"}], ":=", 
  FractionBox[
   RowBox[{
    SuperscriptBox["2", "m"], " ", 
    SuperscriptBox["\[Alpha]", "n"], " ", 
    SuperscriptBox["\[CapitalSigma]t", 
     RowBox[{
      RowBox[{"-", "1"}], "-", "m"}]], " ", 
    RowBox[{"Gamma", "[", 
     RowBox[{"1", "+", 
      FractionBox["m", "2"]}], "]"}], " ", 
    RowBox[{"Gamma", "[", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", "m", "+", "n"}], ")"}]}], "]"}]}], 
   RowBox[{"Gamma", "[", 
    FractionBox[
     RowBox[{"1", "+", "n"}], "2"], "]"}]]}]], "Input",
 CellChangeTimes->{{3.650041940750317*^9, 3.65004201148895*^9}, 
   3.650042612102111*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Angular phi integral", "Subsection",
 CellChangeTimes->{{3.6500670277374*^9, 3.650067032864195*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`Lintegral", "[", 
   RowBox[{
   "r_", ",", "u_", ",", "\[CapitalSigma]t_", ",", "\[Alpha]_", ",", 
    "\[Phi]_"}], "]"}], ":=", 
  RowBox[{
   FractionBox[
    RowBox[{"\[Alpha]", " ", "\[CapitalSigma]t"}], 
    RowBox[{"2", " ", "Pi"}]], 
   RowBox[{"NIntegrate", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Phi]", "[", 
       RowBox[{
        SqrtBox[
         RowBox[{
          SuperscriptBox["r", "2"], "+", 
          SuperscriptBox["t", "2"], "-", 
          RowBox[{"2", " ", "r", " ", "t", " ", "u"}]}]], ",", 
        "\[CapitalSigma]t", ",", "\[Alpha]"}], "]"}], 
      RowBox[{"Exp", "[", 
       RowBox[{
        RowBox[{"-", "\[CapitalSigma]t"}], " ", "t"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "Infinity"}], "}"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.650067054341926*^9, 3.650067135264304*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Angular Classical diffusion approximation", "Subsection",
 CellChangeTimes->{{3.650059971010975*^9, 3.6500599814646597`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`Ldiffusion", "[", 
   RowBox[{"r_", ",", "u_", ",", "\[CapitalSigma]t_", ",", "\[Alpha]_"}], 
   "]"}], ":=", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"2", " ", 
     SuperscriptBox["\[Pi]", "2"]}]], 
   RowBox[{"\[CapitalSigma]t", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"BesselK", "[", 
       RowBox[{"0", ",", 
        RowBox[{"r", " ", 
         SqrtBox[
          RowBox[{"2", "-", 
           RowBox[{"2", " ", "\[Alpha]"}]}]], " ", "\[CapitalSigma]t"}]}], 
       "]"}], "+", 
      RowBox[{"u", " ", 
       SqrtBox[
        RowBox[{"2", "-", 
         RowBox[{"2", " ", "\[Alpha]"}]}]], " ", 
       RowBox[{"BesselK", "[", 
        RowBox[{"1", ",", 
         RowBox[{"r", " ", 
          SqrtBox[
           RowBox[{"2", "-", 
            RowBox[{"2", " ", "\[Alpha]"}]}]], " ", "\[CapitalSigma]t"}]}], 
        "]"}]}]}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.6500599838903627`*^9, 3.650060014072959*^9}, {
   3.650060052956566*^9, 3.6500600912978354`*^9}, {3.650060130535036*^9, 
   3.650060138992127*^9}, {3.650060218218782*^9, 3.650060221467053*^9}, {
   3.650066714459609*^9, 3.650066715121737*^9}, 3.650093116722826*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["load MC data", "Section",
 CellChangeTimes->{{3.617427964847665*^9, 3.617427965662361*^9}, {
  3.6174280073412037`*^9, 3.617428007556081*^9}, {3.640936210100869*^9, 
  3.640936211771452*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`ppoints", "[", 
   RowBox[{"xs_", ",", "dr_", ",", "maxx_", ",", "\[CapitalSigma]t_"}], "]"}],
   ":=", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"dr", 
         RowBox[{"(", "i", ")"}]}], "-", 
        RowBox[{"0.5", "dr"}]}], ",", 
       RowBox[{
        RowBox[{"xs", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "/", "\[CapitalSigma]t"}]}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "xs", "]"}]}], "}"}]}], "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"1", ";;", 
     RowBox[{"-", "2"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.649259548120679*^9, 3.649259580851676*^9}, 
   3.649259648546113*^9, 3.649272737713811*^9, {3.649872151012321*^9, 
   3.649872155817502*^9}, {3.649872287579906*^9, 3.649872295382456*^9}, {
   3.649873946236698*^9, 3.649873946606134*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`ppointsu", "[", 
   RowBox[{"xs_", ",", "du_", ",", "\[CapitalSigma]t_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "1.0"}], " ", "+", 
        RowBox[{"du", 
         RowBox[{"(", "i", ")"}]}], "-", 
        RowBox[{"0.5", "du"}]}], ",", 
       RowBox[{
        SqrtBox[
         RowBox[{"1", "-", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1.0"}], " ", "+", 
             RowBox[{"du", 
              RowBox[{"(", "i", ")"}]}], "-", 
             RowBox[{"0.5", "du"}]}], ")"}], "2"]}]], 
        RowBox[{
         RowBox[{"xs", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "/", 
         RowBox[{"(", 
          RowBox[{"2", "\[CapitalSigma]t"}], ")"}]}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "xs", "]"}]}], "}"}]}], "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"1", ";;", 
     RowBox[{"-", "1"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.65005053586198*^9, 3.650050559346901*^9}, {
  3.650052337069436*^9, 3.650052338883011*^9}, {3.650054000091523*^9, 
  3.6500540027961807`*^9}, {3.6500610330520782`*^9, 3.650061039645021*^9}, {
  3.650061175369117*^9, 3.6500611770751762`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`fs", "=", 
   RowBox[{
   "FileNames", "[", 
    "\"\<code/flatland/infiniteFlatland/Isotropicpointsource/data/infflatland_\
isotropicpoint_isotropicscatter*\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.649258997497517*^9, 3.649259056909771*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"infflatlandisopointisoscatter`index", "[", "x_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"data", ",", "\[Alpha]", ",", "\[CapitalSigma]t"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"data", "=", 
       RowBox[{"Import", "[", 
        RowBox[{"x", ",", "\"\<Table\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"\[CapitalSigma]t", "=", 
       RowBox[{"data", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "13"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"\[Alpha]", "=", 
       RowBox[{"data", "[", 
        RowBox[{"[", 
         RowBox[{"2", ",", "3"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"{", 
       RowBox[{"\[Alpha]", ",", "\[CapitalSigma]t", ",", "data"}], "}"}]}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`simulations", "=", 
   RowBox[{
   "infflatlandisopointisoscatter`index", "/@", 
    "infflatlandisopointisoscatter`fs"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"infflatlandisopointisoscatter`alphas", "=", 
  RowBox[{"Union", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", 
    "infflatlandisopointisoscatter`simulations"}], 
   "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{
  3.6492592625325613`*^9, {3.6492592978251047`*^9, 3.649259344735507*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.01`", ",", "0.1`", ",", "0.3`", ",", "0.5`", ",", "0.7`", ",", "0.8`", 
   ",", "0.9`", ",", "0.95`", ",", "0.99`", ",", "0.999`"}], "}"}]], "Output",\

 CellChangeTimes->{{3.6492593340730467`*^9, 3.649259345386384*^9}, 
   3.6492728336816893`*^9, 3.649273048786715*^9, 3.649872047826997*^9, 
   3.649893114157404*^9, 3.6500036915248747`*^9, 3.6500519274937677`*^9, 
   3.650052046258376*^9, 3.6500539651569767`*^9, 3.65204425181022*^9, 
   3.652044585898918*^9, {3.720027366204904*^9, 3.720027379229904*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"infflatlandisopointisoscatter`muts", "=", 
  RowBox[{"Union", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "[", 
      RowBox[{"[", "2", "]"}], "]"}], "&"}], "/@", 
    "infflatlandisopointisoscatter`simulations"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.649259354702409*^9, 3.649259356389621*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{
  3.6492593567324333`*^9, 3.64927283372799*^9, 3.649273048831053*^9, 
   3.6498720478446417`*^9, 3.649893114193157*^9, 3.650003691549798*^9, 
   3.650051927519335*^9, 3.650052046426083*^9, 3.650053965178225*^9, 
   3.65204425196731*^9, 3.652044585906145*^9, {3.720027366288951*^9, 
   3.7200273793772297`*^9}}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`numcollorders", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"infflatlandisopointisoscatter`simulations", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "[", 
     RowBox[{"[", "3", "]"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"2", ",", "13"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`maxr", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"infflatlandisopointisoscatter`simulations", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "[", 
     RowBox[{"[", "3", "]"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"2", ",", "5"}], "]"}], "]"}]}], ";", 
  RowBox[{"infflatlandisopointisoscatter`dr", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"infflatlandisopointisoscatter`simulations", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "[", 
     RowBox[{"[", "3", "]"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"2", ",", "7"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"infflatlandisopointisoscatter`numr", "=", 
   RowBox[{"Floor", "[", 
    RowBox[{
    "infflatlandisopointisoscatter`maxr", "/", 
     "infflatlandisopointisoscatter`dr"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.649259364357733*^9, 3.649259369850224*^9}, {
  3.649259425898975*^9, 3.6492594278860903`*^9}, {3.65003919983913*^9, 
  3.650039207159321*^9}, {3.65005218250033*^9, 3.650052203385788*^9}, {
  3.650052251813343*^9, 3.65005228487663*^9}, {3.652044391350597*^9, 
  3.652044399500836*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Compare Deterministic and MC", "Section",
 CellChangeTimes->{{3.617428104753593*^9, 3.6174281129212646`*^9}, 
   3.650052258917198*^9}],

Cell[CellGroupData[{

Cell["Fluence - Exact solution (1) comparison to MC", "Subsection",
 CellChangeTimes->{{3.649259702897419*^9, 3.64925971462465*^9}, {
  3.649893943340941*^9, 3.649893948401101*^9}, {3.650003121496348*^9, 
  3.650003125748569*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"alpha", ",", "\[CapitalSigma]t"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
      "Length", "[", "infflatlandisopointisoscatter`simulations", "]"}], ">", 
      "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "data", ",", "maxr", ",", "dr", ",", "points\[Phi]", ",", 
         "plotpoints\[Phi]", ",", "logplot\[Phi]", ",", "plot\[Phi]", ",", 
         "exact1points"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"data", "=", 
         RowBox[{
          RowBox[{"SelectFirst", "[", 
           RowBox[{"infflatlandisopointisoscatter`simulations", ",", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "\[Alpha]"}], "&&", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
               "\[CapitalSigma]t"}]}], "&"}]}], "]"}], "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"maxr", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "5"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dr", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "7"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"points\[Phi]", " ", "=", " ", 
         RowBox[{"data", "[", 
          RowBox[{"[", "4", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "divide", " ", "by", " ", "\[CapitalSigma]t", " ", "to", " ", 
          "convert", " ", "collision", " ", "density", " ", "into", " ", 
          "fluence"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"plotpoints\[Phi]", "=", 
         RowBox[{"infflatlandisopointisoscatter`ppoints", "[", 
          RowBox[{
          "points\[Phi]", ",", "dr", ",", "maxr", ",", "\[CapitalSigma]t"}], 
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"exact1points", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"Quiet", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"2", " ", "Pi", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], " ", 
               RowBox[{"infflatlandisopointisoscatter`\[Phi]exact1", "[", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", "\[CapitalSigma]t", 
                 ",", "\[Alpha]"}], "]"}]}]}], "}"}], "]"}], "&"}], " ", "/@",
           "plotpoints\[Phi]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"plot\[Phi]", "=", 
         RowBox[{"Quiet", "[", 
          RowBox[{"Show", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ListPlot", "[", 
             RowBox[{"plotpoints\[Phi]", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"PointSize", "[", ".01", "]"}]}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"ListPlot", "[", 
             RowBox[{"exact1points", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"Joined", "\[Rule]", "True"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"FrameLabel", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"2", " ", "Pi", " ", "r", " ", 
                  RowBox[{"\[Phi]", "[", "r", "]"}]}], ","}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"r", ","}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]",
            "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"logplot\[Phi]", "=", 
         RowBox[{"Quiet", "[", 
          RowBox[{"Show", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ListLogPlot", "[", 
             RowBox[{"plotpoints\[Phi]", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"PointSize", "[", ".01", "]"}]}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"ListLogPlot", "[", 
             RowBox[{"exact1points", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"Joined", "\[Rule]", "True"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"FrameLabel", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"2", " ", "Pi", " ", "r", " ", 
                  RowBox[{"\[Phi]", "[", "r", "]"}]}], ","}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"r", ","}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]",
            "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{
          RowBox[{"GraphicsGrid", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{"plot\[Phi]", ",", "logplot\[Phi]"}], "}"}], "}"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "800"}]}], "]"}], ",", 
          RowBox[{"PlotLabel", "->", 
           RowBox[{
           "\"\<Exact solution (1)\\nInfinite Flatland, isotropic point \
source, isotropic scattering, fluence \[Phi][r], \[Alpha] = \>\"", "<>", 
            RowBox[{"ToString", "[", "\[Alpha]", "]"}], "<>", 
            "\"\<, \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = \>\"", "<>", 
            RowBox[{"ToString", "[", "\[CapitalSigma]t", "]"}]}]}]}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "Text", "[", 
      "\"\<Uh oh!  Couldn't find MC data.  Try to evaluate this entire \
notebook and ensure the data path is setup correctly.\>\"", "]"}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "0.95"}], "}"}], ",", 
     "infflatlandisopointisoscatter`alphas"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[CapitalSigma]t", ",", "infflatlandisopointisoscatter`muts"}], 
    "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.649259789611609*^9, 3.649259851754438*^9}, {
   3.649259907663431*^9, 3.649259992296626*^9}, {3.649260050094636*^9, 
   3.649260065849139*^9}, 3.649260129895323*^9, {3.649260309183428*^9, 
   3.6492603094557133`*^9}, {3.649260371404566*^9, 3.64926040211484*^9}, 
   3.649272745810855*^9, {3.649272859097014*^9, 3.649272862208322*^9}, {
   3.649272894311653*^9, 3.64927289769634*^9}, {3.6492730110286016`*^9, 
   3.6492730250756083`*^9}, {3.649273106353642*^9, 3.649273109077507*^9}, {
   3.649273170203189*^9, 3.649273170411021*^9}, {3.649872238500237*^9, 
   3.649872259049232*^9}, {3.649894400589272*^9, 3.6498944384501762`*^9}, {
   3.650002365346281*^9, 3.650002380352285*^9}, {3.6500024298360243`*^9, 
   3.650002446810408*^9}, {3.650002497701038*^9, 3.650002523956849*^9}, {
   3.650002571560855*^9, 3.6500026508115797`*^9}, {3.65000269281654*^9, 
   3.650002759659141*^9}, {3.6500027916908703`*^9, 3.65000282619895*^9}, {
   3.650002862772669*^9, 3.6500028906111307`*^9}, {3.650002926853812*^9, 
   3.650002948093389*^9}, {3.650002982083981*^9, 3.6500030086453667`*^9}, 
   3.650003351221335*^9, {3.652044423309552*^9, 3.6520444258771887`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`\[Alpha]$$ = 
    0.95, $CellContext`\[CapitalSigma]t$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Alpha]$$], 0.95}, {0.01, 0.1, 0.3, 0.5, 0.7, 0.8, 
      0.9, 0.95, 0.99, 0.999}}, {
      Hold[$CellContext`\[CapitalSigma]t$$], {1, 3}}}, Typeset`size$$ = {
    576., {104., 105.14907227323536`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`\[Alpha]$4728910$$ = 
    0, $CellContext`\[CapitalSigma]t$4728911$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`\[Alpha]$$ = 
        0.95, $CellContext`\[CapitalSigma]t$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$4728910$$, 0], 
        Hold[$CellContext`\[CapitalSigma]t$$, \
$CellContext`\[CapitalSigma]t$4728911$$, False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      If[Length[infflatlandisopointisoscatter`simulations] > 0, 
        Module[{$CellContext`data$, $CellContext`maxr$, $CellContext`dr$, \
$CellContext`points\[Phi]$, $CellContext`plotpoints\[Phi]$, \
$CellContext`logplot\[Phi]$, $CellContext`plot\[Phi]$, \
$CellContext`exact1points$}, $CellContext`data$ = Part[
            SelectFirst[
            infflatlandisopointisoscatter`simulations, And[
             Part[#, 1] == $CellContext`\[Alpha]$$, 
              Part[#, 2] == $CellContext`\[CapitalSigma]t$$]& ], 
            3]; $CellContext`maxr$ = 
          Part[$CellContext`data$, 2, 5]; $CellContext`dr$ = 
          Part[$CellContext`data$, 2, 7]; $CellContext`points\[Phi]$ = 
          Part[$CellContext`data$, 4]; $CellContext`plotpoints\[Phi]$ = 
          infflatlandisopointisoscatter`ppoints[$CellContext`points\[Phi]$, \
$CellContext`dr$, $CellContext`maxr$, $CellContext`\[CapitalSigma]t$$]; \
$CellContext`exact1points$ = Map[Quiet[{
              Part[#, 1], 2 Pi Part[#, 1] 
              infflatlandisopointisoscatter`\[Phi]exact1[
                
                Part[#, 
                 1], $CellContext`\[CapitalSigma]t$$, \
$CellContext`\[Alpha]$$]}]& , $CellContext`plotpoints\[Phi]$]; \
$CellContext`plot\[Phi]$ = Quiet[
            Show[
             
             ListPlot[$CellContext`plotpoints\[Phi]$, PlotRange -> All, 
              PlotStyle -> PointSize[0.01]], 
             
             ListPlot[$CellContext`exact1points$, PlotRange -> All, Joined -> 
              True], Frame -> True, 
             FrameLabel -> {{
               2 Pi $CellContext`r $CellContext`\[Phi][$CellContext`r], 
                Null}, {$CellContext`r, Null}}]]; $CellContext`logplot\[Phi]$ = 
          Quiet[
            Show[
             
             ListLogPlot[$CellContext`plotpoints\[Phi]$, PlotRange -> All, 
              PlotStyle -> PointSize[0.01]], 
             
             ListLogPlot[$CellContext`exact1points$, PlotRange -> All, Joined -> 
              True], Frame -> True, 
             FrameLabel -> {{
               2 Pi $CellContext`r $CellContext`\[Phi][$CellContext`r], 
                Null}, {$CellContext`r, Null}}]]; Show[
           
           GraphicsGrid[{{$CellContext`plot\[Phi]$, \
$CellContext`logplot\[Phi]$}}, ImageSize -> 800], PlotLabel -> 
           StringJoin[
            "Exact solution (1)\nInfinite Flatland, isotropic point source, \
isotropic scattering, fluence \[Phi][r], \[Alpha] = ", 
             ToString[$CellContext`\[Alpha]$$], 
             ", \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = ", 
             ToString[$CellContext`\[CapitalSigma]t$$]]]], 
        Text[
        "Uh oh!  Couldn't find MC data.  Try to evaluate this entire notebook \
and ensure the data path is setup correctly."]], 
      "Specifications" :> {{{$CellContext`\[Alpha]$$, 0.95}, {0.01, 0.1, 0.3, 
         0.5, 0.7, 0.8, 0.9, 0.95, 0.99, 
         0.999}}, {$CellContext`\[CapitalSigma]t$$, {1, 3}}}, "Options" :> {},
       "DefaultOptions" :> {}],
     ImageSizeCache->{612., {152., 155.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6492599960399323`*^9, {3.649260054751576*^9, 3.6492600667267723`*^9}, 
   3.649260130666471*^9, 3.6492603097120123`*^9, 3.649260404452841*^9, 
   3.649260520526636*^9, 3.649261009294073*^9, {3.6492728228080807`*^9, 
   3.649272833844741*^9}, 3.649272870547728*^9, 3.6492729014170713`*^9, {
   3.649273033207165*^9, 3.6492730488975773`*^9}, 3.649273110752254*^9, {
   3.6492731576796923`*^9, 3.6492731709316483`*^9}, 3.649893125231133*^9, 
   3.64989444074127*^9, 3.650002380670837*^9, 3.6500024551855*^9, {
   3.65000251145569*^9, 3.6500025310761137`*^9}, {3.6500026145656157`*^9, 
   3.650002659356792*^9}, {3.6500027078910933`*^9, 3.6500027600243883`*^9}, {
   3.650002803133861*^9, 3.6500028298210363`*^9}, 3.650002894229841*^9, 
   3.6500029521809187`*^9, {3.650002987365321*^9, 3.65000300904708*^9}, {
   3.650003679137001*^9, 3.650003691694615*^9}, 3.650052048527351*^9, 
   3.652044587533841*^9, 3.720027379533724*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Fluence - Exact solution (2) comparison to MC", "Subsection",
 CellChangeTimes->{{3.649259702897419*^9, 3.64925971462465*^9}, {
  3.649893943340941*^9, 3.649893948401101*^9}, {3.650003121496348*^9, 
  3.650003125748569*^9}, {3.650003433486025*^9, 3.650003433677327*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"alpha", ",", "\[CapitalSigma]t"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
      "Length", "[", "infflatlandisopointisoscatter`simulations", "]"}], ">", 
      "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "data", ",", "maxr", ",", "dr", ",", "points\[Phi]", ",", 
         "plotpoints\[Phi]", ",", "logplot\[Phi]", ",", "plot\[Phi]", ",", 
         "exact1points"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"data", "=", 
         RowBox[{
          RowBox[{"SelectFirst", "[", 
           RowBox[{"infflatlandisopointisoscatter`simulations", ",", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "\[Alpha]"}], "&&", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
               "\[CapitalSigma]t"}]}], "&"}]}], "]"}], "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"maxr", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "5"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dr", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "7"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"points\[Phi]", " ", "=", " ", 
         RowBox[{"data", "[", 
          RowBox[{"[", "4", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "divide", " ", "by", " ", "\[CapitalSigma]t", " ", "to", " ", 
          "convert", " ", "collision", " ", "density", " ", "into", " ", 
          "fluence"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"plotpoints\[Phi]", "=", 
         RowBox[{"infflatlandisopointisoscatter`ppoints", "[", 
          RowBox[{
          "points\[Phi]", ",", "dr", ",", "maxr", ",", "\[CapitalSigma]t"}], 
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"exact1points", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"Quiet", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"2", " ", "Pi", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], " ", 
               RowBox[{"infflatlandisopointisoscatter`\[Phi]exact2", "[", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", "\[CapitalSigma]t", 
                 ",", "\[Alpha]"}], "]"}]}]}], "}"}], "]"}], "&"}], " ", "/@",
           "plotpoints\[Phi]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"plot\[Phi]", "=", 
         RowBox[{"Quiet", "[", 
          RowBox[{"Show", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ListPlot", "[", 
             RowBox[{"plotpoints\[Phi]", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"PointSize", "[", ".01", "]"}]}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"ListPlot", "[", 
             RowBox[{"exact1points", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"Joined", "\[Rule]", "True"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"FrameLabel", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"2", " ", "Pi", " ", "r", " ", 
                  RowBox[{"\[Phi]", "[", "r", "]"}]}], ","}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"r", ","}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]",
            "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"logplot\[Phi]", "=", 
         RowBox[{"Quiet", "[", 
          RowBox[{"Show", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ListLogPlot", "[", 
             RowBox[{"plotpoints\[Phi]", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"PointSize", "[", ".01", "]"}]}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"ListLogPlot", "[", 
             RowBox[{"exact1points", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"Joined", "\[Rule]", "True"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"FrameLabel", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"2", " ", "Pi", " ", "r", " ", 
                  RowBox[{"\[Phi]", "[", "r", "]"}]}], ","}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"r", ","}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]",
            "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{
          RowBox[{"GraphicsGrid", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{"plot\[Phi]", ",", "logplot\[Phi]"}], "}"}], "}"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "800"}]}], "]"}], ",", 
          RowBox[{"PlotLabel", "->", 
           RowBox[{
           "\"\<Exact solution (2)\\nInfinite Flatland, isotropic point \
source, isotropic scattering, fluence \[Phi][r], \[Alpha] = \>\"", "<>", 
            RowBox[{"ToString", "[", "\[Alpha]", "]"}], "<>", 
            "\"\<, \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = \>\"", "<>", 
            RowBox[{"ToString", "[", "\[CapitalSigma]t", "]"}]}]}]}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "Text", "[", 
      "\"\<Uh oh!  Couldn't find MC data.  Try to evaluate this entire \
notebook and ensure the data path is setup correctly.\>\"", "]"}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "0.99"}], "}"}], ",", 
     "infflatlandisopointisoscatter`alphas"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[CapitalSigma]t", ",", "3"}], "}"}], ",", 
     "infflatlandisopointisoscatter`muts"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.649259789611609*^9, 3.649259851754438*^9}, {
   3.649259907663431*^9, 3.649259992296626*^9}, {3.649260050094636*^9, 
   3.649260065849139*^9}, 3.649260129895323*^9, {3.649260309183428*^9, 
   3.6492603094557133`*^9}, {3.649260371404566*^9, 3.64926040211484*^9}, 
   3.649272745810855*^9, {3.649272859097014*^9, 3.649272862208322*^9}, {
   3.649272894311653*^9, 3.64927289769634*^9}, {3.6492730110286016`*^9, 
   3.6492730250756083`*^9}, {3.649273106353642*^9, 3.649273109077507*^9}, {
   3.649273170203189*^9, 3.649273170411021*^9}, {3.649872238500237*^9, 
   3.649872259049232*^9}, {3.649894400589272*^9, 3.6498944384501762`*^9}, {
   3.650002365346281*^9, 3.650002380352285*^9}, {3.6500024298360243`*^9, 
   3.650002446810408*^9}, {3.650002497701038*^9, 3.650002523956849*^9}, {
   3.650002571560855*^9, 3.6500026508115797`*^9}, {3.65000269281654*^9, 
   3.650002759659141*^9}, {3.6500027916908703`*^9, 3.65000282619895*^9}, {
   3.650002862772669*^9, 3.6500028906111307`*^9}, {3.650002926853812*^9, 
   3.650002948093389*^9}, {3.650002982083981*^9, 3.6500030086453667`*^9}, 
   3.650003351221335*^9, {3.650003436558893*^9, 3.650003437246954*^9}, {
   3.65000349029865*^9, 3.650003490439392*^9}, {3.650003624274753*^9, 
   3.650003631867281*^9}, {3.65204443901996*^9, 3.652044441315529*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`\[Alpha]$$ = 
    0.95, $CellContext`\[CapitalSigma]t$$ = 3, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Alpha]$$], 0.99}, {0.01, 0.1, 0.3, 0.5, 0.7, 0.8, 
      0.9, 0.95, 0.99, 0.999}}, {{
       Hold[$CellContext`\[CapitalSigma]t$$], 3}, {1, 3}}}, Typeset`size$$ = {
    62., {2., 10.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`\[Alpha]$4733735$$ = 
    0, $CellContext`\[CapitalSigma]t$4733736$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`\[Alpha]$$ = 
        0.99, $CellContext`\[CapitalSigma]t$$ = 3}, 
      "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$4733735$$, 0], 
        Hold[$CellContext`\[CapitalSigma]t$$, \
$CellContext`\[CapitalSigma]t$4733736$$, False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      If[Length[infflatlandisopointisoscatter`simulations] > 0, 
        Module[{$CellContext`data$, $CellContext`maxr$, $CellContext`dr$, \
$CellContext`points\[Phi]$, $CellContext`plotpoints\[Phi]$, \
$CellContext`logplot\[Phi]$, $CellContext`plot\[Phi]$, \
$CellContext`exact1points$}, $CellContext`data$ = Part[
            SelectFirst[
            infflatlandisopointisoscatter`simulations, And[
             Part[#, 1] == $CellContext`\[Alpha]$$, 
              Part[#, 2] == $CellContext`\[CapitalSigma]t$$]& ], 
            3]; $CellContext`maxr$ = 
          Part[$CellContext`data$, 2, 5]; $CellContext`dr$ = 
          Part[$CellContext`data$, 2, 7]; $CellContext`points\[Phi]$ = 
          Part[$CellContext`data$, 4]; $CellContext`plotpoints\[Phi]$ = 
          infflatlandisopointisoscatter`ppoints[$CellContext`points\[Phi]$, \
$CellContext`dr$, $CellContext`maxr$, $CellContext`\[CapitalSigma]t$$]; \
$CellContext`exact1points$ = Map[Quiet[{
              Part[#, 1], 2 Pi Part[#, 1] 
              infflatlandisopointisoscatter`\[Phi]exact2[
                
                Part[#, 
                 1], $CellContext`\[CapitalSigma]t$$, \
$CellContext`\[Alpha]$$]}]& , $CellContext`plotpoints\[Phi]$]; \
$CellContext`plot\[Phi]$ = Quiet[
            Show[
             
             ListPlot[$CellContext`plotpoints\[Phi]$, PlotRange -> All, 
              PlotStyle -> PointSize[0.01]], 
             
             ListPlot[$CellContext`exact1points$, PlotRange -> All, Joined -> 
              True], Frame -> True, 
             FrameLabel -> {{
               2 Pi $CellContext`r $CellContext`\[Phi][$CellContext`r], 
                Null}, {$CellContext`r, Null}}]]; $CellContext`logplot\[Phi]$ = 
          Quiet[
            Show[
             
             ListLogPlot[$CellContext`plotpoints\[Phi]$, PlotRange -> All, 
              PlotStyle -> PointSize[0.01]], 
             
             ListLogPlot[$CellContext`exact1points$, PlotRange -> All, Joined -> 
              True], Frame -> True, 
             FrameLabel -> {{
               2 Pi $CellContext`r $CellContext`\[Phi][$CellContext`r], 
                Null}, {$CellContext`r, Null}}]]; Show[
           
           GraphicsGrid[{{$CellContext`plot\[Phi]$, \
$CellContext`logplot\[Phi]$}}, ImageSize -> 800], PlotLabel -> 
           StringJoin[
            "Exact solution (2)\nInfinite Flatland, isotropic point source, \
isotropic scattering, fluence \[Phi][r], \[Alpha] = ", 
             ToString[$CellContext`\[Alpha]$$], 
             ", \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = ", 
             ToString[$CellContext`\[CapitalSigma]t$$]]]], 
        Text[
        "Uh oh!  Couldn't find MC data.  Try to evaluate this entire notebook \
and ensure the data path is setup correctly."]], 
      "Specifications" :> {{{$CellContext`\[Alpha]$$, 0.99}, {0.01, 0.1, 0.3, 
         0.5, 0.7, 0.8, 0.9, 0.95, 0.99, 
         0.999}}, {{$CellContext`\[CapitalSigma]t$$, 3}, {1, 3}}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{111., {63., 69.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6492599960399323`*^9, {3.649260054751576*^9, 3.6492600667267723`*^9}, 
   3.649260130666471*^9, 3.6492603097120123`*^9, 3.649260404452841*^9, 
   3.649260520526636*^9, 3.649261009294073*^9, {3.6492728228080807`*^9, 
   3.649272833844741*^9}, 3.649272870547728*^9, 3.6492729014170713`*^9, {
   3.649273033207165*^9, 3.6492730488975773`*^9}, 3.649273110752254*^9, {
   3.6492731576796923`*^9, 3.6492731709316483`*^9}, 3.649893125231133*^9, 
   3.64989444074127*^9, 3.650002380670837*^9, 3.6500024551855*^9, {
   3.65000251145569*^9, 3.6500025310761137`*^9}, {3.6500026145656157`*^9, 
   3.650002659356792*^9}, {3.6500027078910933`*^9, 3.6500027600243883`*^9}, {
   3.650002803133861*^9, 3.6500028298210363`*^9}, 3.650002894229841*^9, 
   3.6500029521809187`*^9, {3.650002987365321*^9, 3.65000300904708*^9}, 
   3.6500034513148003`*^9, 3.650003495251237*^9, 3.650003644716861*^9, 
   3.650003695199024*^9, 3.6500520520755873`*^9, 3.652044590907926*^9, 
   3.720027383536584*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Fluence - Exact solution (3a) comparison to MC", "Subsection",
 CellChangeTimes->{{3.649259702897419*^9, 3.64925971462465*^9}, {
  3.649893943340941*^9, 3.649893948401101*^9}, {3.650003121496348*^9, 
  3.650003125748569*^9}, {3.650003433486025*^9, 3.650003433677327*^9}, {
  3.650003844094863*^9, 3.650003844782989*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"alpha", ",", "\[CapitalSigma]t"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
      "Length", "[", "infflatlandisopointisoscatter`simulations", "]"}], ">", 
      "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "data", ",", "maxr", ",", "dr", ",", "points\[Phi]", ",", 
         "plotpoints\[Phi]", ",", "logplot\[Phi]", ",", "plot\[Phi]", ",", 
         "exact1points"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"data", "=", 
         RowBox[{
          RowBox[{"SelectFirst", "[", 
           RowBox[{"infflatlandisopointisoscatter`simulations", ",", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "\[Alpha]"}], "&&", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
               "\[CapitalSigma]t"}]}], "&"}]}], "]"}], "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"maxr", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "5"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dr", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "7"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"points\[Phi]", " ", "=", " ", 
         RowBox[{"data", "[", 
          RowBox[{"[", "4", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "divide", " ", "by", " ", "\[CapitalSigma]t", " ", "to", " ", 
          "convert", " ", "collision", " ", "density", " ", "into", " ", 
          "fluence"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"plotpoints\[Phi]", "=", 
         RowBox[{"infflatlandisopointisoscatter`ppoints", "[", 
          RowBox[{
          "points\[Phi]", ",", "dr", ",", "maxr", ",", "\[CapitalSigma]t"}], 
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"exact1points", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"Quiet", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"2", " ", "Pi", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], " ", 
               RowBox[{"infflatlandisopointisoscatter`\[Phi]exact3a", "[", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", "\[CapitalSigma]t", 
                 ",", "\[Alpha]"}], "]"}]}]}], "}"}], "]"}], "&"}], " ", "/@",
           "plotpoints\[Phi]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"plot\[Phi]", "=", 
         RowBox[{"Quiet", "[", 
          RowBox[{"Show", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ListPlot", "[", 
             RowBox[{"plotpoints\[Phi]", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"PointSize", "[", ".01", "]"}]}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"ListPlot", "[", 
             RowBox[{"exact1points", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"Joined", "\[Rule]", "True"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"FrameLabel", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"2", " ", "Pi", " ", "r", " ", 
                  RowBox[{"\[Phi]", "[", "r", "]"}]}], ","}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"r", ","}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]",
            "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"logplot\[Phi]", "=", 
         RowBox[{"Quiet", "[", 
          RowBox[{"Show", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ListLogPlot", "[", 
             RowBox[{"plotpoints\[Phi]", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"PointSize", "[", ".01", "]"}]}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"ListLogPlot", "[", 
             RowBox[{"exact1points", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"Joined", "\[Rule]", "True"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"FrameLabel", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"2", " ", "Pi", " ", "r", " ", 
                  RowBox[{"\[Phi]", "[", "r", "]"}]}], ","}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"r", ","}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]",
            "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{
          RowBox[{"GraphicsGrid", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{"plot\[Phi]", ",", "logplot\[Phi]"}], "}"}], "}"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "800"}]}], "]"}], ",", 
          RowBox[{"PlotLabel", "->", 
           RowBox[{
           "\"\<Exact solution (3a)\\nInfinite Flatland, isotropic point \
source, isotropic scattering, fluence \[Phi][r], \[Alpha] = \>\"", "<>", 
            RowBox[{"ToString", "[", "\[Alpha]", "]"}], "<>", 
            "\"\<, \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = \>\"", "<>", 
            RowBox[{"ToString", "[", "\[CapitalSigma]t", "]"}]}]}]}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "Text", "[", 
      "\"\<Uh oh!  Couldn't find MC data.  Try to evaluate this entire \
notebook and ensure the data path is setup correctly.\>\"", "]"}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "0.99"}], "}"}], ",", 
     "infflatlandisopointisoscatter`alphas"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[CapitalSigma]t", ",", "3"}], "}"}], ",", 
     "infflatlandisopointisoscatter`muts"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.649259789611609*^9, 3.649259851754438*^9}, {
   3.649259907663431*^9, 3.649259992296626*^9}, {3.649260050094636*^9, 
   3.649260065849139*^9}, 3.649260129895323*^9, {3.649260309183428*^9, 
   3.6492603094557133`*^9}, {3.649260371404566*^9, 3.64926040211484*^9}, 
   3.649272745810855*^9, {3.649272859097014*^9, 3.649272862208322*^9}, {
   3.649272894311653*^9, 3.64927289769634*^9}, {3.6492730110286016`*^9, 
   3.6492730250756083`*^9}, {3.649273106353642*^9, 3.649273109077507*^9}, {
   3.649273170203189*^9, 3.649273170411021*^9}, {3.649872238500237*^9, 
   3.649872259049232*^9}, {3.649894400589272*^9, 3.6498944384501762`*^9}, {
   3.650002365346281*^9, 3.650002380352285*^9}, {3.6500024298360243`*^9, 
   3.650002446810408*^9}, {3.650002497701038*^9, 3.650002523956849*^9}, {
   3.650002571560855*^9, 3.6500026508115797`*^9}, {3.65000269281654*^9, 
   3.650002759659141*^9}, {3.6500027916908703`*^9, 3.65000282619895*^9}, {
   3.650002862772669*^9, 3.6500028906111307`*^9}, {3.650002926853812*^9, 
   3.650002948093389*^9}, {3.650002982083981*^9, 3.6500030086453667`*^9}, 
   3.650003351221335*^9, {3.650003436558893*^9, 3.650003437246954*^9}, {
   3.65000349029865*^9, 3.650003490439392*^9}, {3.650003624274753*^9, 
   3.650003631867281*^9}, {3.650003849066283*^9, 3.650003865807436*^9}, {
   3.652044446795589*^9, 3.652044448722981*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`\[Alpha]$$ = 
    0.99, $CellContext`\[CapitalSigma]t$$ = 3, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Alpha]$$], 0.99}, {0.01, 0.1, 0.3, 0.5, 0.7, 0.8, 
      0.9, 0.95, 0.99, 0.999}}, {{
       Hold[$CellContext`\[CapitalSigma]t$$], 3}, {1, 3}}}, Typeset`size$$ = {
    576., {104., 105.14907227323536`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`\[Alpha]$4736799$$ = 
    0, $CellContext`\[CapitalSigma]t$4736800$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`\[Alpha]$$ = 
        0.99, $CellContext`\[CapitalSigma]t$$ = 3}, 
      "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$4736799$$, 0], 
        Hold[$CellContext`\[CapitalSigma]t$$, \
$CellContext`\[CapitalSigma]t$4736800$$, False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      If[Length[infflatlandisopointisoscatter`simulations] > 0, 
        Module[{$CellContext`data$, $CellContext`maxr$, $CellContext`dr$, \
$CellContext`points\[Phi]$, $CellContext`plotpoints\[Phi]$, \
$CellContext`logplot\[Phi]$, $CellContext`plot\[Phi]$, \
$CellContext`exact1points$}, $CellContext`data$ = Part[
            SelectFirst[
            infflatlandisopointisoscatter`simulations, And[
             Part[#, 1] == $CellContext`\[Alpha]$$, 
              Part[#, 2] == $CellContext`\[CapitalSigma]t$$]& ], 
            3]; $CellContext`maxr$ = 
          Part[$CellContext`data$, 2, 5]; $CellContext`dr$ = 
          Part[$CellContext`data$, 2, 7]; $CellContext`points\[Phi]$ = 
          Part[$CellContext`data$, 4]; $CellContext`plotpoints\[Phi]$ = 
          infflatlandisopointisoscatter`ppoints[$CellContext`points\[Phi]$, \
$CellContext`dr$, $CellContext`maxr$, $CellContext`\[CapitalSigma]t$$]; \
$CellContext`exact1points$ = Map[Quiet[{
              Part[#, 1], 2 Pi Part[#, 1] 
              infflatlandisopointisoscatter`\[Phi]exact3a[
                
                Part[#, 
                 1], $CellContext`\[CapitalSigma]t$$, \
$CellContext`\[Alpha]$$]}]& , $CellContext`plotpoints\[Phi]$]; \
$CellContext`plot\[Phi]$ = Quiet[
            Show[
             
             ListPlot[$CellContext`plotpoints\[Phi]$, PlotRange -> All, 
              PlotStyle -> PointSize[0.01]], 
             
             ListPlot[$CellContext`exact1points$, PlotRange -> All, Joined -> 
              True], Frame -> True, 
             FrameLabel -> {{
               2 Pi $CellContext`r $CellContext`\[Phi][$CellContext`r], 
                Null}, {$CellContext`r, Null}}]]; $CellContext`logplot\[Phi]$ = 
          Quiet[
            Show[
             
             ListLogPlot[$CellContext`plotpoints\[Phi]$, PlotRange -> All, 
              PlotStyle -> PointSize[0.01]], 
             
             ListLogPlot[$CellContext`exact1points$, PlotRange -> All, Joined -> 
              True], Frame -> True, 
             FrameLabel -> {{
               2 Pi $CellContext`r $CellContext`\[Phi][$CellContext`r], 
                Null}, {$CellContext`r, Null}}]]; Show[
           
           GraphicsGrid[{{$CellContext`plot\[Phi]$, \
$CellContext`logplot\[Phi]$}}, ImageSize -> 800], PlotLabel -> 
           StringJoin[
            "Exact solution (3a)\nInfinite Flatland, isotropic point source, \
isotropic scattering, fluence \[Phi][r], \[Alpha] = ", 
             ToString[$CellContext`\[Alpha]$$], 
             ", \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = ", 
             ToString[$CellContext`\[CapitalSigma]t$$]]]], 
        Text[
        "Uh oh!  Couldn't find MC data.  Try to evaluate this entire notebook \
and ensure the data path is setup correctly."]], 
      "Specifications" :> {{{$CellContext`\[Alpha]$$, 0.99}, {0.01, 0.1, 0.3, 
         0.5, 0.7, 0.8, 0.9, 0.95, 0.99, 
         0.999}}, {{$CellContext`\[CapitalSigma]t$$, 3}, {1, 3}}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{612., {152., 155.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6492599960399323`*^9, {3.649260054751576*^9, 3.6492600667267723`*^9}, 
   3.649260130666471*^9, 3.6492603097120123`*^9, 3.649260404452841*^9, 
   3.649260520526636*^9, 3.649261009294073*^9, {3.6492728228080807`*^9, 
   3.649272833844741*^9}, 3.649272870547728*^9, 3.6492729014170713`*^9, {
   3.649273033207165*^9, 3.6492730488975773`*^9}, 3.649273110752254*^9, {
   3.6492731576796923`*^9, 3.6492731709316483`*^9}, 3.649893125231133*^9, 
   3.64989444074127*^9, 3.650002380670837*^9, 3.6500024551855*^9, {
   3.65000251145569*^9, 3.6500025310761137`*^9}, {3.6500026145656157`*^9, 
   3.650002659356792*^9}, {3.6500027078910933`*^9, 3.6500027600243883`*^9}, {
   3.650002803133861*^9, 3.6500028298210363`*^9}, 3.650002894229841*^9, 
   3.6500029521809187`*^9, {3.650002987365321*^9, 3.65000300904708*^9}, 
   3.6500034513148003`*^9, 3.650003495251237*^9, 3.650003644716861*^9, 
   3.650003695199024*^9, {3.650003856519648*^9, 3.650003874259009*^9}, 
   3.6500520582968187`*^9, 3.652044597155188*^9, 3.720027390556656*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Fluence - Exact solution (3b) comparison to MC", "Subsection",
 CellChangeTimes->{{3.649259702897419*^9, 3.64925971462465*^9}, {
  3.649893943340941*^9, 3.649893948401101*^9}, {3.650003121496348*^9, 
  3.650003125748569*^9}, {3.650003433486025*^9, 3.650003433677327*^9}, {
  3.650003844094863*^9, 3.650003844782989*^9}, {3.650004031499075*^9, 
  3.650004031593492*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"alpha", ",", "\[CapitalSigma]t"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
      "Length", "[", "infflatlandisopointisoscatter`simulations", "]"}], ">", 
      "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "data", ",", "maxr", ",", "dr", ",", "points\[Phi]", ",", 
         "plotpoints\[Phi]", ",", "logplot\[Phi]", ",", "plot\[Phi]", ",", 
         "exact1points"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"data", "=", 
         RowBox[{
          RowBox[{"SelectFirst", "[", 
           RowBox[{"infflatlandisopointisoscatter`simulations", ",", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "\[Alpha]"}], "&&", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
               "\[CapitalSigma]t"}]}], "&"}]}], "]"}], "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"maxr", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "5"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dr", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "7"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"points\[Phi]", " ", "=", " ", 
         RowBox[{"data", "[", 
          RowBox[{"[", "4", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "divide", " ", "by", " ", "\[CapitalSigma]t", " ", "to", " ", 
          "convert", " ", "collision", " ", "density", " ", "into", " ", 
          "fluence"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"plotpoints\[Phi]", "=", 
         RowBox[{"infflatlandisopointisoscatter`ppoints", "[", 
          RowBox[{
          "points\[Phi]", ",", "dr", ",", "maxr", ",", "\[CapitalSigma]t"}], 
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"exact1points", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"Quiet", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{"2", " ", "Pi", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], " ", 
               RowBox[{"infflatlandisopointisoscatter`\[Phi]exact3b", "[", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", "\[CapitalSigma]t", 
                 ",", "\[Alpha]", ",", "M"}], "]"}]}]}], "}"}], "]"}], "&"}], 
          " ", "/@", "plotpoints\[Phi]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"plot\[Phi]", "=", 
         RowBox[{"Quiet", "[", 
          RowBox[{"Show", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ListPlot", "[", 
             RowBox[{"plotpoints\[Phi]", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"PointSize", "[", ".01", "]"}]}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"ListPlot", "[", 
             RowBox[{"exact1points", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"Joined", "\[Rule]", "True"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"FrameLabel", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"2", " ", "Pi", " ", "r", " ", 
                  RowBox[{"\[Phi]", "[", "r", "]"}]}], ","}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"r", ","}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]",
            "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"logplot\[Phi]", "=", 
         RowBox[{"Quiet", "[", 
          RowBox[{"Show", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ListLogPlot", "[", 
             RowBox[{"plotpoints\[Phi]", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"PointSize", "[", ".01", "]"}]}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"ListLogPlot", "[", 
             RowBox[{"exact1points", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"Joined", "\[Rule]", "True"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"FrameLabel", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"2", " ", "Pi", " ", "r", " ", 
                  RowBox[{"\[Phi]", "[", "r", "]"}]}], ","}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"r", ","}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]",
            "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{
          RowBox[{"GraphicsGrid", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{"plot\[Phi]", ",", "logplot\[Phi]"}], "}"}], "}"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "800"}]}], "]"}], ",", 
          RowBox[{"PlotLabel", "->", 
           RowBox[{
           "\"\<Exact solution (3b)\\nInfinite Flatland, isotropic point \
source, isotropic scattering, fluence \[Phi][r], \[Alpha] = \>\"", "<>", 
            RowBox[{"ToString", "[", "\[Alpha]", "]"}], "<>", 
            "\"\<, \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = \>\"", "<>", 
            RowBox[{"ToString", "[", "\[CapitalSigma]t", "]"}]}]}]}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "Text", "[", 
      "\"\<Uh oh!  Couldn't find MC data.  Try to evaluate this entire \
notebook and ensure the data path is setup correctly.\>\"", "]"}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "0.7"}], "}"}], ",", 
     "infflatlandisopointisoscatter`alphas"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[CapitalSigma]t", ",", "3"}], "}"}], ",", 
     "infflatlandisopointisoscatter`muts"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"M", ",", "10"}], "}"}], ",", 
     RowBox[{"Range", "[", "20", "]"}]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.649259789611609*^9, 3.649259851754438*^9}, {
   3.649259907663431*^9, 3.649259992296626*^9}, {3.649260050094636*^9, 
   3.649260065849139*^9}, 3.649260129895323*^9, {3.649260309183428*^9, 
   3.6492603094557133`*^9}, {3.649260371404566*^9, 3.64926040211484*^9}, 
   3.649272745810855*^9, {3.649272859097014*^9, 3.649272862208322*^9}, {
   3.649272894311653*^9, 3.64927289769634*^9}, {3.6492730110286016`*^9, 
   3.6492730250756083`*^9}, {3.649273106353642*^9, 3.649273109077507*^9}, {
   3.649273170203189*^9, 3.649273170411021*^9}, {3.649872238500237*^9, 
   3.649872259049232*^9}, {3.649894400589272*^9, 3.6498944384501762`*^9}, {
   3.650002365346281*^9, 3.650002380352285*^9}, {3.6500024298360243`*^9, 
   3.650002446810408*^9}, {3.650002497701038*^9, 3.650002523956849*^9}, {
   3.650002571560855*^9, 3.6500026508115797`*^9}, {3.65000269281654*^9, 
   3.650002759659141*^9}, {3.6500027916908703`*^9, 3.65000282619895*^9}, {
   3.650002862772669*^9, 3.6500028906111307`*^9}, {3.650002926853812*^9, 
   3.650002948093389*^9}, {3.650002982083981*^9, 3.6500030086453667`*^9}, 
   3.650003351221335*^9, {3.650003436558893*^9, 3.650003437246954*^9}, {
   3.65000349029865*^9, 3.650003490439392*^9}, {3.650003624274753*^9, 
   3.650003631867281*^9}, {3.650003849066283*^9, 3.650003865807436*^9}, {
   3.650004036444206*^9, 3.6500040556293783`*^9}, {3.650004147254513*^9, 
   3.650004151163246*^9}, {3.6520444552671747`*^9, 3.652044456818183*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`M$$ = 10, $CellContext`\[Alpha]$$ = 
    0.7, $CellContext`\[CapitalSigma]t$$ = 3, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Alpha]$$], 0.7}, {0.01, 0.1, 0.3, 0.5, 0.7, 0.8, 
      0.9, 0.95, 0.99, 0.999}}, {{
       Hold[$CellContext`\[CapitalSigma]t$$], 3}, {1, 3}}, {{
       Hold[$CellContext`M$$], 10}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 
      13, 14, 15, 16, 17, 18, 19, 20}}}, Typeset`size$$ = {
    800., {146., 150.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`\[Alpha]$4741303$$ = 
    0, $CellContext`\[CapitalSigma]t$4741304$$ = 
    False, $CellContext`M$4741305$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`M$$ = 10, $CellContext`\[Alpha]$$ = 
        0.7, $CellContext`\[CapitalSigma]t$$ = 3}, "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$4741303$$, 0], 
        Hold[$CellContext`\[CapitalSigma]t$$, \
$CellContext`\[CapitalSigma]t$4741304$$, False], 
        Hold[$CellContext`M$$, $CellContext`M$4741305$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      If[Length[infflatlandisopointisoscatter`simulations] > 0, 
        Module[{$CellContext`data$, $CellContext`maxr$, $CellContext`dr$, \
$CellContext`points\[Phi]$, $CellContext`plotpoints\[Phi]$, \
$CellContext`logplot\[Phi]$, $CellContext`plot\[Phi]$, \
$CellContext`exact1points$}, $CellContext`data$ = Part[
            SelectFirst[
            infflatlandisopointisoscatter`simulations, And[
             Part[#, 1] == $CellContext`\[Alpha]$$, 
              Part[#, 2] == $CellContext`\[CapitalSigma]t$$]& ], 
            3]; $CellContext`maxr$ = 
          Part[$CellContext`data$, 2, 5]; $CellContext`dr$ = 
          Part[$CellContext`data$, 2, 7]; $CellContext`points\[Phi]$ = 
          Part[$CellContext`data$, 4]; $CellContext`plotpoints\[Phi]$ = 
          infflatlandisopointisoscatter`ppoints[$CellContext`points\[Phi]$, \
$CellContext`dr$, $CellContext`maxr$, $CellContext`\[CapitalSigma]t$$]; \
$CellContext`exact1points$ = Map[Quiet[{
              Part[#, 1], 2 Pi Part[#, 1] 
              infflatlandisopointisoscatter`\[Phi]exact3b[
                
                Part[#, 
                 1], $CellContext`\[CapitalSigma]t$$, \
$CellContext`\[Alpha]$$, $CellContext`M$$]}]& , \
$CellContext`plotpoints\[Phi]$]; $CellContext`plot\[Phi]$ = Quiet[
            Show[
             
             ListPlot[$CellContext`plotpoints\[Phi]$, PlotRange -> All, 
              PlotStyle -> PointSize[0.01]], 
             
             ListPlot[$CellContext`exact1points$, PlotRange -> All, Joined -> 
              True], Frame -> True, 
             FrameLabel -> {{
               2 Pi $CellContext`r $CellContext`\[Phi][$CellContext`r], 
                Null}, {$CellContext`r, Null}}]]; $CellContext`logplot\[Phi]$ = 
          Quiet[
            Show[
             
             ListLogPlot[$CellContext`plotpoints\[Phi]$, PlotRange -> All, 
              PlotStyle -> PointSize[0.01]], 
             
             ListLogPlot[$CellContext`exact1points$, PlotRange -> All, Joined -> 
              True], Frame -> True, 
             FrameLabel -> {{
               2 Pi $CellContext`r $CellContext`\[Phi][$CellContext`r], 
                Null}, {$CellContext`r, Null}}]]; Show[
           
           GraphicsGrid[{{$CellContext`plot\[Phi]$, \
$CellContext`logplot\[Phi]$}}, ImageSize -> 800], PlotLabel -> 
           StringJoin[
            "Exact solution (3b)\nInfinite Flatland, isotropic point source, \
isotropic scattering, fluence \[Phi][r], \[Alpha] = ", 
             ToString[$CellContext`\[Alpha]$$], 
             ", \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = ", 
             ToString[$CellContext`\[CapitalSigma]t$$]]]], 
        Text[
        "Uh oh!  Couldn't find MC data.  Try to evaluate this entire notebook \
and ensure the data path is setup correctly."]], 
      "Specifications" :> {{{$CellContext`\[Alpha]$$, 0.7}, {0.01, 0.1, 0.3, 
         0.5, 0.7, 0.8, 0.9, 0.95, 0.99, 
         0.999}}, {{$CellContext`\[CapitalSigma]t$$, 3}, {1, 
         3}}, {{$CellContext`M$$, 10}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
          13, 14, 15, 16, 17, 18, 19, 20}}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{845., {216., 222.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6492599960399323`*^9, {3.649260054751576*^9, 3.6492600667267723`*^9}, 
   3.649260130666471*^9, 3.6492603097120123`*^9, 3.649260404452841*^9, 
   3.649260520526636*^9, 3.649261009294073*^9, {3.6492728228080807`*^9, 
   3.649272833844741*^9}, 3.649272870547728*^9, 3.6492729014170713`*^9, {
   3.649273033207165*^9, 3.6492730488975773`*^9}, 3.649273110752254*^9, {
   3.6492731576796923`*^9, 3.6492731709316483`*^9}, 3.649893125231133*^9, 
   3.64989444074127*^9, 3.650002380670837*^9, 3.6500024551855*^9, {
   3.65000251145569*^9, 3.6500025310761137`*^9}, {3.6500026145656157`*^9, 
   3.650002659356792*^9}, {3.6500027078910933`*^9, 3.6500027600243883`*^9}, {
   3.650002803133861*^9, 3.6500028298210363`*^9}, 3.650002894229841*^9, 
   3.6500029521809187`*^9, {3.650002987365321*^9, 3.65000300904708*^9}, 
   3.6500034513148003`*^9, 3.650003495251237*^9, 3.650003644716861*^9, 
   3.650003695199024*^9, {3.650003856519648*^9, 3.650003874259009*^9}, 
   3.6500040565317173`*^9, 3.650004151733107*^9, 3.650052060997398*^9, 
   3.652044600054125*^9, 3.720027393332451*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Fluence - Diffusion approximations (Classical and Grosjean) comparison to MC\
\>", "Subsection",
 CellChangeTimes->{{3.649259702897419*^9, 3.64925971462465*^9}, {
  3.649893943340941*^9, 3.649893948401101*^9}, {3.650003121496348*^9, 
  3.650003148370801*^9}, {3.650007172824812*^9, 3.6500071827023907`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"alpha", ",", "\[CapitalSigma]t"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
      "Length", "[", "infflatlandisopointisoscatter`simulations", "]"}], ">", 
      "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "data", ",", "maxr", ",", "dr", ",", "points\[Phi]", ",", 
         "plotpoints\[Phi]", ",", "logplot\[Phi]", ",", "plot\[Phi]", ",", 
         "exact1points"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"data", "=", 
         RowBox[{
          RowBox[{"SelectFirst", "[", 
           RowBox[{"infflatlandisopointisoscatter`simulations", ",", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "\[Alpha]"}], "&&", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
               "\[CapitalSigma]t"}]}], "&"}]}], "]"}], "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"maxr", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "5"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dr", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "7"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"points\[Phi]", " ", "=", " ", 
         RowBox[{"data", "[", 
          RowBox[{"[", "4", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "divide", " ", "by", " ", "\[CapitalSigma]t", " ", "to", " ", 
          "convert", " ", "collision", " ", "density", " ", "into", " ", 
          "fluence"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"plotpoints\[Phi]", "=", 
         RowBox[{"infflatlandisopointisoscatter`ppoints", "[", 
          RowBox[{
          "points\[Phi]", ",", "dr", ",", "maxr", ",", "\[CapitalSigma]t"}], 
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"plot\[Phi]", "=", 
         RowBox[{"Quiet", "[", 
          RowBox[{"Show", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ListPlot", "[", 
             RowBox[{"plotpoints\[Phi]", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"PointSize", "[", ".01", "]"}]}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Plot", "[", 
             RowBox[{
              RowBox[{"2", " ", "Pi", " ", "r", " ", 
               RowBox[{"infflatlandisopointisoscatter`\[Phi]Grosjean", "[", 
                RowBox[{"r", ",", "\[CapitalSigma]t", ",", "\[Alpha]"}], 
                "]"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"r", ",", "0", ",", "maxr"}], "}"}], ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Plot", "[", 
             RowBox[{
              RowBox[{"2", " ", "Pi", " ", "r", " ", 
               RowBox[{"infflatlandisopointisoscatter`\[Phi]Diffusion", "[", 
                RowBox[{"r", ",", "\[CapitalSigma]t", ",", "\[Alpha]"}], 
                "]"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"r", ",", "0", ",", "maxr"}], "}"}], ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", "Dashed"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"FrameLabel", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"2", " ", "Pi", " ", "r", " ", 
                  RowBox[{"\[Phi]", "[", "r", "]"}]}], ","}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"r", ","}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]",
            "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"logplot\[Phi]", "=", 
         RowBox[{"Quiet", "[", 
          RowBox[{"Show", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ListLogPlot", "[", 
             RowBox[{"plotpoints\[Phi]", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"PointSize", "[", ".01", "]"}]}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"LogPlot", "[", 
             RowBox[{
              RowBox[{"2", " ", "Pi", " ", "r", " ", 
               RowBox[{"infflatlandisopointisoscatter`\[Phi]Grosjean", "[", 
                RowBox[{"r", ",", "\[CapitalSigma]t", ",", "\[Alpha]"}], 
                "]"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"r", ",", "0", ",", "maxr"}], "}"}], ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"LogPlot", "[", 
             RowBox[{
              RowBox[{"2", " ", "Pi", " ", "r", " ", 
               RowBox[{"infflatlandisopointisoscatter`\[Phi]Diffusion", "[", 
                RowBox[{"r", ",", "\[CapitalSigma]t", ",", "\[Alpha]"}], 
                "]"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"r", ",", "0", ",", "maxr"}], "}"}], ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", "Dashed"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"FrameLabel", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"2", " ", "Pi", " ", "r", " ", 
                  RowBox[{"\[Phi]", "[", "r", "]"}]}], ","}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"r", ","}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]",
            "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{
          RowBox[{"GraphicsGrid", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{"plot\[Phi]", ",", "logplot\[Phi]"}], "}"}], "}"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "1000"}]}], "]"}], ",", 
          RowBox[{"PlotLabel", "->", 
           RowBox[{
           "\"\<Classical (dashed) and Grosjean Modified (thin) Diffusion \
Approximation\\nInfinite Flatland, isotropic point source, isotropic \
scattering, fluence \[Phi][r], \[Alpha] = \>\"", "<>", 
            RowBox[{"ToString", "[", "\[Alpha]", "]"}], "<>", 
            "\"\<, \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = \>\"", "<>", 
            RowBox[{"ToString", "[", "\[CapitalSigma]t", "]"}]}]}]}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "Text", "[", 
      "\"\<Uh oh!  Couldn't find MC data.  Try to evaluate this entire \
notebook and ensure the data path is setup correctly.\>\"", "]"}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "0.5"}], "}"}], ",", 
     "infflatlandisopointisoscatter`alphas"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[CapitalSigma]t", ",", "infflatlandisopointisoscatter`muts"}], 
    "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.649259789611609*^9, 3.649259851754438*^9}, {
   3.649259907663431*^9, 3.649259992296626*^9}, {3.649260050094636*^9, 
   3.649260065849139*^9}, 3.649260129895323*^9, {3.649260309183428*^9, 
   3.6492603094557133`*^9}, {3.649260371404566*^9, 3.64926040211484*^9}, 
   3.649272745810855*^9, {3.649272859097014*^9, 3.649272862208322*^9}, {
   3.649272894311653*^9, 3.64927289769634*^9}, {3.6492730110286016`*^9, 
   3.6492730250756083`*^9}, {3.649273106353642*^9, 3.649273109077507*^9}, {
   3.649273170203189*^9, 3.649273170411021*^9}, {3.649872238500237*^9, 
   3.649872259049232*^9}, {3.649894400589272*^9, 3.6498944384501762`*^9}, {
   3.650002365346281*^9, 3.650002380352285*^9}, {3.6500024298360243`*^9, 
   3.650002446810408*^9}, {3.650002497701038*^9, 3.650002523956849*^9}, {
   3.650002571560855*^9, 3.6500026508115797`*^9}, {3.65000269281654*^9, 
   3.650002759659141*^9}, {3.6500027916908703`*^9, 3.65000282619895*^9}, {
   3.650002862772669*^9, 3.6500028906111307`*^9}, {3.650002926853812*^9, 
   3.650002948093389*^9}, {3.650002982083981*^9, 3.6500030086453667`*^9}, {
   3.6500031585408278`*^9, 3.65000322873953*^9}, {3.650003318269821*^9, 
   3.650003320052899*^9}, {3.6500071928508997`*^9, 3.65000722830888*^9}, {
   3.650007275595155*^9, 3.650007289546698*^9}, 3.65000735303034*^9, {
   3.650007385628372*^9, 3.650007418967657*^9}, {3.652044460658711*^9, 
   3.652044462242304*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`\[Alpha]$$ = 
    0.5, $CellContext`\[CapitalSigma]t$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Alpha]$$], 0.5}, {0.01, 0.1, 0.3, 0.5, 0.7, 0.8, 
      0.9, 0.95, 0.99, 0.999}}, {
      Hold[$CellContext`\[CapitalSigma]t$$], {1, 3}}}, Typeset`size$$ = {
    720., {127., 129.30072022435672`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`\[Alpha]$4742322$$ = 
    0, $CellContext`\[CapitalSigma]t$4742323$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`\[Alpha]$$ = 
        0.5, $CellContext`\[CapitalSigma]t$$ = 1}, "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$4742322$$, 0], 
        Hold[$CellContext`\[CapitalSigma]t$$, \
$CellContext`\[CapitalSigma]t$4742323$$, False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      If[Length[infflatlandisopointisoscatter`simulations] > 0, 
        Module[{$CellContext`data$, $CellContext`maxr$, $CellContext`dr$, \
$CellContext`points\[Phi]$, $CellContext`plotpoints\[Phi]$, \
$CellContext`logplot\[Phi]$, $CellContext`plot\[Phi]$, \
$CellContext`exact1points$}, $CellContext`data$ = Part[
            SelectFirst[
            infflatlandisopointisoscatter`simulations, And[
             Part[#, 1] == $CellContext`\[Alpha]$$, 
              Part[#, 2] == $CellContext`\[CapitalSigma]t$$]& ], 
            3]; $CellContext`maxr$ = 
          Part[$CellContext`data$, 2, 5]; $CellContext`dr$ = 
          Part[$CellContext`data$, 2, 7]; $CellContext`points\[Phi]$ = 
          Part[$CellContext`data$, 4]; $CellContext`plotpoints\[Phi]$ = 
          infflatlandisopointisoscatter`ppoints[$CellContext`points\[Phi]$, \
$CellContext`dr$, $CellContext`maxr$, $CellContext`\[CapitalSigma]t$$]; \
$CellContext`plot\[Phi]$ = Quiet[
            Show[
             
             ListPlot[$CellContext`plotpoints\[Phi]$, PlotRange -> All, 
              PlotStyle -> PointSize[0.01]], 
             Plot[
             2 Pi $CellContext`r 
              infflatlandisopointisoscatter`\[Phi]Grosjean[$CellContext`r, \
$CellContext`\[CapitalSigma]t$$, $CellContext`\[Alpha]$$], {$CellContext`r, 
               0, $CellContext`maxr$}, PlotRange -> All], 
             Plot[
             2 Pi $CellContext`r 
              infflatlandisopointisoscatter`\[Phi]Diffusion[$CellContext`r, \
$CellContext`\[CapitalSigma]t$$, $CellContext`\[Alpha]$$], {$CellContext`r, 
               0, $CellContext`maxr$}, PlotRange -> All, PlotStyle -> Dashed],
              Frame -> True, 
             FrameLabel -> {{
               2 Pi $CellContext`r $CellContext`\[Phi][$CellContext`r], 
                Null}, {$CellContext`r, Null}}]]; $CellContext`logplot\[Phi]$ = 
          Quiet[
            Show[
             
             ListLogPlot[$CellContext`plotpoints\[Phi]$, PlotRange -> All, 
              PlotStyle -> PointSize[0.01]], 
             LogPlot[
             2 Pi $CellContext`r 
              infflatlandisopointisoscatter`\[Phi]Grosjean[$CellContext`r, \
$CellContext`\[CapitalSigma]t$$, $CellContext`\[Alpha]$$], {$CellContext`r, 
               0, $CellContext`maxr$}, PlotRange -> All], 
             LogPlot[
             2 Pi $CellContext`r 
              infflatlandisopointisoscatter`\[Phi]Diffusion[$CellContext`r, \
$CellContext`\[CapitalSigma]t$$, $CellContext`\[Alpha]$$], {$CellContext`r, 
               0, $CellContext`maxr$}, PlotRange -> All, PlotStyle -> Dashed],
              Frame -> True, 
             FrameLabel -> {{
               2 Pi $CellContext`r $CellContext`\[Phi][$CellContext`r], 
                Null}, {$CellContext`r, Null}}]]; Show[
           
           GraphicsGrid[{{$CellContext`plot\[Phi]$, \
$CellContext`logplot\[Phi]$}}, ImageSize -> 1000], PlotLabel -> 
           StringJoin[
            "Classical (dashed) and Grosjean Modified (thin) Diffusion \
Approximation\nInfinite Flatland, isotropic point source, isotropic \
scattering, fluence \[Phi][r], \[Alpha] = ", 
             ToString[$CellContext`\[Alpha]$$], 
             ", \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = ", 
             ToString[$CellContext`\[CapitalSigma]t$$]]]], 
        Text[
        "Uh oh!  Couldn't find MC data.  Try to evaluate this entire notebook \
and ensure the data path is setup correctly."]], 
      "Specifications" :> {{{$CellContext`\[Alpha]$$, 0.5}, {0.01, 0.1, 0.3, 
         0.5, 0.7, 0.8, 0.9, 0.95, 0.99, 
         0.999}}, {$CellContext`\[CapitalSigma]t$$, {1, 3}}}, "Options" :> {},
       "DefaultOptions" :> {}],
     ImageSizeCache->{756., {175., 178.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6492599960399323`*^9, {3.649260054751576*^9, 3.6492600667267723`*^9}, 
   3.649260130666471*^9, 3.6492603097120123`*^9, 3.649260404452841*^9, 
   3.649260520526636*^9, 3.649261009294073*^9, {3.6492728228080807`*^9, 
   3.649272833844741*^9}, 3.649272870547728*^9, 3.6492729014170713`*^9, {
   3.649273033207165*^9, 3.6492730488975773`*^9}, 3.649273110752254*^9, {
   3.6492731576796923`*^9, 3.6492731709316483`*^9}, 3.649893125231133*^9, 
   3.64989444074127*^9, 3.650002380670837*^9, 3.6500024551855*^9, {
   3.65000251145569*^9, 3.6500025310761137`*^9}, {3.6500026145656157`*^9, 
   3.650002659356792*^9}, {3.6500027078910933`*^9, 3.6500027600243883`*^9}, {
   3.650002803133861*^9, 3.6500028298210363`*^9}, 3.650002894229841*^9, 
   3.6500029521809187`*^9, {3.650002987365321*^9, 3.65000300904708*^9}, {
   3.6500031905167294`*^9, 3.650003229752777*^9}, 3.650003701722385*^9, {
   3.650007203146515*^9, 3.650007228633609*^9}, {3.650007276351638*^9, 
   3.650007290144314*^9}, 3.650007356744327*^9, {3.650007394696188*^9, 
   3.65000741932332*^9}, 3.650052061395753*^9, 3.6520446004350023`*^9, 
   3.7200273939047823`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Fluence - Diffusion approximation (Rigorous) comparison to MC\
\>", "Subsection",
 CellChangeTimes->{{3.649259702897419*^9, 3.64925971462465*^9}, {
   3.649893943340941*^9, 3.649893948401101*^9}, {3.650003121496348*^9, 
   3.650003148370801*^9}, {3.650007172824812*^9, 3.6500071827023907`*^9}, {
   3.6500077111192513`*^9, 3.65000771239109*^9}, 3.650007811903572*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"alpha", ",", "\[CapitalSigma]t"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
      "Length", "[", "infflatlandisopointisoscatter`simulations", "]"}], ">", 
      "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "data", ",", "maxr", ",", "dr", ",", "points\[Phi]", ",", 
         "plotpoints\[Phi]", ",", "logplot\[Phi]", ",", "plot\[Phi]", ",", 
         "exact1points"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"data", "=", 
         RowBox[{
          RowBox[{"SelectFirst", "[", 
           RowBox[{"infflatlandisopointisoscatter`simulations", ",", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "\[Alpha]"}], "&&", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
               "\[CapitalSigma]t"}]}], "&"}]}], "]"}], "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"maxr", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "5"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dr", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "7"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"points\[Phi]", " ", "=", " ", 
         RowBox[{"data", "[", 
          RowBox[{"[", "4", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "divide", " ", "by", " ", "\[CapitalSigma]t", " ", "to", " ", 
          "convert", " ", "collision", " ", "density", " ", "into", " ", 
          "fluence"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"plotpoints\[Phi]", "=", 
         RowBox[{"infflatlandisopointisoscatter`ppoints", "[", 
          RowBox[{
          "points\[Phi]", ",", "dr", ",", "maxr", ",", "\[CapitalSigma]t"}], 
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"plot\[Phi]", "=", 
         RowBox[{"Quiet", "[", 
          RowBox[{"Show", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ListPlot", "[", 
             RowBox[{"plotpoints\[Phi]", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"PointSize", "[", ".01", "]"}]}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Plot", "[", 
             RowBox[{
              RowBox[{"2", " ", "Pi", " ", "r", " ", 
               RowBox[{
               "infflatlandisopointisoscatter`\[Phi]RigorousDiffusion", "[", 
                RowBox[{"r", ",", "\[CapitalSigma]t", ",", "\[Alpha]"}], 
                "]"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"r", ",", "0", ",", "maxr"}], "}"}], ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"FrameLabel", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"2", " ", "Pi", " ", "r", " ", 
                  RowBox[{"\[Phi]", "[", "r", "]"}]}], ","}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"r", ","}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]",
            "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"logplot\[Phi]", "=", 
         RowBox[{"Quiet", "[", 
          RowBox[{"Show", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ListLogPlot", "[", 
             RowBox[{"plotpoints\[Phi]", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"PointSize", "[", ".01", "]"}]}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"LogPlot", "[", 
             RowBox[{
              RowBox[{"2", " ", "Pi", " ", "r", " ", 
               RowBox[{
               "infflatlandisopointisoscatter`\[Phi]RigorousDiffusion", "[", 
                RowBox[{"r", ",", "\[CapitalSigma]t", ",", "\[Alpha]"}], 
                "]"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"r", ",", "0", ",", "maxr"}], "}"}], ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"FrameLabel", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"2", " ", "Pi", " ", "r", " ", 
                  RowBox[{"\[Phi]", "[", "r", "]"}]}], ","}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"r", ","}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]",
            "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{
          RowBox[{"GraphicsGrid", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{"plot\[Phi]", ",", "logplot\[Phi]"}], "}"}], "}"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "1000"}]}], "]"}], ",", 
          RowBox[{"PlotLabel", "->", 
           RowBox[{
           "\"\<Rigorous Diffusion Approximation\\nInfinite Flatland, \
isotropic point source, isotropic scattering, fluence \[Phi][r], \[Alpha] = \
\>\"", "<>", 
            RowBox[{"ToString", "[", "\[Alpha]", "]"}], "<>", 
            "\"\<, \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = \>\"", "<>", 
            RowBox[{"ToString", "[", "\[CapitalSigma]t", "]"}]}]}]}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "Text", "[", 
      "\"\<Uh oh!  Couldn't find MC data.  Try to evaluate this entire \
notebook and ensure the data path is setup correctly.\>\"", "]"}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "0.5"}], "}"}], ",", 
     "infflatlandisopointisoscatter`alphas"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[CapitalSigma]t", ",", "infflatlandisopointisoscatter`muts"}], 
    "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.649259789611609*^9, 3.649259851754438*^9}, {
   3.649259907663431*^9, 3.649259992296626*^9}, {3.649260050094636*^9, 
   3.649260065849139*^9}, 3.649260129895323*^9, {3.649260309183428*^9, 
   3.6492603094557133`*^9}, {3.649260371404566*^9, 3.64926040211484*^9}, 
   3.649272745810855*^9, {3.649272859097014*^9, 3.649272862208322*^9}, {
   3.649272894311653*^9, 3.64927289769634*^9}, {3.6492730110286016`*^9, 
   3.6492730250756083`*^9}, {3.649273106353642*^9, 3.649273109077507*^9}, {
   3.649273170203189*^9, 3.649273170411021*^9}, {3.649872238500237*^9, 
   3.649872259049232*^9}, {3.649894400589272*^9, 3.6498944384501762`*^9}, {
   3.650002365346281*^9, 3.650002380352285*^9}, {3.6500024298360243`*^9, 
   3.650002446810408*^9}, {3.650002497701038*^9, 3.650002523956849*^9}, {
   3.650002571560855*^9, 3.6500026508115797`*^9}, {3.65000269281654*^9, 
   3.650002759659141*^9}, {3.6500027916908703`*^9, 3.65000282619895*^9}, {
   3.650002862772669*^9, 3.6500028906111307`*^9}, {3.650002926853812*^9, 
   3.650002948093389*^9}, {3.650002982083981*^9, 3.6500030086453667`*^9}, {
   3.6500031585408278`*^9, 3.65000322873953*^9}, {3.650003318269821*^9, 
   3.650003320052899*^9}, {3.6500071928508997`*^9, 3.65000722830888*^9}, {
   3.650007275595155*^9, 3.650007289546698*^9}, 3.65000735303034*^9, {
   3.650007385628372*^9, 3.650007418967657*^9}, {3.6500077191209297`*^9, 
   3.650007758672679*^9}, 3.650007809140627*^9, {3.652044466777947*^9, 
   3.65204446843331*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`\[Alpha]$$ = 
    0.5, $CellContext`\[CapitalSigma]t$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Alpha]$$], 0.5}, {0.01, 0.1, 0.3, 0.5, 0.7, 0.8, 
      0.9, 0.95, 0.99, 0.999}}, {
      Hold[$CellContext`\[CapitalSigma]t$$], {1, 3}}}, Typeset`size$$ = {
    1000., {179., 183.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`\[Alpha]$4743427$$ = 
    0, $CellContext`\[CapitalSigma]t$4743428$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`\[Alpha]$$ = 
        0.5, $CellContext`\[CapitalSigma]t$$ = 1}, "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$4743427$$, 0], 
        Hold[$CellContext`\[CapitalSigma]t$$, \
$CellContext`\[CapitalSigma]t$4743428$$, False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      If[Length[infflatlandisopointisoscatter`simulations] > 0, 
        Module[{$CellContext`data$, $CellContext`maxr$, $CellContext`dr$, \
$CellContext`points\[Phi]$, $CellContext`plotpoints\[Phi]$, \
$CellContext`logplot\[Phi]$, $CellContext`plot\[Phi]$, \
$CellContext`exact1points$}, $CellContext`data$ = Part[
            SelectFirst[
            infflatlandisopointisoscatter`simulations, And[
             Part[#, 1] == $CellContext`\[Alpha]$$, 
              Part[#, 2] == $CellContext`\[CapitalSigma]t$$]& ], 
            3]; $CellContext`maxr$ = 
          Part[$CellContext`data$, 2, 5]; $CellContext`dr$ = 
          Part[$CellContext`data$, 2, 7]; $CellContext`points\[Phi]$ = 
          Part[$CellContext`data$, 4]; $CellContext`plotpoints\[Phi]$ = 
          infflatlandisopointisoscatter`ppoints[$CellContext`points\[Phi]$, \
$CellContext`dr$, $CellContext`maxr$, $CellContext`\[CapitalSigma]t$$]; \
$CellContext`plot\[Phi]$ = Quiet[
            Show[
             
             ListPlot[$CellContext`plotpoints\[Phi]$, PlotRange -> All, 
              PlotStyle -> PointSize[0.01]], 
             Plot[
             2 Pi $CellContext`r 
              infflatlandisopointisoscatter`\[Phi]RigorousDiffusion[$\
CellContext`r, $CellContext`\[CapitalSigma]t$$, $CellContext`\[Alpha]$$], \
{$CellContext`r, 0, $CellContext`maxr$}, PlotRange -> All], Frame -> True, 
             FrameLabel -> {{
               2 Pi $CellContext`r $CellContext`\[Phi][$CellContext`r], 
                Null}, {$CellContext`r, Null}}]]; $CellContext`logplot\[Phi]$ = 
          Quiet[
            Show[
             
             ListLogPlot[$CellContext`plotpoints\[Phi]$, PlotRange -> All, 
              PlotStyle -> PointSize[0.01]], 
             LogPlot[
             2 Pi $CellContext`r 
              infflatlandisopointisoscatter`\[Phi]RigorousDiffusion[$\
CellContext`r, $CellContext`\[CapitalSigma]t$$, $CellContext`\[Alpha]$$], \
{$CellContext`r, 0, $CellContext`maxr$}, PlotRange -> All], Frame -> True, 
             FrameLabel -> {{
               2 Pi $CellContext`r $CellContext`\[Phi][$CellContext`r], 
                Null}, {$CellContext`r, Null}}]]; Show[
           
           GraphicsGrid[{{$CellContext`plot\[Phi]$, \
$CellContext`logplot\[Phi]$}}, ImageSize -> 1000], PlotLabel -> 
           StringJoin[
            "Rigorous Diffusion Approximation\nInfinite Flatland, isotropic \
point source, isotropic scattering, fluence \[Phi][r], \[Alpha] = ", 
             ToString[$CellContext`\[Alpha]$$], 
             ", \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = ", 
             ToString[$CellContext`\[CapitalSigma]t$$]]]], 
        Text[
        "Uh oh!  Couldn't find MC data.  Try to evaluate this entire notebook \
and ensure the data path is setup correctly."]], 
      "Specifications" :> {{{$CellContext`\[Alpha]$$, 0.5}, {0.01, 0.1, 0.3, 
         0.5, 0.7, 0.8, 0.9, 0.95, 0.99, 
         0.999}}, {$CellContext`\[CapitalSigma]t$$, {1, 3}}}, "Options" :> {},
       "DefaultOptions" :> {}],
     ImageSizeCache->{1045., {236., 242.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6492599960399323`*^9, {3.649260054751576*^9, 3.6492600667267723`*^9}, 
   3.649260130666471*^9, 3.6492603097120123`*^9, 3.649260404452841*^9, 
   3.649260520526636*^9, 3.649261009294073*^9, {3.6492728228080807`*^9, 
   3.649272833844741*^9}, 3.649272870547728*^9, 3.6492729014170713`*^9, {
   3.649273033207165*^9, 3.6492730488975773`*^9}, 3.649273110752254*^9, {
   3.6492731576796923`*^9, 3.6492731709316483`*^9}, 3.649893125231133*^9, 
   3.64989444074127*^9, 3.650002380670837*^9, 3.6500024551855*^9, {
   3.65000251145569*^9, 3.6500025310761137`*^9}, {3.6500026145656157`*^9, 
   3.650002659356792*^9}, {3.6500027078910933`*^9, 3.6500027600243883`*^9}, {
   3.650002803133861*^9, 3.6500028298210363`*^9}, 3.650002894229841*^9, 
   3.6500029521809187`*^9, {3.650002987365321*^9, 3.65000300904708*^9}, {
   3.6500031905167294`*^9, 3.650003229752777*^9}, 3.650003701722385*^9, {
   3.650007203146515*^9, 3.650007228633609*^9}, {3.650007276351638*^9, 
   3.650007290144314*^9}, 3.650007356744327*^9, {3.650007394696188*^9, 
   3.65000741932332*^9}, {3.650007731982513*^9, 3.650007760633027*^9}, 
   3.6500078150737677`*^9, 3.650052061827482*^9, 3.652044601003845*^9, 
   3.720027394564246*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["N-th order fluence / scalar flux", "Section",
 CellChangeTimes->{{3.6500387614570208`*^9, 3.6500387653993263`*^9}, {
  3.650039936579167*^9, 3.650039945648221*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"alpha", ",", "\[CapitalSigma]t"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
      "Length", "[", "infflatlandisopointisoscatter`simulations", "]"}], ">", 
      "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "data", ",", "maxr", ",", "dr", ",", "points\[Phi]", ",", 
         "plotpoints\[Phi]", ",", "logplot\[Phi]", ",", "plot\[Phi]", ",", 
         "exact1points", ",", "numorders"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"data", "=", 
         RowBox[{
          RowBox[{"SelectFirst", "[", 
           RowBox[{"infflatlandisopointisoscatter`simulations", ",", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "\[Alpha]"}], "&&", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
               "\[CapitalSigma]t"}]}], "&"}]}], "]"}], "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"maxr", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "5"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dr", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "7"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"numorders", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "13"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"points\[Phi]", " ", "=", " ", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"9", "+", "numorders", "+", "n", "+", "1"}], "]"}], 
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "divide", " ", "by", " ", "\[CapitalSigma]t", " ", "to", " ", 
          "convert", " ", "collision", " ", "density", " ", "into", " ", 
          "fluence"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"plotpoints\[Phi]", "=", 
         RowBox[{"infflatlandisopointisoscatter`ppoints", "[", 
          RowBox[{
          "points\[Phi]", ",", "dr", ",", "maxr", ",", "\[CapitalSigma]t"}], 
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"plot\[Phi]", "=", 
         RowBox[{"Quiet", "[", 
          RowBox[{"Show", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ListPlot", "[", 
             RowBox[{"plotpoints\[Phi]", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"PointSize", "[", ".01", "]"}]}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Plot", "[", 
             RowBox[{
              RowBox[{"2", " ", "Pi", " ", "r", " ", 
               RowBox[{"infflatlandisopointisoscatter`\[Phi]", "[", 
                RowBox[{
                "r", ",", "\[CapitalSigma]t", ",", "\[Alpha]", ",", "n"}], 
                "]"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"r", ",", "0", ",", "maxr"}], "}"}], ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"FrameLabel", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"2", " ", "Pi", " ", "r", " ", 
                  RowBox[{"\[Phi]", "[", 
                   RowBox[{"r", "|", "n"}], "]"}]}], ","}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"r", ","}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]",
            "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"logplot\[Phi]", "=", 
         RowBox[{"Quiet", "[", 
          RowBox[{"Show", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ListLogPlot", "[", 
             RowBox[{"plotpoints\[Phi]", ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"PointSize", "[", ".01", "]"}]}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"LogPlot", "[", 
             RowBox[{
              RowBox[{"2", " ", "Pi", " ", "r", " ", 
               RowBox[{"infflatlandisopointisoscatter`\[Phi]", "[", 
                RowBox[{
                "r", ",", "\[CapitalSigma]t", ",", "\[Alpha]", ",", "n"}], 
                "]"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"r", ",", "0", ",", "maxr"}], "}"}], ",", 
              RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"FrameLabel", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"2", " ", "Pi", " ", "r", " ", 
                  RowBox[{"\[Phi]", "[", 
                   RowBox[{"r", "|", "n"}], "]"}]}], ","}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"r", ","}], "}"}]}], "}"}]}]}], "\[IndentingNewLine]",
            "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{
          RowBox[{"GraphicsGrid", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{"plot\[Phi]", ",", "logplot\[Phi]"}], "}"}], "}"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "1000"}]}], "]"}], ",", 
          RowBox[{"PlotLabel", "->", 
           RowBox[{
           "\"\<Infinite Flatland, isotropic point source, isotropic \
scattering, n-th scattered fluence \[Phi][r|n], \[Alpha] = \>\"", "<>", 
            RowBox[{"ToString", "[", "\[Alpha]", "]"}], "<>", 
            "\"\<, \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = \>\"", "<>", 
            RowBox[{"ToString", "[", "\[CapitalSigma]t", "]"}]}]}]}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "Text", "[", 
      "\"\<Uh oh!  Couldn't find MC data.  Try to evaluate this entire \
notebook and ensure the data path is setup correctly.\>\"", "]"}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "0.9"}], "}"}], ",", 
     "infflatlandisopointisoscatter`alphas"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[CapitalSigma]t", ",", "infflatlandisopointisoscatter`muts"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "8"}], "}"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
        "NumberQ", "[", "infflatlandisopointisoscatter`numcollorders", "]"}], 
        ",", "infflatlandisopointisoscatter`numcollorders", ",", "1"}], "]"}],
       "]"}]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.650038781957878*^9, 3.650038865081994*^9}, {
   3.650038940318115*^9, 3.6500389668102417`*^9}, 3.650039135168024*^9, {
   3.650039171845436*^9, 3.650039182572044*^9}, {3.6500392331634808`*^9, 
   3.650039271164426*^9}, 3.650039318856196*^9, {3.650039363783215*^9, 
   3.6500393848331623`*^9}, {3.6500394185605392`*^9, 3.650039470436884*^9}, {
   3.650039534236198*^9, 3.6500395903264017`*^9}, {3.650039621803979*^9, 
   3.650039624580249*^9}, {3.652044471633967*^9, 3.65204447790557*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 8, $CellContext`\[Alpha]$$ = 
    0.9, $CellContext`\[CapitalSigma]t$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Alpha]$$], 0.9}, {0.01, 0.1, 0.3, 0.5, 0.7, 0.8, 
      0.9, 0.95, 0.99, 0.999}}, {
      Hold[$CellContext`\[CapitalSigma]t$$], {1, 3}}, {{
       Hold[$CellContext`n$$], 8}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
       14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
       32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
       50}}}, Typeset`size$$ = {1000., {170., 174.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`\[Alpha]$4744449$$ = 
    0, $CellContext`\[CapitalSigma]t$4744450$$ = 
    False, $CellContext`n$4744451$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`n$$ = 8, $CellContext`\[Alpha]$$ = 
        0.9, $CellContext`\[CapitalSigma]t$$ = 1}, "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$4744449$$, 0], 
        Hold[$CellContext`\[CapitalSigma]t$$, \
$CellContext`\[CapitalSigma]t$4744450$$, False], 
        Hold[$CellContext`n$$, $CellContext`n$4744451$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      If[Length[infflatlandisopointisoscatter`simulations] > 0, 
        Module[{$CellContext`data$, $CellContext`maxr$, $CellContext`dr$, \
$CellContext`points\[Phi]$, $CellContext`plotpoints\[Phi]$, \
$CellContext`logplot\[Phi]$, $CellContext`plot\[Phi]$, \
$CellContext`exact1points$, $CellContext`numorders$}, $CellContext`data$ = 
          Part[
            SelectFirst[
            infflatlandisopointisoscatter`simulations, And[
             Part[#, 1] == $CellContext`\[Alpha]$$, 
              Part[#, 2] == $CellContext`\[CapitalSigma]t$$]& ], 
            3]; $CellContext`maxr$ = 
          Part[$CellContext`data$, 2, 5]; $CellContext`dr$ = 
          Part[$CellContext`data$, 2, 7]; $CellContext`numorders$ = 
          Part[$CellContext`data$, 2, 13]; $CellContext`points\[Phi]$ = 
          Part[$CellContext`data$, 
            9 + $CellContext`numorders$ + $CellContext`n$$ + 
            1]; $CellContext`plotpoints\[Phi]$ = 
          infflatlandisopointisoscatter`ppoints[$CellContext`points\[Phi]$, \
$CellContext`dr$, $CellContext`maxr$, $CellContext`\[CapitalSigma]t$$]; \
$CellContext`plot\[Phi]$ = Quiet[
            Show[
             
             ListPlot[$CellContext`plotpoints\[Phi]$, PlotRange -> All, 
              PlotStyle -> PointSize[0.01]], 
             Plot[
             2 Pi $CellContext`r 
              infflatlandisopointisoscatter`\[Phi][$CellContext`r, \
$CellContext`\[CapitalSigma]t$$, $CellContext`\[Alpha]$$, $CellContext`n$$], \
{$CellContext`r, 0, $CellContext`maxr$}, PlotRange -> All], Frame -> True, 
             FrameLabel -> {{2 Pi $CellContext`r $CellContext`\[Phi][
                  Alternatives[$CellContext`r, $CellContext`n$$]], 
                Null}, {$CellContext`r, Null}}]]; $CellContext`logplot\[Phi]$ = 
          Quiet[
            Show[
             
             ListLogPlot[$CellContext`plotpoints\[Phi]$, PlotRange -> All, 
              PlotStyle -> PointSize[0.01]], 
             LogPlot[
             2 Pi $CellContext`r 
              infflatlandisopointisoscatter`\[Phi][$CellContext`r, \
$CellContext`\[CapitalSigma]t$$, $CellContext`\[Alpha]$$, $CellContext`n$$], \
{$CellContext`r, 0, $CellContext`maxr$}, PlotRange -> All], Frame -> True, 
             FrameLabel -> {{2 Pi $CellContext`r $CellContext`\[Phi][
                  Alternatives[$CellContext`r, $CellContext`n$$]], 
                Null}, {$CellContext`r, Null}}]]; Show[
           
           GraphicsGrid[{{$CellContext`plot\[Phi]$, \
$CellContext`logplot\[Phi]$}}, ImageSize -> 1000], PlotLabel -> 
           StringJoin[
            "Infinite Flatland, isotropic point source, isotropic scattering, \
n-th scattered fluence \[Phi][r|n], \[Alpha] = ", 
             ToString[$CellContext`\[Alpha]$$], 
             ", \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = ", 
             ToString[$CellContext`\[CapitalSigma]t$$]]]], 
        Text[
        "Uh oh!  Couldn't find MC data.  Try to evaluate this entire notebook \
and ensure the data path is setup correctly."]], 
      "Specifications" :> {{{$CellContext`\[Alpha]$$, 0.9}, {0.01, 0.1, 0.3, 
         0.5, 0.7, 0.8, 0.9, 0.95, 0.99, 
         0.999}}, {$CellContext`\[CapitalSigma]t$$, {1, 
         3}}, {{$CellContext`n$$, 8}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 
         13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
         30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 
         47, 48, 49, 50}}}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{1045., {240., 246.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.65003878554291*^9, 3.650038865385459*^9}, {
   3.6500389412689238`*^9, 3.650038967128581*^9}, 3.650039135917987*^9, 
   3.650039172499586*^9, {3.6500392170027857`*^9, 3.650039271616228*^9}, 
   3.650039319684811*^9, 3.650039386526655*^9, {3.650039427197057*^9, 
   3.650039470884982*^9}, {3.650039534940349*^9, 3.6500395907828007`*^9}, 
   3.6500396250166607`*^9, 3.65005206231361*^9, 3.65204460159276*^9, 
   3.7200273951051607`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Compare moments of \[Phi]", "Subsection",
 CellChangeTimes->{{3.650041676191098*^9, 3.6500416791649113`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
      "Length", "[", "infflatlandisopointisoscatter`simulations", "]"}], ">", 
      "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "data", ",", "nummoments", ",", "\[Phi]moments", ",", "ks", ",", 
         "analytic", ",", "j"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"data", "=", 
         RowBox[{
          RowBox[{"SelectFirst", "[", 
           RowBox[{"infflatlandisopointisoscatter`simulations", ",", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "\[Alpha]"}], "&&", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
               "\[CapitalSigma]t"}]}], "&"}]}], "]"}], "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"nummoments", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "15"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"\[Phi]moments", "=", 
         RowBox[{"N", "[", 
          RowBox[{"{", 
           FractionBox[
            RowBox[{"data", "[", 
             RowBox[{"[", "6", "]"}], "]"}], "\[CapitalSigma]t"], "}"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"ks", "=", 
         RowBox[{"{", 
          RowBox[{"Table", "[", 
           RowBox[{"k", ",", 
            RowBox[{"{", 
             RowBox[{"k", ",", "0", ",", 
              RowBox[{"nummoments", "-", "1"}]}], "}"}]}], "]"}], "}"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"analytic", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"infflatlandisopointisoscatter`\[Phi]m", "[", 
            RowBox[{"\[CapitalSigma]t", ",", "\[Alpha]", ",", "k"}], "]"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"k", ",", "ks"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"j", "=", 
         RowBox[{"Join", "[", 
          RowBox[{"ks", ",", "analytic", ",", "\[Phi]moments"}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"TableForm", "[", "\[IndentingNewLine]", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
             "\"\<k\>\"", ",", "\"\<analytic\>\"", ",", "\"\<MC\>\""}], "}"}],
             "}"}], ",", 
           RowBox[{"Transpose", "[", "j", "]"}]}], "]"}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "Text", "[", 
      "\"\<Uh oh!  Couldn't find MC data.  Try to evaluate this entire \
notebook and ensure the data path is setup correctly.\>\"", "]"}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "0.95"}], "}"}], ",", 
     "infflatlandisopointisoscatter`alphas"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[CapitalSigma]t", ",", "3"}], "}"}], ",", 
     "infflatlandisopointisoscatter`muts"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.650041688841194*^9, 3.650041705608346*^9}, 
   3.650042056240006*^9, {3.650042170542794*^9, 3.65004232530101*^9}, {
   3.650042374114872*^9, 3.650042374646285*^9}, {3.6500426332834272`*^9, 
   3.65004266394592*^9}, {3.652044486040279*^9, 3.652044486152093*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`\[Alpha]$$ = 
    0.95, $CellContext`\[CapitalSigma]t$$ = 3, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Alpha]$$], 0.95}, {0.01, 0.1, 0.3, 0.5, 0.7, 0.8, 
      0.9, 0.95, 0.99, 0.999}}, {{
       Hold[$CellContext`\[CapitalSigma]t$$], 3}, {1, 3}}}, Typeset`size$$ = {
    131., {28.86, 31.86}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`\[Alpha]$4745362$$ = 
    0, $CellContext`\[CapitalSigma]t$4745363$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`\[Alpha]$$ = 
        0.95, $CellContext`\[CapitalSigma]t$$ = 3}, 
      "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$4745362$$, 0], 
        Hold[$CellContext`\[CapitalSigma]t$$, \
$CellContext`\[CapitalSigma]t$4745363$$, False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      If[Length[infflatlandisopointisoscatter`simulations] > 0, 
        Module[{$CellContext`data$, $CellContext`nummoments$, $CellContext`\
\[Phi]moments$, $CellContext`ks$, $CellContext`analytic$, $CellContext`j$}, \
$CellContext`data$ = Part[
            SelectFirst[
            infflatlandisopointisoscatter`simulations, And[
             Part[#, 1] == $CellContext`\[Alpha]$$, 
              Part[#, 2] == $CellContext`\[CapitalSigma]t$$]& ], 
            3]; $CellContext`nummoments$ = 
          Part[$CellContext`data$, 2, 15]; $CellContext`\[Phi]moments$ = 
          N[{Part[$CellContext`data$, 
               6]/$CellContext`\[CapitalSigma]t$$}]; $CellContext`ks$ = {
            
            Table[$CellContext`k, {$CellContext`k, 
              0, $CellContext`nummoments$ - 1}]}; $CellContext`analytic$ = 
          Table[
            
            infflatlandisopointisoscatter`\[Phi]m[$CellContext`\[CapitalSigma]\
t$$, $CellContext`\[Alpha]$$, $CellContext`k], {$CellContext`k, \
$CellContext`ks$}]; $CellContext`j$ = 
          Join[$CellContext`ks$, $CellContext`analytic$, \
$CellContext`\[Phi]moments$]; TableForm[
           Join[{{"k", "analytic", "MC"}}, 
            Transpose[$CellContext`j$]]]], 
        Text[
        "Uh oh!  Couldn't find MC data.  Try to evaluate this entire notebook \
and ensure the data path is setup correctly."]], 
      "Specifications" :> {{{$CellContext`\[Alpha]$$, 0.95}, {0.01, 0.1, 0.3, 
         0.5, 0.7, 0.8, 0.9, 0.95, 0.99, 
         0.999}}, {{$CellContext`\[CapitalSigma]t$$, 3}, {1, 3}}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{167., {77., 80.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.650042202724057*^9, 3.65004232551412*^9}, 
   3.650042413458701*^9, {3.650042639813974*^9, 3.6500426642700167`*^9}, 
   3.650052062679365*^9, 3.6520446020383577`*^9, 3.720027395699381*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["n-th collided moments of \[Phi]", "Subsection",
 CellChangeTimes->{{3.646262916178207*^9, 3.646262920832403*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
      "Length", "[", "infflatlandisopointisoscatter`simulations", "]"}], ">", 
      "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "data", ",", "\[Phi]moments", ",", "ks", ",", "analytic", ",", "j", 
         ",", "nummoments"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"data", "=", 
         RowBox[{
          RowBox[{"SelectFirst", "[", 
           RowBox[{"infflatlandisopointisoscatter`simulations", ",", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "\[Alpha]"}], "&&", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
               "\[CapitalSigma]t"}]}], "&"}]}], "]"}], "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"nummoments", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "15"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"\[Phi]moments", "=", 
         RowBox[{"N", "[", 
          FractionBox[
           RowBox[{"{", 
            RowBox[{"data", "[", 
             RowBox[{"[", 
              RowBox[{"9", "+", "n"}], "]"}], "]"}], "}"}], 
           "\[CapitalSigma]t"], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"ks", "=", 
         RowBox[{"{", 
          RowBox[{"Table", "[", 
           RowBox[{"k", ",", 
            RowBox[{"{", 
             RowBox[{"k", ",", "0", ",", 
              RowBox[{"nummoments", "-", "1"}]}], "}"}]}], "]"}], "}"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"analytic", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Quiet", "[", 
            RowBox[{"N", "[", 
             RowBox[{"infflatlandisopointisoscatter`\[Phi]m", "[", 
              RowBox[{
              "\[CapitalSigma]t", ",", "\[Alpha]", ",", "n", ",", "k"}], 
              "]"}], "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"k", ",", "ks"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"j", "=", 
         RowBox[{"Join", "[", 
          RowBox[{"ks", ",", "analytic", ",", "\[Phi]moments"}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"TableForm", "[", "\[IndentingNewLine]", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
             "\"\<k\>\"", ",", "\"\<analytic\>\"", ",", "\"\<MC\>\""}], "}"}],
             "}"}], ",", 
           RowBox[{"Transpose", "[", "j", "]"}]}], "]"}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "Text", "[", 
      "\"\<Uh oh!  Couldn't find MC data.  Try to evaluate this entire \
notebook and ensure the data path is setup correctly.\>\"", "]"}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "0.8"}], "}"}], ",", 
     "infflatlandisopointisoscatter`alphas"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[CapitalSigma]t", ",", "3"}], "}"}], ",", 
     "infflatlandisopointisoscatter`muts"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "11"}], "}"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
        "NumberQ", "[", "infflatlandisopointisoscatter`numcollorders", "]"}], 
        ",", "infflatlandisopointisoscatter`numcollorders", ",", "1"}], "]"}],
       "]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.650042734229463*^9, 3.650042786470915*^9}, {
  3.650042878498081*^9, 3.650042882999834*^9}, {3.650042915016626*^9, 
  3.650042926823575*^9}, {3.652044490312582*^9, 3.652044490448215*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 11, $CellContext`\[Alpha]$$ = 
    0.8, $CellContext`\[CapitalSigma]t$$ = 3, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Alpha]$$], 0.8}, {0.01, 0.1, 0.3, 0.5, 0.7, 0.8, 
      0.9, 0.95, 0.99, 0.999}}, {{
       Hold[$CellContext`\[CapitalSigma]t$$], 3}, {1, 3}}, {{
       Hold[$CellContext`n$$], 11}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 
      13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 
      31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 
      49, 50}}}, Typeset`size$$ = {148., {28.86, 31.86}}, Typeset`update$$ = 
    0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`\[Alpha]$4745390$$ = 
    0, $CellContext`\[CapitalSigma]t$4745391$$ = 
    False, $CellContext`n$4745392$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`n$$ = 11, $CellContext`\[Alpha]$$ = 
        0.8, $CellContext`\[CapitalSigma]t$$ = 3}, "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$4745390$$, 0], 
        Hold[$CellContext`\[CapitalSigma]t$$, \
$CellContext`\[CapitalSigma]t$4745391$$, False], 
        Hold[$CellContext`n$$, $CellContext`n$4745392$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      If[Length[infflatlandisopointisoscatter`simulations] > 0, 
        Module[{$CellContext`data$, $CellContext`\[Phi]moments$, \
$CellContext`ks$, $CellContext`analytic$, $CellContext`j$, \
$CellContext`nummoments$}, $CellContext`data$ = Part[
            SelectFirst[
            infflatlandisopointisoscatter`simulations, And[
             Part[#, 1] == $CellContext`\[Alpha]$$, 
              Part[#, 2] == $CellContext`\[CapitalSigma]t$$]& ], 
            3]; $CellContext`nummoments$ = 
          Part[$CellContext`data$, 2, 15]; $CellContext`\[Phi]moments$ = N[{
              
              Part[$CellContext`data$, 
               9 + $CellContext`n$$]}/$CellContext`\[CapitalSigma]t$$]; \
$CellContext`ks$ = {
            
            Table[$CellContext`k, {$CellContext`k, 
              0, $CellContext`nummoments$ - 1}]}; $CellContext`analytic$ = 
          Table[
            Quiet[
             N[
              
              infflatlandisopointisoscatter`\[Phi]m[$CellContext`\
\[CapitalSigma]t$$, $CellContext`\[Alpha]$$, $CellContext`n$$, \
$CellContext`k]]], {$CellContext`k, $CellContext`ks$}]; $CellContext`j$ = 
          Join[$CellContext`ks$, $CellContext`analytic$, \
$CellContext`\[Phi]moments$]; TableForm[
           Join[{{"k", "analytic", "MC"}}, 
            Transpose[$CellContext`j$]]]], 
        Text[
        "Uh oh!  Couldn't find MC data.  Try to evaluate this entire notebook \
and ensure the data path is setup correctly."]], 
      "Specifications" :> {{{$CellContext`\[Alpha]$$, 0.8}, {0.01, 0.1, 0.3, 
         0.5, 0.7, 0.8, 0.9, 0.95, 0.99, 
         0.999}}, {{$CellContext`\[CapitalSigma]t$$, 3}, {1, 
         3}}, {{$CellContext`n$$, 11}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
          13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
         30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 
         47, 48, 49, 50}}}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{184., {91., 94.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.6500427957661343`*^9, 3.6500428234872103`*^9}, {
   3.650042878822034*^9, 3.650042883241478*^9}, 3.650042927143588*^9, 
   3.650052062763714*^9, 3.652044602209215*^9, 3.720027395851955*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Angular distributions", "Subsection",
 CellChangeTimes->{{3.650050078997526*^9, 3.650050099667417*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
      "Length", "[", "infflatlandisopointisoscatter`simulations", "]"}], ">", 
      "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "data", ",", "numorders", ",", "pointsu", ",", "plotpointsu", ",", 
         "du", ",", "r", ",", "dr"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"data", "=", 
         RowBox[{
          RowBox[{"SelectFirst", "[", 
           RowBox[{"infflatlandisopointisoscatter`simulations", ",", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "\[Alpha]"}], "&&", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
               "\[CapitalSigma]t"}]}], "&"}]}], "]"}], "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"numorders", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "13"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"du", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "9"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dr", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "7"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"pointsu", " ", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"9", "+", 
            RowBox[{"2", " ", "numorders"}], "+", "n"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"r", " ", "=", " ", 
         RowBox[{
          RowBox[{"dr", " ", "*", " ", "n"}], "-", 
          RowBox[{"0.5", " ", "dr"}]}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "divide", " ", "by", " ", "\[CapitalSigma]t", " ", "to", " ", 
          "convert", " ", "collision", " ", "density", " ", "into", " ", 
          "fluence"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"plotpointsu", "=", 
         RowBox[{"infflatlandisopointisoscatter`ppointsu", "[", 
          RowBox[{"pointsu", ",", "du", ",", "\[CapitalSigma]t"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ListPlot", "[", 
           RowBox[{"plotpointsu", ",", 
            RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"FrameLabel", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"2", " ", "Pi", " ", "r", " ", 
                  RowBox[{"L", "[", 
                   RowBox[{"r", ",", "u"}], "]"}]}], ","}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"u", ","}], "}"}]}], "}"}]}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Plot", "[", 
           RowBox[{
            RowBox[{"2", " ", "Pi", " ", "r", "  ", 
             RowBox[{"infflatlandisopointisoscatter`Ldiffusion", "[", 
              RowBox[{
              "r", ",", "u", ",", "\[CapitalSigma]t", ",", "\[Alpha]"}], 
              "]"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"u", ",", 
              RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
            RowBox[{"PlotRange", "\[Rule]", "All"}]}], "\[IndentingNewLine]", 
           "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"PlotLabel", "->", 
           RowBox[{
           "\"\<Infinite Flatland, isotropic point source, isotropic \
scattering\\nAngular distribution: classical diffusion approximation\\n 2 \
\[Pi] r L[r,u], r = \>\"", "<>", 
            RowBox[{"ToString", "[", "r", "]"}], "<>", 
            "\"\<, \[Alpha] = \>\"", "<>", 
            RowBox[{"ToString", "[", "\[Alpha]", "]"}], "<>", 
            "\"\<, \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = \>\"", "<>", 
            RowBox[{"ToString", "[", "\[CapitalSigma]t", "]"}]}]}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{
     "Text", "[", 
      "\"\<Uh oh!  Couldn't find MC data.  Try to evaluate this entire \
notebook and ensure the data path is setup correctly.\>\"", "]"}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "0.9"}], "}"}], ",", 
     "infflatlandisopointisoscatter`alphas"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[CapitalSigma]t", ",", "1"}], "}"}], ",", 
     "infflatlandisopointisoscatter`muts"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "36"}], "}"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"NumberQ", "[", "infflatlandisopointisoscatter`numr", "]"}], 
        ",", "infflatlandisopointisoscatter`numr", ",", "1"}], "]"}], "]"}]}],
     "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.650050114591784*^9, 3.6500501165501013`*^9}, {
   3.650050147407248*^9, 3.6500502898471813`*^9}, {3.650050343244878*^9, 
   3.650050390560184*^9}, {3.650050462835959*^9, 3.6500505050592537`*^9}, {
   3.65005058554755*^9, 3.65005060268085*^9}, {3.650052350118938*^9, 
   3.6500523541691093`*^9}, {3.6500597216967793`*^9, 3.650059748591538*^9}, {
   3.650059857398477*^9, 3.650059865294424*^9}, {3.6500599128890133`*^9, 
   3.650059932759177*^9}, {3.6500602336975517`*^9, 3.650060340025478*^9}, {
   3.6500607703722963`*^9, 3.650060817661872*^9}, {3.650060853043063*^9, 
   3.6500608688902893`*^9}, {3.6500609210562553`*^9, 3.650060948516659*^9}, 
   3.650061073504273*^9, 3.650061134084579*^9, {3.650061227339177*^9, 
   3.6500613708140297`*^9}, {3.650061410262298*^9, 3.650061412450736*^9}, {
   3.6500667272282743`*^9, 3.650066727506547*^9}, {3.6500673636131563`*^9, 
   3.65006744119601*^9}, {3.6500676183949833`*^9, 3.650067624974946*^9}, {
   3.650067659260839*^9, 3.650067667252606*^9}, {3.6500677223698997`*^9, 
   3.650067754828903*^9}, {3.650091383744973*^9, 3.6500913870255527`*^9}, {
   3.652044496472805*^9, 3.6520445012716923`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 36, $CellContext`\[Alpha]$$ = 
    0.9, $CellContext`\[CapitalSigma]t$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Alpha]$$], 0.9}, {0.01, 0.1, 0.3, 0.5, 0.7, 0.8, 
      0.9, 0.95, 0.99, 0.999}}, {{
       Hold[$CellContext`\[CapitalSigma]t$$], 1}, {1, 3}}, {{
       Hold[$CellContext`n$$], 36}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 
      13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 
      31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 
      49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 
      67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 
      85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 
      102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 
      116, 117, 118, 119, 120, 121, 122, 123, 124, 125}}}, Typeset`size$$ = {
    360., {144., 148.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`\[Alpha]$4745421$$ = 
    0, $CellContext`\[CapitalSigma]t$4745422$$ = 
    False, $CellContext`n$4745423$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`n$$ = 36, $CellContext`\[Alpha]$$ = 
        0.9, $CellContext`\[CapitalSigma]t$$ = 1}, "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$4745421$$, 0], 
        Hold[$CellContext`\[CapitalSigma]t$$, \
$CellContext`\[CapitalSigma]t$4745422$$, False], 
        Hold[$CellContext`n$$, $CellContext`n$4745423$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      If[Length[infflatlandisopointisoscatter`simulations] > 0, 
        Module[{$CellContext`data$, $CellContext`numorders$, \
$CellContext`pointsu$, $CellContext`plotpointsu$, $CellContext`du$, \
$CellContext`r$, $CellContext`dr$}, $CellContext`data$ = Part[
            SelectFirst[
            infflatlandisopointisoscatter`simulations, And[
             Part[#, 1] == $CellContext`\[Alpha]$$, 
              Part[#, 2] == $CellContext`\[CapitalSigma]t$$]& ], 
            3]; $CellContext`numorders$ = 
          Part[$CellContext`data$, 2, 13]; $CellContext`du$ = 
          Part[$CellContext`data$, 2, 9]; $CellContext`dr$ = 
          Part[$CellContext`data$, 2, 7]; $CellContext`pointsu$ = 
          Part[$CellContext`data$, 9 + 
            2 $CellContext`numorders$ + $CellContext`n$$]; $CellContext`r$ = \
$CellContext`dr$ $CellContext`n$$ - 
           0.5 $CellContext`dr$; $CellContext`plotpointsu$ = 
          infflatlandisopointisoscatter`ppointsu[$CellContext`pointsu$, \
$CellContext`du$, $CellContext`\[CapitalSigma]t$$]; Show[
           
           ListPlot[$CellContext`plotpointsu$, PlotRange -> All, Frame -> 
            True, FrameLabel -> {{
              2 Pi $CellContext`r$ $CellContext`L[$CellContext`r$, \
$CellContext`u], Null}, {$CellContext`u, Null}}], 
           Plot[
           2 Pi $CellContext`r$ 
            infflatlandisopointisoscatter`Ldiffusion[$CellContext`r$, \
$CellContext`u, $CellContext`\[CapitalSigma]t$$, $CellContext`\[Alpha]$$], \
{$CellContext`u, -1, 1}, PlotRange -> All], PlotLabel -> 
           StringJoin[
            "Infinite Flatland, isotropic point source, isotropic scattering\n\
Angular distribution: classical diffusion approximation\n 2 \[Pi] r L[r,u], r \
= ", 
             ToString[$CellContext`r$], ", \[Alpha] = ", 
             ToString[$CellContext`\[Alpha]$$], 
             ", \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = ", 
             ToString[$CellContext`\[CapitalSigma]t$$]]]], 
        Text[
        "Uh oh!  Couldn't find MC data.  Try to evaluate this entire notebook \
and ensure the data path is setup correctly."]], 
      "Specifications" :> {{{$CellContext`\[Alpha]$$, 0.9}, {0.01, 0.1, 0.3, 
         0.5, 0.7, 0.8, 0.9, 0.95, 0.99, 
         0.999}}, {{$CellContext`\[CapitalSigma]t$$, 1}, {1, 
         3}}, {{$CellContext`n$$, 36}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
          13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
         30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 
         47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 
         64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 
         81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 
         98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 
         112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 
         125}}}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{405., {214., 220.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.65005015043892*^9, 3.650050290023672*^9}, {
   3.650050473393671*^9, 3.650050505579172*^9}, {3.650050588437297*^9, 
   3.6500506029375477`*^9}, 3.650052062844722*^9, 3.6500523575080223`*^9, {
   3.650059739443317*^9, 3.650059749292262*^9}, {3.650059858233984*^9, 
   3.65005986586351*^9}, {3.650059913969314*^9, 3.650059933003076*^9}, {
   3.650060307593636*^9, 3.6500603403854713`*^9}, {3.650060774160799*^9, 
   3.650060817864101*^9}, {3.650060855044722*^9, 3.65006086910421*^9}, {
   3.6500609231309834`*^9, 3.650060948726112*^9}, 3.650061073924622*^9, 
   3.6500611347066803`*^9, {3.650061243748958*^9, 3.650061371020138*^9}, 
   3.650061412853375*^9, 3.650066727945076*^9, {3.650067391925139*^9, 
   3.650067441489661*^9}, 3.6500676679388866`*^9, 3.650067724082973*^9, 
   3.650067755630064*^9, 3.650091390776532*^9, 3.6520446023915157`*^9, 
   3.720027396003867*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
      "Length", "[", "infflatlandisopointisoscatter`simulations", "]"}], ">", 
      "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "data", ",", "numorders", ",", "pointsu", ",", "plotpointsu", ",", 
         "du", ",", "r", ",", "dr"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"data", "=", 
         RowBox[{
          RowBox[{"SelectFirst", "[", 
           RowBox[{"infflatlandisopointisoscatter`simulations", ",", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "\[Alpha]"}], "&&", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
               "\[CapitalSigma]t"}]}], "&"}]}], "]"}], "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"numorders", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "13"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"du", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "9"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dr", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"2", ",", "7"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"pointsu", " ", "=", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"9", "+", 
            RowBox[{"2", " ", "numorders"}], "+", "n"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"r", " ", "=", " ", 
         RowBox[{
          RowBox[{"dr", " ", "*", " ", "n"}], "-", 
          RowBox[{"0.5", " ", "dr"}]}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "divide", " ", "by", " ", "\[CapitalSigma]t", " ", "to", " ", 
          "convert", " ", "collision", " ", "density", " ", "into", " ", 
          "fluence"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"plotpointsu", "=", 
         RowBox[{"infflatlandisopointisoscatter`ppointsu", "[", 
          RowBox[{"pointsu", ",", "du", ",", "\[CapitalSigma]t"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"Quiet", "[", 
         RowBox[{"Show", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ListPlot", "[", 
            RowBox[{"plotpointsu", ",", 
             RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Frame", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
             RowBox[{"FrameLabel", "->", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"2", " ", "Pi", " ", "r", " ", 
                   RowBox[{"L", "[", 
                    RowBox[{"r", ",", "u"}], "]"}]}], ","}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"u", ","}], "}"}]}], "}"}]}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Plot", "[", 
            RowBox[{
             RowBox[{"2", " ", "Pi", " ", "r", "  ", 
              RowBox[{"infflatlandisopointisoscatter`Lintegral", "[", 
               RowBox[{
               "r", ",", "u", ",", "\[CapitalSigma]t", ",", "\[Alpha]", ",", 
                "infflatlandisopointisoscatter`\[Phi]Grosjean"}], "]"}]}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"u", ",", 
               RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
             RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"PlotLabel", "->", 
            RowBox[{
            "\"\<Infinite Flatland, isotropic point source, isotropic \
scattering\\nAngular distribution: Fluence integral Grosjean\\n 2 \[Pi] r \
L[r,u], r = \>\"", "<>", 
             RowBox[{"ToString", "[", "r", "]"}], "<>", 
             "\"\<, \[Alpha] = \>\"", "<>", 
             RowBox[{"ToString", "[", "\[Alpha]", "]"}], "<>", 
             "\"\<, \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = \>\"", 
             "<>", 
             RowBox[{"ToString", "[", "\[CapitalSigma]t", "]"}]}]}]}], 
          "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
     
     RowBox[{
     "Text", "[", 
      "\"\<Uh oh!  Couldn't find MC data.  Try to evaluate this entire \
notebook and ensure the data path is setup correctly.\>\"", "]"}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "0.9"}], "}"}], ",", 
     "infflatlandisopointisoscatter`alphas"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[CapitalSigma]t", ",", "1"}], "}"}], ",", 
     "infflatlandisopointisoscatter`muts"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "53"}], "}"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"NumberQ", "[", "infflatlandisopointisoscatter`numr", "]"}], 
        ",", "infflatlandisopointisoscatter`numr", ",", "1"}], "]"}], "]"}]}],
     "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.650067176695718*^9, 3.6500671889664288`*^9}, {
   3.650067307031138*^9, 3.6500673100945044`*^9}, 3.6500677695027943`*^9, {
   3.650067812476452*^9, 3.650067827527899*^9}, {3.652044505568169*^9, 
   3.6520445091273727`*^9}, {3.720027957956064*^9, 3.720027962199689*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 53, $CellContext`\[Alpha]$$ = 
    0.9, $CellContext`\[CapitalSigma]t$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Alpha]$$], 0.9}, {0.01, 0.1, 0.3, 0.5, 0.7, 0.8, 
      0.9, 0.95, 0.99, 0.999}}, {{
       Hold[$CellContext`\[CapitalSigma]t$$], 1}, {1, 3}}, {{
       Hold[$CellContext`n$$], 53}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 
      13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 
      31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 
      49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 
      67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 
      85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 
      102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 
      116, 117, 118, 119, 120, 121, 122, 123, 124, 125}}}, Typeset`size$$ = {
    360., {144., 148.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`\[Alpha]$4829015$$ = 
    0, $CellContext`\[CapitalSigma]t$4829016$$ = 
    False, $CellContext`n$4829017$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`n$$ = 53, $CellContext`\[Alpha]$$ = 
        0.9, $CellContext`\[CapitalSigma]t$$ = 1}, "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$4829015$$, 0], 
        Hold[$CellContext`\[CapitalSigma]t$$, \
$CellContext`\[CapitalSigma]t$4829016$$, False], 
        Hold[$CellContext`n$$, $CellContext`n$4829017$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      If[Length[infflatlandisopointisoscatter`simulations] > 0, 
        Module[{$CellContext`data$, $CellContext`numorders$, \
$CellContext`pointsu$, $CellContext`plotpointsu$, $CellContext`du$, \
$CellContext`r$, $CellContext`dr$}, $CellContext`data$ = Part[
            SelectFirst[
            infflatlandisopointisoscatter`simulations, And[
             Part[#, 1] == $CellContext`\[Alpha]$$, 
              Part[#, 2] == $CellContext`\[CapitalSigma]t$$]& ], 
            3]; $CellContext`numorders$ = 
          Part[$CellContext`data$, 2, 13]; $CellContext`du$ = 
          Part[$CellContext`data$, 2, 9]; $CellContext`dr$ = 
          Part[$CellContext`data$, 2, 7]; $CellContext`pointsu$ = 
          Part[$CellContext`data$, 9 + 
            2 $CellContext`numorders$ + $CellContext`n$$]; $CellContext`r$ = \
$CellContext`dr$ $CellContext`n$$ - 
           0.5 $CellContext`dr$; $CellContext`plotpointsu$ = 
          infflatlandisopointisoscatter`ppointsu[$CellContext`pointsu$, \
$CellContext`du$, $CellContext`\[CapitalSigma]t$$]; Quiet[
           Show[
            
            ListPlot[$CellContext`plotpointsu$, PlotRange -> All, Frame -> 
             True, FrameLabel -> {{
               2 Pi $CellContext`r$ $CellContext`L[$CellContext`r$, \
$CellContext`u], Null}, {$CellContext`u, Null}}], 
            Plot[
            2 Pi $CellContext`r$ 
             infflatlandisopointisoscatter`Lintegral[$CellContext`r$, \
$CellContext`u, $CellContext`\[CapitalSigma]t$$, $CellContext`\[Alpha]$$, 
               infflatlandisopointisoscatter`\[Phi]Grosjean], \
{$CellContext`u, -1, 1}, PlotRange -> All], PlotLabel -> 
            StringJoin[
             "Infinite Flatland, isotropic point source, isotropic scattering\
\nAngular distribution: Fluence integral Grosjean\n 2 \[Pi] r L[r,u], r = ", 
              ToString[$CellContext`r$], ", \[Alpha] = ", 
              ToString[$CellContext`\[Alpha]$$], 
              ", \!\(\*SubscriptBox[\(\[CapitalSigma]\), \(t\)]\) = ", 
              ToString[$CellContext`\[CapitalSigma]t$$]]]]], 
        Text[
        "Uh oh!  Couldn't find MC data.  Try to evaluate this entire notebook \
and ensure the data path is setup correctly."]], 
      "Specifications" :> {{{$CellContext`\[Alpha]$$, 0.9}, {0.01, 0.1, 0.3, 
         0.5, 0.7, 0.8, 0.9, 0.95, 0.99, 
         0.999}}, {{$CellContext`\[CapitalSigma]t$$, 1}, {1, 
         3}}, {{$CellContext`n$$, 53}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
          13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
         30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 
         47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 
         64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 
         81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 
         98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 
         112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 
         125}}}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{405., {214., 220.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.650067189689766*^9, 3.6500673144098988`*^9, 3.65006777076989*^9, {
   3.650067814040813*^9, 3.650067828475726*^9}, 3.652044602754715*^9, 
   3.72002739622128*^9, 3.720027962927451*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{974, 881},
WindowMargins->{{66, Automatic}, {Automatic, 4}},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
FrontEndVersion->"11.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (July 28, \
2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 354, 6, 148, "Title"],
Cell[937, 30, 113, 1, 51, "Subtitle"],
Cell[1053, 33, 530, 10, 129, "Text"],
Cell[CellGroupData[{
Cell[1608, 47, 143, 2, 64, "Section"],
Cell[1754, 51, 253, 5, 49, "Text"],
Cell[2010, 58, 122, 2, 32, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2169, 65, 93, 1, 64, "Section"],
Cell[2265, 68, 372947, 6119, 347, "Text"],
Cell[375215, 6189, 477, 9, 87, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[375729, 6203, 103, 1, 64, "Section"],
Cell[CellGroupData[{
Cell[375857, 6208, 260, 3, 44, "Subsection"],
Cell[376120, 6213, 1503, 36, 85, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[377660, 6254, 311, 4, 44, "Subsection"],
Cell[377974, 6260, 1598, 38, 101, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[379609, 6303, 362, 5, 44, "Subsection"],
Cell[379974, 6310, 1325, 28, 85, "Input"],
Cell[381302, 6340, 1903, 59, 123, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[383242, 6404, 117, 1, 44, "Subsection"],
Cell[383362, 6407, 1595, 48, 132, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[384994, 6460, 121, 1, 44, "Subsection"],
Cell[385118, 6463, 516, 13, 60, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[385671, 6481, 119, 1, 44, "Subsection"],
Cell[385793, 6484, 547, 13, 65, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[386377, 6502, 126, 1, 44, "Subsection"],
Cell[386506, 6505, 1209, 32, 59, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[387752, 6542, 144, 1, 44, "Subsection"],
Cell[387899, 6545, 1452, 46, 88, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[389388, 6596, 110, 1, 44, "Subsection"],
Cell[389501, 6599, 1147, 36, 73, "Input"],
Cell[390651, 6637, 226, 5, 30, "Text"],
Cell[390880, 6644, 2765, 78, 298, "Input"],
Cell[393648, 6724, 485, 10, 54, "Input"],
Cell[394136, 6736, 141, 1, 30, "Text"],
Cell[394280, 6739, 730, 20, 64, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[395047, 6764, 95, 1, 44, "Subsection"],
Cell[395145, 6767, 1161, 35, 71, "Input"],
Cell[396309, 6804, 819, 24, 66, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[397165, 6833, 106, 1, 44, "Subsection"],
Cell[397274, 6836, 924, 26, 70, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[398235, 6867, 131, 1, 44, "Subsection"],
Cell[398369, 6870, 1226, 33, 72, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[399644, 6909, 197, 3, 64, "Section"],
Cell[399844, 6914, 981, 27, 54, "Input"],
Cell[400828, 6943, 1374, 38, 65, "Input"],
Cell[402205, 6983, 320, 7, 75, "Input"],
Cell[CellGroupData[{
Cell[402550, 6994, 1504, 40, 201, "Input"],
Cell[404057, 7036, 554, 10, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[404648, 7051, 328, 8, 32, "Input"],
Cell[404979, 7061, 404, 8, 32, "Output"]
}, Open  ]],
Cell[405398, 7072, 1520, 37, 117, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[406955, 7114, 141, 2, 64, "Section"],
Cell[CellGroupData[{
Cell[407121, 7120, 230, 3, 44, "Subsection"],
Cell[CellGroupData[{
Cell[407376, 7127, 8123, 176, 831, "Input"],
Cell[415502, 7305, 5799, 112, 429, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[421350, 7423, 276, 3, 44, "Subsection"],
Cell[CellGroupData[{
Cell[421651, 7430, 8319, 180, 831, "Input"],
Cell[429973, 7612, 5834, 112, 149, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[435856, 7730, 326, 4, 44, "Subsection"],
Cell[CellGroupData[{
Cell[436207, 7738, 8372, 181, 831, "Input"],
Cell[444582, 7921, 5908, 113, 429, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[450539, 8040, 375, 5, 44, "Subsection"],
Cell[CellGroupData[{
Cell[450939, 8049, 8630, 187, 852, "Input"],
Cell[459572, 8238, 6325, 118, 455, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[465946, 8362, 317, 5, 44, "Subsection"],
Cell[CellGroupData[{
Cell[466288, 8371, 9270, 195, 873, "Input"],
Cell[475561, 8568, 6647, 124, 495, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[482257, 8698, 377, 6, 44, "Subsection"],
Cell[CellGroupData[{
Cell[482659, 8708, 8237, 176, 789, "Input"],
Cell[490899, 8886, 6041, 111, 495, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[497001, 9004, 170, 2, 64, "Section"],
Cell[CellGroupData[{
Cell[497196, 9010, 7940, 181, 831, "Input"],
Cell[505139, 9193, 6160, 113, 503, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[511336, 9311, 115, 1, 44, "Subsection"],
Cell[CellGroupData[{
Cell[511476, 9316, 3693, 92, 451, "Input"],
Cell[515172, 9410, 3626, 71, 231, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[518847, 9487, 119, 1, 44, "Subsection"],
Cell[CellGroupData[{
Cell[518991, 9492, 4133, 106, 493, "Input"],
Cell[523127, 9600, 4364, 83, 259, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[527540, 9689, 109, 1, 44, "Subsection"],
Cell[CellGroupData[{
Cell[527674, 9694, 6683, 148, 705, "Input"],
Cell[534360, 9844, 6428, 110, 451, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[540825, 9959, 5930, 139, 705, "Input"],
Cell[546758, 10100, 5825, 102, 451, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

